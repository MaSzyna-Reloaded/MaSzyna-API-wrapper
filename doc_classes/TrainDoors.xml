<?xml version="1.0" encoding="UTF-8" ?>
<class name="TrainDoors" inherits="TrainPart" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		This class is eligible for managing door behavior as well as their low-circuit voltage, platforms, opening, closing and controlling
	</brief_description>
	<description>
		This class simply coordinates door behavior
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="door_lock">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Enable or disable door lock
			</description>
		</method>
		<method name="door_remote_control">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Enable or disable doors remote control
			</description>
		</method>
		<method name="next_permit_preset">
			<return type="void" />
			<description>
				Activate next permission preset. See [member TrainDoors.permit/list].
			</description>
		</method>
		<method name="operate_doors">
			<return type="void" />
			<param index="0" name="side" type="int" enum="TrainDoors.Side" />
			<param index="1" name="state" type="bool" />
			<description>
				Open or close doors on the specified side
			</description>
		</method>
		<method name="operate_left_doors">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Open or close left doors
			</description>
		</method>
		<method name="operate_right_doors">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Open or close right doors
			</description>
		</method>
		<method name="permit_doors">
			<return type="void" />
			<param index="0" name="side" type="int" enum="TrainDoors.Side" />
			<param index="1" name="state" type="bool" />
			<description>
				Permission to operate doors specified as an argument
			</description>
		</method>
		<method name="permit_left_doors">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Permission to operate left doors
			</description>
		</method>
		<method name="permit_right_doors">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Permission to operate right doors
			</description>
		</method>
		<method name="permit_step">
			<return type="void" />
			<param index="0" name="state" type="bool" />
			<description>
				Permission to operate the step
			</description>
		</method>
		<method name="previous_permit_preset">
			<return type="void" />
			<description>
				Activate previous permission preset. See [member TrainDoors.permit/list].
			</description>
		</method>
	</methods>
	<members>
		<member name="close/auto_close_remote" type="bool" setter="set_auto_close_remote" getter="get_auto_close_remote" default="false">
			[code]Doors:DoorAutoCloseRemote[/code]
			Automatic closing of centrally open doors after a certain period of time
		</member>
		<member name="close/auto_close_velocity" type="float" setter="set_auto_close_velocity" getter="get_auto_close_velocity" default="-1.0">
			[code]Doors:DoorAutoCloseVel[/code]
			The speed at which the automatic door closing occurs
		</member>
		<member name="close/auto_close_warning" type="bool" setter="set_auto_close_warning" getter="get_auto_close_warning" default="false">
			[code]Doors:DoorClosureWarningAuto[/code]
			When the door closing button is pressed, a buzz sound is activated automatically, and when released, the doors close
		</member>
		<member name="close/delay" type="float" setter="set_close_delay" getter="get_close_delay" default="0.0">
			[code]Doors:DoorCloseDelay[/code]
			Door closing delay, in seconds
		</member>
		<member name="close/method" type="int" setter="set_close_method" getter="get_close_method" enum="TrainDoors.Controls" default="0">
			[code]Doors:CloseCtrl[/code]
			Determines method of closing doors
		</member>
		<member name="close/speed" type="float" setter="set_close_speed" getter="get_close_speed" default="1.0">
			[code]Doors:CloseSpeed[/code]
			Animation speed for closing doors
		</member>
		<member name="close/warning" type="bool" setter="set_close_warning" getter="get_close_warning" default="false">
			[code]Doors:DoorClosureWarning[/code]
			Only a buzzer (used before closing the doors, like in EN57 EMUs)
		</member>
		<member name="has_lock" type="bool" setter="set_has_lock" getter="get_has_lock" default="false">
			[code]Doors:DoorBlocked[/code]
			Doors has locking mechanism
		</member>
		<member name="max_shift" type="float" setter="set_max_shift" getter="get_max_shift" default="0.5">
			[code]Doors:DoorMaxShiftL[/code] or [code]Doors:DoorMaxShiftR[/code]
			Width (or angle) of full door opening.
			Note that the original simulator is using the same value for both sides. When both are provided, the simulator will use [code]DoorMaxShiftR[/code] for both sides.
		</member>
		<member name="max_shift_plug" type="float" setter="set_max_shift_plug" getter="get_max_shift_plug" default="0.1">
			[code]Doors:DoorMaxShiftPlug[/code]
			Bounce distance for Plug-type doors (sliding bounce), in meters
		</member>
		<member name="mirror/close_velocity" type="float" setter="set_mirror_close_velocity" getter="get_mirror_close_velocity" default="5.0">
			[code]Doors:MirrorVelClose[/code]
			Vehicle speed at which automatic closure of exterior mirrors occurs
		</member>
		<member name="mirror/max_shift" type="float" setter="set_mirror_max_shift" getter="get_mirror_max_shift" default="90.0">
			[code]Doors:MirrorMaxShift[/code]
			Rotation angle for a fully unfolded mirror
		</member>
		<member name="open/delay" type="float" setter="set_open_delay" getter="get_open_delay" default="0.0">
			[code]Doors:DoorOpenDelay[/code]
			Door opening delay, in seconds
		</member>
		<member name="open/method" type="int" setter="set_open_method" getter="get_open_method" enum="TrainDoors.Controls" default="0">
			[code]Doors:OpenCtrl[/code]
			Determines method of opening doors
		</member>
		<member name="open/speed" type="float" setter="set_open_speed" getter="get_open_speed" default="1.0">
			[code]Doors:OpenSpeed[/code]
			Animation speed for opening doors
		</member>
		<member name="open/time" type="float" setter="set_open_time" getter="get_open_time" default="-1.0">
			[code]Doors:DoorStayOpen[/code]
			Time period for which door would stay opened
		</member>
		<member name="open/with_permit" type="float" setter="set_open_with_permit" getter="get_open_with_permit" default="-1.0">
			[code]Doors:DoorOpenWithPermit[/code]
			Opening the train doors by holding down the momentary open permission button for specified number of seconds
		</member>
		<member name="permit/default" type="int" setter="set_permit_default" getter="get_permit_default" default="1">
			[code]Doors:DoorPermitListDefault[/code]
			By default, the position of the knob is set from the permit/list entry where the positions are numbered starting from 1
		</member>
		<member name="permit/light_blinking" type="int" setter="set_permit_light_blinking" getter="get_permit_light_blinking" enum="TrainDoors.PermitLight" default="0">
			[code]Doors:DoorsPermitLightBlinking[/code]
			Configuration of the permission light on the door
		</member>
		<member name="permit/list" type="Array" setter="set_permit_list" getter="get_permit_list" default="[&quot;0&quot;, &quot;0&quot;, &quot;0&quot;]">
			[code]Doors:DoorPermitList[/code]
			Door programmer configuration
			[codeblocks]
			0 - No permissions
			1 - Permission for left-sided doors
			2 - Permission for right-sided doors
			3 - Permission for both-sided doors
			[/codeblocks]
		</member>
		<member name="permit/required" type="bool" setter="set_permit_required" getter="get_permit_required" default="false">
			[code]Doors:DoorNeedPermit[/code]
			Opening the doors by passengers requires permission from the train driver
		</member>
		<member name="platform/max_shift" type="float" setter="set_platform_max_shift" getter="get_platform_max_shift" default="0.0">
			[code]Doors:PlatformMaxShift[/code]
			Shift value in meters or rotation angle for a fully deployed platform
		</member>
		<member name="platform/max_speed" type="float" setter="set_platform_max_speed" getter="get_platform_max_speed" default="0.0">
			[code]Doors:PlatformMaxSpeed[/code]
			Maximum speed of opening the platform
		</member>
		<member name="platform/speed" type="float" setter="set_platform_speed" getter="get_platform_speed" default="0.5">
			[code]Doors:PlatformSpeed[/code]
			The speed of the animation platform, where 1.0 corresponds to an animation lasting one second, the value 0.5 corresponds to two seconds, etc
		</member>
		<member name="platform/type" type="int" setter="set_platform_type" getter="get_platform_type" enum="TrainDoors.PlatformType" default="1">
			[code]Doors:PlatformOpenMethod[/code]
			The type of the platform
		</member>
		<member name="type" type="int" setter="set_type" getter="get_type" enum="TrainDoors.Type" default="1">
			[code]Doors:DoorOpenMethod[/code]
			Type of doors
		</member>
		<member name="voltage" type="int" setter="set_voltage" getter="get_voltage" enum="TrainDoors.Voltage" default="0">
			[code]Doors:Voltage[/code]
			Voltage of low-voltage circuit required to control doors
		</member>
	</members>
	<constants>
		<constant name="PERMIT_LIGHT_CONTINUOUS" value="0" enum="PermitLight">
			Continuous light
		</constant>
		<constant name="PERMIT_LIGHT_FLASHING_ON_PERMISSION_WITH_STEP" value="1" enum="PermitLight">
			Continuous light when any door is open or any step is extended; flashing only when permission is granted
		</constant>
		<constant name="PERMIT_LIGHT_FLASHING_ON_PERMISSION" value="2" enum="PermitLight">
			Continuous light when any door is open; flashing when permission is granted; the position of the step is irrelevant
		</constant>
		<constant name="PERMIT_LIGHT_FLASHING_ALWAYS" value="3" enum="PermitLight">
			Permission light is flashing regardless of the state of the doors or the position of the step
		</constant>
		<constant name="PLATFORM_TYPE_SHIFT" value="0" enum="PlatformType">
			Platform animation shift
		</constant>
		<constant name="PLATFORM_TYPE_ROTATE" value="1" enum="PlatformType">
			Platform animation rotate
		</constant>
		<constant name="SIDE_RIGHT" value="0" enum="Side">
			Indicates that doors are on the right side of the train
		</constant>
		<constant name="SIDE_LEFT" value="1" enum="Side">
			Indicates that doors are on the left side of the train
		</constant>
		<constant name="CONTROLS_PASSENGER" value="0" enum="Controls">
			Doors are manually closed/opened, ignoring any remote commands
		</constant>
		<constant name="CONTROLS_AUTOMATIC" value="1" enum="Controls">
			Doors do operate automatically
		</constant>
		<constant name="CONTROLS_DRIVER" value="2" enum="Controls">
			Doors are controlled by the driver of the train and only respond to remote commands
		</constant>
		<constant name="CONTROLS_CONDUCTOR" value="3" enum="Controls">
			Doors are controlled by the conductor of the train and only respond to remote commands
		</constant>
		<constant name="CONTROLS_MIXED" value="4" enum="Controls">
			Doors can be closed both manually and remotely
		</constant>
		<constant name="VOLTAGE_0" value="1" enum="Voltage">
			0V is required in the low voltage circuit. Doors are opened manually
		</constant>
		<constant name="VOLTAGE_12" value="2" enum="Voltage">
			12V are required in the low-voltage circuit to control the doors
		</constant>
		<constant name="VOLTAGE_24" value="3" enum="Voltage">
			24V are required in the low voltage circuit to control the doors
		</constant>
		<constant name="VOLTAGE_112" value="4" enum="Voltage">
			112V are required in the low voltage circuit to control the doors
		</constant>
		<constant name="TYPE_SHIFT" value="0" enum="Type">
			Sliding/shifting door type
		</constant>
		<constant name="TYPE_ROTATE" value="1" enum="Type">
			Rotating door type
		</constant>
		<constant name="TYPE_FOLD" value="2" enum="Type">
			Pivot-folding door type
		</constant>
		<constant name="TYPE_PLUG" value="3" enum="Type">
			Pivot-sliding door type
		</constant>
	</constants>
</class>
