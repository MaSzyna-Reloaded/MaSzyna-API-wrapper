{
  "version": "3",
  "listProblem": [
    {
      "tool": "Code Inspection",
      "category": "llvm",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "llvm",
          "name": "llvm"
        }
      ],
      "type": "include-order",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "#includes are not sorted properly",
      "detailsInfo": "#includes are not sorted properly",
      "sources": [
        {
          "type": "file",
          "path": "src/register_types.cpp",
          "line": 1,
          "offset": 1,
          "length": 1,
          "code": {
            "startLine": 1,
            "length": 1,
            "offset": 0,
            "surroundingCode": "#include <gdextension_interface.h>\n#include <godot_cpp/classes/engine.hpp>\n#include <godot_cpp/core/defs.hpp>"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "llvm-include-order"
      },
      "hash": "2ff5887ffc7c4c2c7f658f78828cbca087a624d975987ad8b6cbe7037a058732"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "src/register_types.cpp",
          "line": 23,
          "offset": 14,
          "length": 22,
          "code": {
            "startLine": 21,
            "length": 22,
            "offset": 37,
            "surroundingCode": "using namespace godot;\n\nTrainSystem *train_system_singleton = nullptr;\nLogSystem *log_system_singleton = nullptr;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "a85c0980f184d4e5752df1e6a960957d651d7e329d8f6f727533ae3c78fcb6a9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'train_system_singleton' provides global access to a non-const object; consider making the pointed-to data 'const'",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "src/register_types.cpp",
          "line": 23,
          "offset": 14,
          "length": 22,
          "code": {
            "startLine": 21,
            "length": 22,
            "offset": 37,
            "surroundingCode": "using namespace godot;\n\nTrainSystem *train_system_singleton = nullptr;\nLogSystem *log_system_singleton = nullptr;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c2d0a2861ff1527b6ad069467a03585e2262e37011728ca662b33e2cfbf8033d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'log_system_singleton' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "src/register_types.cpp",
          "line": 24,
          "offset": 12,
          "length": 20,
          "code": {
            "startLine": 22,
            "length": 20,
            "offset": 59,
            "surroundingCode": "\nTrainSystem *train_system_singleton = nullptr;\nLogSystem *log_system_singleton = nullptr;\n\nvoid initialize_libmaszyna_module(ModuleInitializationLevel p_level) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "2858877bcc32b92f9f91747937c015e2dc0b432edb13673f9870d3d4d20186ac"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'log_system_singleton' provides global access to a non-const object; consider making the pointed-to data 'const'",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "src/register_types.cpp",
          "line": 24,
          "offset": 12,
          "length": 20,
          "code": {
            "startLine": 22,
            "length": 20,
            "offset": 59,
            "surroundingCode": "\nTrainSystem *train_system_singleton = nullptr;\nLogSystem *log_system_singleton = nullptr;\n\nvoid initialize_libmaszyna_module(ModuleInitializationLevel p_level) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "58cc7f51821e0764782938dd35db0999e660c24744d0b540431b7a2b420c67bd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'TrainSystem *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "src/register_types.cpp",
          "line": 58,
          "offset": 9,
          "length": 22,
          "code": {
            "startLine": 56,
            "length": 22,
            "offset": 15,
            "surroundingCode": "    }\n\n    if (train_system_singleton) {\n        Engine::get_singleton()->unregister_singleton(\"TrainSystem\");\n        Engine::get_singleton()->unregister_singleton(\"LogSystem\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "42ae5b622a4b78969aa57339b7bdcea8ae85e601bc4d656b36791241be2b2f2f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 56,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 54,
            "length": 7,
            "offset": 11,
            "surroundingCode": "\t}\n#endif\n\tVector3 beg_1, beg_2;\n\tVector3 end_1, end_2;\n\tVector3 min, max;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "a30e4cf128ca702058c44bcbe6659d67d6d88d73d63a8fe152a7692dd6210345"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 57,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 55,
            "length": 7,
            "offset": 31,
            "surroundingCode": "#endif\n\tVector3 beg_1, beg_2;\n\tVector3 end_1, end_2;\n\tVector3 min, max;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "4f1a2b248b89751cab0b261b7034d47852cf0573f80c2e070aae3fbb57b25e76"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 58,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 56,
            "length": 7,
            "offset": 47,
            "surroundingCode": "\tVector3 beg_1, beg_2;\n\tVector3 end_1, end_2;\n\tVector3 min, max;\n\n\tbeg_1 = position;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "ef0201b06dfd5638a33cba404ce2d26e5800b17379adc5b97adfd0c64615ef10"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 96,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 94,
            "length": 7,
            "offset": 52,
            "surroundingCode": "\tVector3 dst_max = p_aabb.position + p_aabb.size;\n\n\tVector3 min, max;\n\n\tif (src_min.x > dst_max.x || src_max.x < dst_min.x) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "24a7988d3a231424949135380d8f3043521c9b500d380a9c926c087ca360cdbd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 100,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 98,
            "length": 4,
            "offset": 75,
            "surroundingCode": "\tif (src_min.x > dst_max.x || src_max.x < dst_min.x) {\n\t\treturn AABB();\n\t} else {\n\t\tmin.x = (src_min.x > dst_min.x) ? src_min.x : dst_min.x;\n\t\tmax.x = (src_max.x < dst_max.x) ? src_max.x : dst_max.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "0a1f4ec4d9ecd6c2189d990a3352f539ca8c3d9c6549cc8b7f803091a5d8dd5a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 107,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 105,
            "length": 4,
            "offset": 75,
            "surroundingCode": "\tif (src_min.y > dst_max.y || src_max.y < dst_min.y) {\n\t\treturn AABB();\n\t} else {\n\t\tmin.y = (src_min.y > dst_min.y) ? src_min.y : dst_min.y;\n\t\tmax.y = (src_max.y < dst_max.y) ? src_max.y : dst_max.y;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "25583bd53e75aa49e3752af781a83409df6ad285cdf64c31764d317bb1ec8613"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 114,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 112,
            "length": 4,
            "offset": 75,
            "surroundingCode": "\tif (src_min.z > dst_max.z || src_max.z < dst_min.z) {\n\t\treturn AABB();\n\t} else {\n\t\tmin.z = (src_min.z > dst_min.z) ? src_min.z : dst_min.z;\n\t\tmax.z = (src_max.z < dst_max.z) ? src_max.z : dst_max.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "2f7a682631f38ccb8679d768ca519d16000c9dd5221bbb1547df8698a5da14aa"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'intersects_ray' of similar type ('Vector3 *') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 122,
          "offset": 72,
          "length": 7,
          "code": {
            "startLine": 120,
            "length": 7,
            "offset": 74,
            "surroundingCode": "}\n\nbool AABB::intersects_ray(const Vector3 &p_from, const Vector3 &p_dir, Vector3 *r_clip, Vector3 *r_normal) const {\n#ifdef MATH_CHECKS\n\tif (unlikely(size.x < 0 || size.y < 0 || size.z < 0)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "776c870ebff1eff42f8141cdfc08a0c0c1865d454ffcc53a76c62a7a375fc26d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 128,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 126,
            "length": 7,
            "offset": 11,
            "surroundingCode": "\t}\n#endif\n\tVector3 c1, c2;\n\tVector3 end = position + size;\n\treal_t near = -1e20;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "b17bee0f4fc0e92e0346173befe53b8a87a231d64e700d80f3c0d12e72b888cf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 128,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 126,
            "length": 2,
            "offset": 19,
            "surroundingCode": "\t}\n#endif\n\tVector3 c1, c2;\n\tVector3 end = position + size;\n\treal_t near = -1e20;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cd8e948d4d54aa1cb14177ff10889357852672a7b15e730bd7eeec372255cdbf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 128,
          "offset": 14,
          "length": 2,
          "code": {
            "startLine": 126,
            "length": 2,
            "offset": 23,
            "surroundingCode": "\t}\n#endif\n\tVector3 c1, c2;\n\tVector3 end = position + size;\n\treal_t near = -1e20;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e54fb73a3aa7b95a60ea649d2f2250423a0e212bdd7d2cd5073d0719446b86f0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "1e20 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 130,
          "offset": 17,
          "length": 4,
          "code": {
            "startLine": 128,
            "length": 4,
            "offset": 65,
            "surroundingCode": "\tVector3 c1, c2;\n\tVector3 end = position + size;\n\treal_t near = -1e20;\n\treal_t far = 1e20;\n\tint axis = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9ae3bb51fd88fc781de15d7617dfe1ef8fb85de1084a973828ed85c3d5377b97"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "1e20 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 131,
          "offset": 15,
          "length": 4,
          "code": {
            "startLine": 129,
            "length": 4,
            "offset": 68,
            "surroundingCode": "\tVector3 end = position + size;\n\treal_t near = -1e20;\n\treal_t far = 1e20;\n\tint axis = 0;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ca669b130bf88407e5bc00ee96e1b0e5091e0a1e048292447ce29263dfdf8c09"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "use-std-min-max",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "use `std::min` instead of `<`",
      "detailsInfo": "use-std-min-max",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 150,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 148,
            "length": 2,
            "offset": 22,
            "surroundingCode": "\t\t\t\taxis = i;\n\t\t\t}\n\t\t\tif (c2[i] < far) {\n\t\t\t\tfar = c2[i];\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-use-std-min-max"
      },
      "hash": "a254365d2a3518d49d317f62a08bc6eeff2fb51a35a45e6e8c641d84075f9c7e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Vector3 *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 159,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 157,
            "length": 6,
            "offset": 9,
            "surroundingCode": "\t}\n\n\tif (r_clip) {\n\t\t*r_clip = c1;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "e09fbe2da7735ea218827bdbbf314c0cd52c1984603e964b9e3b21f171e556ec"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Vector3 *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 162,
          "offset": 6,
          "length": 8,
          "code": {
            "startLine": 160,
            "length": 8,
            "offset": 24,
            "surroundingCode": "\t\t*r_clip = c1;\n\t}\n\tif (r_normal) {\n\t\t*r_normal = Vector3();\n\t\t(*r_normal)[axis] = p_dir[axis] ? -1 : 1;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "0a0abec9b08e5621d19e3b23fe9f6bca3a645d018d9d3d6e40572a5dcf5ab279"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'real_t' (aka 'float') to 'bool'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 164,
          "offset": 23,
          "length": 5,
          "code": {
            "startLine": 162,
            "length": 5,
            "offset": 64,
            "surroundingCode": "\tif (r_normal) {\n\t\t*r_normal = Vector3();\n\t\t(*r_normal)[axis] = p_dir[axis] ? -1 : 1;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "d8a650b9df616c4e1f66c459801c0a001b98ecfa5524e0349593e7e604475778"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'real_t' (aka 'float') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 164,
          "offset": 23,
          "length": 5,
          "code": {
            "startLine": 162,
            "length": 5,
            "offset": 64,
            "surroundingCode": "\tif (r_normal) {\n\t\t*r_normal = Vector3();\n\t\t(*r_normal)[axis] = p_dir[axis] ? -1 : 1;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "68c8989e0085a813807654e0c7c7bd0a015338fb3fc2f765bc634182d932281d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-cognitive-complexity",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'intersects_segment' has cognitive complexity of 32 (threshold 25)",
      "detailsInfo": "function-cognitive-complexity",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 170,
          "offset": 12,
          "length": 18,
          "code": {
            "startLine": 168,
            "length": 18,
            "offset": 14,
            "surroundingCode": "}\n\nbool AABB::intersects_segment(const Vector3 &p_from, const Vector3 &p_to, Vector3 *r_clip, Vector3 *r_normal) const {\n#ifdef MATH_CHECKS\n\tif (unlikely(size.x < 0 || size.y < 0 || size.z < 0)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-cognitive-complexity"
      },
      "hash": "f80124ef05651635c450b9b3b96b4f5671ebc1106e8593714ef38ba935f46cc7"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'intersects_segment' of similar type ('Vector3 *') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 170,
          "offset": 75,
          "length": 7,
          "code": {
            "startLine": 168,
            "length": 7,
            "offset": 77,
            "surroundingCode": "}\n\nbool AABB::intersects_segment(const Vector3 &p_from, const Vector3 &p_to, Vector3 *r_clip, Vector3 *r_normal) const {\n#ifdef MATH_CHECKS\n\tif (unlikely(size.x < 0 || size.y < 0 || size.z < 0)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "1d971290b13186851921142abe8f061818151fcc0e59c90bac5b9859a3f98539"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 176,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 174,
            "length": 6,
            "offset": 11,
            "surroundingCode": "\t}\n#endif\n\treal_t min = 0, max = 1;\n\tint axis = 0;\n\treal_t sign = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "35ce75d8f23fa32a0a0c87538d79e705f57900ac3a272e0e195c37d676d81961"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 185,
          "offset": 3,
          "length": 6,
          "code": {
            "startLine": 183,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\t\treal_t box_begin = position[i];\n\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "9c76ebf5fbfa946d6a774f153224fa1d5420a3183339dfcf2610bbb05faf7ea7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'cmin' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 185,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 183,
            "length": 4,
            "offset": 83,
            "surroundingCode": "\t\treal_t box_begin = position[i];\n\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "b18ccc16ef191dda9a935e644604940f974c09e434174818e10b289fd2089eb6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'cmax' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 185,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 183,
            "length": 4,
            "offset": 89,
            "surroundingCode": "\t\treal_t box_begin = position[i];\n\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "dd29a8d76652fa36baa114b6a3fdbe35c2aef1966975748c04037f4eadafc32c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'csign' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 186,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 184,
            "length": 5,
            "offset": 70,
            "surroundingCode": "\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n\n\t\tif (seg_from < seg_to) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "0f08453070bf078e5e2d32d0c578678a2bae1b4e0e33c129400c5b2e683c0708"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "use-std-min-max",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "use `std::min` instead of `<`",
      "detailsInfo": "use-std-min-max",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 212,
          "offset": 3,
          "length": 2,
          "code": {
            "startLine": 210,
            "length": 2,
            "offset": 23,
            "surroundingCode": "\t\t\tsign = csign;\n\t\t}\n\t\tif (cmax < max) {\n\t\t\tmax = cmax;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-use-std-min-max"
      },
      "hash": "d908cd238788b3f64703ccc4fbc2bccff21e3845754fe30fe96921616890d974"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Vector3 *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 222,
          "offset": 6,
          "length": 8,
          "code": {
            "startLine": 220,
            "length": 8,
            "offset": 36,
            "surroundingCode": "\tVector3 rel = p_to - p_from;\n\n\tif (r_normal) {\n\t\tVector3 normal;\n\t\tnormal[axis] = sign;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "150043aedbcdff6e084498c21697a59339fa852af5cf607efd1505296439ddfa"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Vector3 *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 228,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 226,
            "length": 6,
            "offset": 9,
            "surroundingCode": "\t}\n\n\tif (r_clip) {\n\t\t*r_clip = p_from + rel * min;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "7a3f5b3c9139cd17fe24910a5c65ec410d6ae2c5c7b8708445da66c83b85e170"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 236,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 234,
            "length": 7,
            "offset": 60,
            "surroundingCode": "\nbool AABB::intersects_plane(const Plane &p_plane) const {\n\tVector3 points[8] = {\n\t\tVector3(position.x, position.y, position.z),\n\t\tVector3(position.x, position.y, position.z + size.z),"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "2f3aef70e7e08eaad79d477894f14ab3d7bf4212b648161176d763a45c0cee5b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 236,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 234,
            "length": 1,
            "offset": 75,
            "surroundingCode": "\nbool AABB::intersects_plane(const Plane &p_plane) const {\n\tVector3 points[8] = {\n\t\tVector3(position.x, position.y, position.z),\n\t\tVector3(position.x, position.y, position.z + size.z),"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d0e1368cea32b7dc299d78edd67a75696fdf6b85f149c50c3f3017bb2e1d9a7e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 250,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 248,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\tbool under = false;\n\n\tfor (int i = 0; i < 8; i++) {\n\t\tif (p_plane.distance_to(points[i]) > 0) {\n\t\t\tover = true;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a3d9067a58300ad0bdd17d4fc5c71c5284c8dd063a0e1ed6616d79151286b99f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 251,
          "offset": 27,
          "length": 6,
          "code": {
            "startLine": 249,
            "length": 6,
            "offset": 58,
            "surroundingCode": "\n\tfor (int i = 0; i < 8; i++) {\n\t\tif (p_plane.distance_to(points[i]) > 0) {\n\t\t\tover = true;\n\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "3a8977b3f2a690345523175623699c888c7d3ffe64bc51c3441e5e4e05f7d728"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'get_edge' of similar type ('Vector3 &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 343,
          "offset": 33,
          "length": 7,
          "code": {
            "startLine": 341,
            "length": 7,
            "offset": 35,
            "surroundingCode": "}\n\nvoid AABB::get_edge(int p_edge, Vector3 &r_from, Vector3 &r_to) const {\n\tERR_FAIL_INDEX(p_edge, 12);\n\tswitch (p_edge) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "12bf0ac40ab831146a155325b7e0638c065a3d30d7ed9505257dfcb046cd75de"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "switch-missing-default-case",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "switching on non-enum value without default case may not cover all cases",
      "detailsInfo": "switch-missing-default-case",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 345,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 343,
            "length": 6,
            "offset": 102,
            "surroundingCode": "void AABB::get_edge(int p_edge, Vector3 &r_from, Vector3 &r_to) const {\n\tERR_FAIL_INDEX(p_edge, 12);\n\tswitch (p_edge) {\n\t\tcase 0: {\n\t\t\tr_from = Vector3(position.x + size.x, position.y, position.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-switch-missing-default-case"
      },
      "hash": "81a90026bab6d90572cf09245f2bc135b2c8ec93781d036a77b9d8b63c1f4838"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 368,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 366,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\t\t\tr_to = Vector3(position.x + size.x, position.y + size.y, position.z);\n\t\t} break;\n\t\tcase 5: {\n\t\t\tr_from = Vector3(position.x + size.x, position.y + size.y, position.z);\n\t\t\tr_to = Vector3(position.x + size.x, position.y + size.y, position.z + size.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f77ad8d359fe2e97d4fe683f64ecf93a3212a10fadbcba5a7c7d55be7774a3fc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 372,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 370,
            "length": 1,
            "offset": 100,
            "surroundingCode": "\t\t\tr_to = Vector3(position.x + size.x, position.y + size.y, position.z + size.z);\n\t\t} break;\n\t\tcase 6: {\n\t\t\tr_from = Vector3(position.x + size.x, position.y + size.y, position.z + size.z);\n\t\t\tr_to = Vector3(position.x, position.y + size.y, position.z + size.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "85abafe9bf94ab51b45a857b264ad1ae55c6938c4ea3c36739277f92d6c43ddb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 377,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 375,
            "length": 1,
            "offset": 19,
            "surroundingCode": "\n\t\t} break;\n\t\tcase 7: {\n\t\t\tr_from = Vector3(position.x, position.y + size.y, position.z + size.z);\n\t\t\tr_to = Vector3(position.x, position.y + size.y, position.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "334113f72d676817544450f138e3c5570482f6c06cb21da1746f40fe3d794a48"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 382,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 380,
            "length": 1,
            "offset": 19,
            "surroundingCode": "\n\t\t} break;\n\t\tcase 8: {\n\t\t\tr_from = Vector3(position.x, position.y, position.z + size.z);\n\t\t\tr_to = Vector3(position.x, position.y + size.y, position.z + size.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c7f98c40835d406a2fb1c0288263a443c7782bfe616f415a2ddece81a4f0a942"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 387,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 385,
            "length": 1,
            "offset": 19,
            "surroundingCode": "\n\t\t} break;\n\t\tcase 9: {\n\t\t\tr_from = Vector3(position.x, position.y, position.z);\n\t\t\tr_to = Vector3(position.x, position.y + size.y, position.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "86faa173bb2459bcd36a89b4229ad72ac448e76d9a8f488957a3c811e525fb09"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 392,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 390,
            "length": 2,
            "offset": 19,
            "surroundingCode": "\n\t\t} break;\n\t\tcase 10: {\n\t\t\tr_from = Vector3(position.x + size.x, position.y, position.z);\n\t\t\tr_to = Vector3(position.x + size.x, position.y + size.y, position.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c950007d19add21f4190b497f750cf1f7d0a5299175c29c99db889e457d7be55"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/aabb.cpp",
          "line": 397,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 395,
            "length": 2,
            "offset": 19,
            "surroundingCode": "\n\t\t} break;\n\t\tcase 11: {\n\t\t\tr_from = Vector3(position.x + size.x, position.y, position.z + size.z);\n\t\t\tr_to = Vector3(position.x + size.x, position.y + size.y, position.z + size.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "990bddf3226a1bc753021a302f1750e96f8386618dbdcde294ee4a5d0428847d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "macro-usage",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function-like macro 'cofac' used; consider a 'constexpr' template function",
      "detailsInfo": "macro-usage",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 35,
          "offset": 9,
          "length": 5,
          "code": {
            "startLine": 33,
            "length": 5,
            "offset": 49,
            "surroundingCode": "#include <godot_cpp/variant/string.hpp>\n\n#define cofac(row1, col1, row2, col2) \\\n\t(rows[row1][col1] * rows[row2][col2] - rows[row1][col2] * rows[row2][col1])\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-macro-usage"
      },
      "hash": "18750363e13e81ea689547a2d56e97ea3aea7f8abf3ee68da05c07a0cad64aa0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 43,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 41,
            "length": 1,
            "offset": 83,
            "surroundingCode": "\tif (Math::abs(p_z.z) > (real_t)Math_SQRT12) {\n\t\t// choose p in y-z plane\n\t\treal_t a = p_z[1] * p_z[1] + p_z[2] * p_z[2];\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(0, -p_z[2] * k, p_z[1] * k);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b28877eb888238d67718362cf61ff09980a46e1276705da095be8227706bc578"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 43,
          "offset": 14,
          "length": 3,
          "code": {
            "startLine": 41,
            "length": 3,
            "offset": 87,
            "surroundingCode": "\tif (Math::abs(p_z.z) > (real_t)Math_SQRT12) {\n\t\t// choose p in y-z plane\n\t\treal_t a = p_z[1] * p_z[1] + p_z[2] * p_z[2];\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(0, -p_z[2] * k, p_z[1] * k);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "824d5cb676fff9214f8855df93b844939a4878fa2dff86346e0d1f242fd64813"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 43,
          "offset": 32,
          "length": 3,
          "code": {
            "startLine": 41,
            "length": 3,
            "offset": 105,
            "surroundingCode": "\tif (Math::abs(p_z.z) > (real_t)Math_SQRT12) {\n\t\t// choose p in y-z plane\n\t\treal_t a = p_z[1] * p_z[1] + p_z[2] * p_z[2];\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(0, -p_z[2] * k, p_z[1] * k);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "007519bff0851ea00fa6d5fcf20f7394fafbdb885252f5cdd4260e87e9fa5bc9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'k' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 44,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 42,
            "length": 1,
            "offset": 84,
            "surroundingCode": "\t\t// choose p in y-z plane\n\t\treal_t a = p_z[1] * p_z[1] + p_z[2] * p_z[2];\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(0, -p_z[2] * k, p_z[1] * k);\n\t\trows[1] = Vector3(a * k, -p_z[0] * rows[0][2], p_z[0] * rows[0][1]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1c246b1e786b684cab5a557e637b35d9510414af2cd90203d508010c44fbb84a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 44,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 42,
            "length": 4,
            "offset": 88,
            "surroundingCode": "\t\t// choose p in y-z plane\n\t\treal_t a = p_z[1] * p_z[1] + p_z[2] * p_z[2];\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(0, -p_z[2] * k, p_z[1] * k);\n\t\trows[1] = Vector3(a * k, -p_z[0] * rows[0][2], p_z[0] * rows[0][1]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b14c04ae0579bf27386d7c845a5d1fdd806341d9587abfe3efd29761abde08f8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 49,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 47,
            "length": 1,
            "offset": 46,
            "surroundingCode": "\t} else {\n\t\t// choose p in x-y plane\n\t\treal_t a = p_z.x * p_z.x + p_z.y * p_z.y;\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(-p_z.y * k, p_z.x * k, 0);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "add406bd163aa688f86a834ad846c0de1628e1ad6aad45fd8f7228af8ce656e3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 49,
          "offset": 14,
          "length": 3,
          "code": {
            "startLine": 47,
            "length": 3,
            "offset": 50,
            "surroundingCode": "\t} else {\n\t\t// choose p in x-y plane\n\t\treal_t a = p_z.x * p_z.x + p_z.y * p_z.y;\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(-p_z.y * k, p_z.x * k, 0);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1a1ea6d827844a87147ea40e0ac75dc09705d6eaf458b3a81e3558de23e7194c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'k' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 50,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 48,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\t\t// choose p in x-y plane\n\t\treal_t a = p_z.x * p_z.x + p_z.y * p_z.y;\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(-p_z.y * k, p_z.x * k, 0);\n\t\trows[1] = Vector3(-p_z.z * rows[0].y, p_z.z * rows[0].x, a * k);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ad1b5830d4411c06851493c86f05c3c8c3c8d60986fe72a0375b7f7e9a3de693"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 50,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 48,
            "length": 4,
            "offset": 84,
            "surroundingCode": "\t\t// choose p in x-y plane\n\t\treal_t a = p_z.x * p_z.x + p_z.y * p_z.y;\n\t\treal_t k = 1.0f / Math::sqrt(a);\n\t\trows[0] = Vector3(-p_z.y * k, p_z.x * k, 0);\n\t\trows[1] = Vector3(-p_z.z * rows[0].y, p_z.z * rows[0].x, a * k);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "07147a81086f005812c37ac9745f3914ab5e0be772e31f0ba349fd442a46bc54"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 58,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 56,
            "length": 6,
            "offset": 25,
            "surroundingCode": "\nvoid Basis::invert() {\n\treal_t co[3] = {\n\t\tcofac(1, 1, 2, 2), cofac(1, 2, 2, 0), cofac(1, 0, 2, 1)\n\t};"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "4bf13500f8c9bb4b4144c8f78e67a4e1d83e426d5daacb6b1108d9359615e701"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'co' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 58,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 56,
            "length": 2,
            "offset": 32,
            "surroundingCode": "\nvoid Basis::invert() {\n\treal_t co[3] = {\n\t\tcofac(1, 1, 2, 2), cofac(1, 2, 2, 0), cofac(1, 0, 2, 1)\n\t};"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c8640e5456c63289377c5d7cd43a308667db1def672945688db6c38acaa253f7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 59,
          "offset": 3,
          "length": 5,
          "code": {
            "startLine": 57,
            "length": 5,
            "offset": 43,
            "surroundingCode": "void Basis::invert() {\n\treal_t co[3] = {\n\t\tcofac(1, 1, 2, 2), cofac(1, 2, 2, 0), cofac(1, 0, 2, 1)\n\t};\n\treal_t det = rows[0][0] * co[0] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "d11e76957f9a906c35adb0a2fbdfb8eb297afaef7262eb52f7190670816e29cc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 59,
          "offset": 22,
          "length": 5,
          "code": {
            "startLine": 57,
            "length": 5,
            "offset": 62,
            "surroundingCode": "void Basis::invert() {\n\treal_t co[3] = {\n\t\tcofac(1, 1, 2, 2), cofac(1, 2, 2, 0), cofac(1, 0, 2, 1)\n\t};\n\treal_t det = rows[0][0] * co[0] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "91a80a3091d4d4b0c5c0c61c4c14a873e6e6577dc1d8dadbf98c71078bac0c06"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 59,
          "offset": 41,
          "length": 5,
          "code": {
            "startLine": 57,
            "length": 5,
            "offset": 81,
            "surroundingCode": "void Basis::invert() {\n\treal_t co[3] = {\n\t\tcofac(1, 1, 2, 2), cofac(1, 2, 2, 0), cofac(1, 0, 2, 1)\n\t};\n\treal_t det = rows[0][0] * co[0] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "a3003eea7b2248df9952c4332f4eea5c2048c696f5e02728653382cde93a61f6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 61,
          "offset": 15,
          "length": 4,
          "code": {
            "startLine": 59,
            "length": 4,
            "offset": 76,
            "surroundingCode": "\t\tcofac(1, 1, 2, 2), cofac(1, 2, 2, 0), cofac(1, 0, 2, 1)\n\t};\n\treal_t det = rows[0][0] * co[0] +\n\t\t\trows[0][1] * co[1] +\n\t\t\trows[0][2] * co[2];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "cdf16cc94e3e78305ad2532bc18eeb58010825c240a2db16f9af967e87433355"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 62,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 60,
            "length": 4,
            "offset": 42,
            "surroundingCode": "\t};\n\treal_t det = rows[0][0] * co[0] +\n\t\t\trows[0][1] * co[1] +\n\t\t\trows[0][2] * co[2];\n#ifdef MATH_CHECKS"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "e0db948471ad1d92d61c8c56bb11a78670dba75e4da6d7f0153c810912d5e167"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 63,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 61,
            "length": 4,
            "offset": 62,
            "surroundingCode": "\treal_t det = rows[0][0] * co[0] +\n\t\t\trows[0][1] * co[1] +\n\t\t\trows[0][2] * co[2];\n#ifdef MATH_CHECKS\n\tERR_FAIL_COND(det == 0);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f9992bbab869605a6fba549baf72a86bf11fc4813818cf49a9b86ef9d6ab4430"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 67,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 65,
            "length": 1,
            "offset": 41,
            "surroundingCode": "\tERR_FAIL_COND(det == 0);\n#endif\n\treal_t s = 1.0f / det;\n\n\tset(co[0] * s, cofac(0, 2, 2, 1) * s, cofac(0, 1, 1, 2) * s,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f0664efbca676860388e91cc593cf1518c750cdadfd8d5e6efa6a1019e39d827"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 67,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 65,
            "length": 4,
            "offset": 45,
            "surroundingCode": "\tERR_FAIL_COND(det == 0);\n#endif\n\treal_t s = 1.0f / det;\n\n\tset(co[0] * s, cofac(0, 2, 2, 1) * s, cofac(0, 1, 1, 2) * s,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9b381cb0dafe605e8ec04da1ba6ef1279d38cd81b9533182dbf30c5071ca4491"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'x' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 77,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 75,
            "length": 1,
            "offset": 35,
            "surroundingCode": "\t// Gram-Schmidt Process\n\n\tVector3 x = get_column(0);\n\tVector3 y = get_column(1);\n\tVector3 z = get_column(2);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c20bbff02bdf601bab0eb5196c0472637f36fae9694bd04cdd331efe1cf07589"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'y' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 78,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 76,
            "length": 1,
            "offset": 38,
            "surroundingCode": "\n\tVector3 x = get_column(0);\n\tVector3 y = get_column(1);\n\tVector3 z = get_column(2);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "77be655aa5a512274d2e28ca7f040c9d0218921bfb489bfb7ec7998d44295d89"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'z' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 79,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 77,
            "length": 1,
            "offset": 65,
            "surroundingCode": "\tVector3 x = get_column(0);\n\tVector3 y = get_column(1);\n\tVector3 z = get_column(2);\n\n\tx.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "9687740be2dfdeefeb9c922eda91927b67ad9ecae0b8053dd1a8c1c56f5ef20a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 93,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 91,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nBasis Basis::orthonormalized() const {\n\tBasis c = *this;\n\tc.orthonormalize();\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8dcbc412e3868f6b72242a2bcbe9a9a1c9d702a9c1ed56203a5a2c1be31b024d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 105,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 103,
            "length": 1,
            "offset": 46,
            "surroundingCode": "\nBasis Basis::orthogonalized() const {\n\tBasis c = *this;\n\tc.orthogonalize();\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "91a338bb7a6fe9965c0acbb79958bc8dfd000024f27500988dccaeb9df9b472c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 112,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 110,
            "length": 1,
            "offset": 60,
            "surroundingCode": "bool Basis::is_orthogonal() const {\n\tBasis identity;\n\tBasis m = (*this) * transposed();\n\n\treturn m.is_equal_approx(identity);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5c41554cae087403bf18964919ddd900abb6a1dfb8cf220b814d61fff7781c19"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 153,
          "offset": 29,
          "length": 4,
          "code": {
            "startLine": 151,
            "length": 4,
            "offset": 56,
            "surroundingCode": "\tconst int ite_max = 1024;\n\n\treal_t off_matrix_norm_2 = rows[0][1] * rows[0][1] + rows[0][2] * rows[0][2] + rows[1][2] * rows[1][2];\n\n\tint ite = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "5d9327dc7f587cdd85ae5c32bc82131b620dddb2093b26727da14815a30f386a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 153,
          "offset": 55,
          "length": 4,
          "code": {
            "startLine": 151,
            "length": 4,
            "offset": 82,
            "surroundingCode": "\tconst int ite_max = 1024;\n\n\treal_t off_matrix_norm_2 = rows[0][1] * rows[0][1] + rows[0][2] * rows[0][2] + rows[1][2] * rows[1][2];\n\n\tint ite = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "2e178f898ec694a29c2f48df33bb39e3669db6b5d1de85cab657e61607cb8e28"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 153,
          "offset": 81,
          "length": 4,
          "code": {
            "startLine": 151,
            "length": 4,
            "offset": 108,
            "surroundingCode": "\tconst int ite_max = 1024;\n\n\treal_t off_matrix_norm_2 = rows[0][1] * rows[0][1] + rows[0][2] * rows[0][2] + rows[1][2] * rows[1][2];\n\n\tint ite = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ecb1a6440d88936cfef7837f9898a7e415d9a75dd452443a60c38d968d50cd78"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 162,
          "offset": 3,
          "length": 3,
          "code": {
            "startLine": 160,
            "length": 3,
            "offset": 73,
            "surroundingCode": "\t\treal_t el12_2 = rows[1][2] * rows[1][2];\n\t\t// Find the pivot element\n\t\tint i, j;\n\t\tif (el01_2 > el02_2) {\n\t\t\tif (el12_2 > el01_2) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "291eb8f9a718c1defbe32b9bbdb32ff434fb26d1a8222b5bb41e7cd5da8cf0bd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'i' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 162,
          "offset": 7,
          "length": 1,
          "code": {
            "startLine": 160,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\t\treal_t el12_2 = rows[1][2] * rows[1][2];\n\t\t// Find the pivot element\n\t\tint i, j;\n\t\tif (el01_2 > el02_2) {\n\t\t\tif (el12_2 > el01_2) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "dc4b61fafe47c78249034a206aa590eff2df7dc78664c8ebb1ac13d833bf4be3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'i' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 162,
          "offset": 7,
          "length": 1,
          "code": {
            "startLine": 160,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\t\treal_t el12_2 = rows[1][2] * rows[1][2];\n\t\t// Find the pivot element\n\t\tint i, j;\n\t\tif (el01_2 > el02_2) {\n\t\t\tif (el12_2 > el01_2) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "bb9ea2a16509d1188ecc489b4d31b890bc6a57a4e4f05579f8a49d2a5f89d92e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'j' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 162,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 160,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\t\treal_t el12_2 = rows[1][2] * rows[1][2];\n\t\t// Find the pivot element\n\t\tint i, j;\n\t\tif (el01_2 > el02_2) {\n\t\t\tif (el12_2 > el01_2) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "ac89cd1eb3be59ee0a9353ce67cfb9527b81f70c39df146ff192e544aeb14e2d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'j' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 162,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 160,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\t\treal_t el12_2 = rows[1][2] * rows[1][2];\n\t\t// Find the pivot element\n\t\tint i, j;\n\t\tif (el01_2 > el02_2) {\n\t\t\tif (el12_2 > el01_2) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "87dfb1638dc171f7a23173e7fb99a7b62c5ff45c024ad12f1f04f47f93074f38"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'angle' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 182,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 180,
            "length": 5,
            "offset": 42,
            "surroundingCode": "\n\t\t// Compute the rotation angle\n\t\treal_t angle;\n\t\tif (Math::is_equal_approx(rows[j][j], rows[i][i])) {\n\t\t\tangle = Math_PI / 4;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "c8e4a8b90888a0a17e6e8d113ca1af6813ad8232d76bf6812c6303efcde821f8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 183,
          "offset": 29,
          "length": 4,
          "code": {
            "startLine": 181,
            "length": 4,
            "offset": 76,
            "surroundingCode": "\t\t// Compute the rotation angle\n\t\treal_t angle;\n\t\tif (Math::is_equal_approx(rows[j][j], rows[i][i])) {\n\t\t\tangle = Math_PI / 4;\n\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "1c8ecf6af8cd0dfda7c56c8bd7c2f7361964484be39433bb93e1a5611cf99f02"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 183,
          "offset": 41,
          "length": 4,
          "code": {
            "startLine": 181,
            "length": 4,
            "offset": 88,
            "surroundingCode": "\t\t// Compute the rotation angle\n\t\treal_t angle;\n\t\tif (Math::is_equal_approx(rows[j][j], rows[i][i])) {\n\t\t\tangle = Math_PI / 4;\n\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "adbd74a7d614d908d1278edc7f22f90a0094e0a34e0e633d1180beb97cd76c06"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 186,
          "offset": 12,
          "length": 4,
          "code": {
            "startLine": 184,
            "length": 4,
            "offset": 46,
            "surroundingCode": "\t\t\tangle = Math_PI / 4;\n\t\t} else {\n\t\t\tangle = 0.5f * Math::atan(2 * rows[i][j] / (rows[j][j] - rows[i][i]));\n\t\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9628d2c81764e6e7d0de2d91c3d876e8fac930547c1f272480c75e912b3ecaea"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 186,
          "offset": 12,
          "length": 4,
          "code": {
            "startLine": 184,
            "length": 4,
            "offset": 46,
            "surroundingCode": "\t\t\tangle = Math_PI / 4;\n\t\t} else {\n\t\t\tangle = 0.5f * Math::atan(2 * rows[i][j] / (rows[j][j] - rows[i][i]));\n\t\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9b465641c672ddc3f30fc9968a1d8995dc9afed65ac72659dea7ce88c3fc596d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 186,
          "offset": 34,
          "length": 4,
          "code": {
            "startLine": 184,
            "length": 4,
            "offset": 68,
            "surroundingCode": "\t\t\tangle = Math_PI / 4;\n\t\t} else {\n\t\t\tangle = 0.5f * Math::atan(2 * rows[i][j] / (rows[j][j] - rows[i][i]));\n\t\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "f4ac2d240301296cb819635071c4b79bacad9f2193163abe4ba2c0a1d85e5c42"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 186,
          "offset": 48,
          "length": 4,
          "code": {
            "startLine": 184,
            "length": 4,
            "offset": 82,
            "surroundingCode": "\t\t\tangle = Math_PI / 4;\n\t\t} else {\n\t\t\tangle = 0.5f * Math::atan(2 * rows[i][j] / (rows[j][j] - rows[i][i]));\n\t\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "56cf4de406164617ed953ac7acd897d69678655a53d18b0cd9fd40c40e766af5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 186,
          "offset": 61,
          "length": 4,
          "code": {
            "startLine": 184,
            "length": 4,
            "offset": 95,
            "surroundingCode": "\t\t\tangle = Math_PI / 4;\n\t\t} else {\n\t\t\tangle = 0.5f * Math::atan(2 * rows[i][j] / (rows[j][j] - rows[i][i]));\n\t\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "2f3d9f92d9c3172ea7c7fbb4f2e8cc13449959b510569e33bbf529583344eb80"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 191,
          "offset": 3,
          "length": 3,
          "code": {
            "startLine": 189,
            "length": 3,
            "offset": 48,
            "surroundingCode": "\t\t// Compute the rotation matrix\n\t\tBasis rot;\n\t\trot.rows[i][i] = rot.rows[j][j] = Math::cos(angle);\n\t\trot.rows[i][j] = -(rot.rows[j][i] = Math::sin(angle));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "c52144e7dae11fd1dbcfbc97a0ac5494079eab49bca7a3fa98066999f7916b12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 191,
          "offset": 20,
          "length": 3,
          "code": {
            "startLine": 189,
            "length": 3,
            "offset": 65,
            "surroundingCode": "\t\t// Compute the rotation matrix\n\t\tBasis rot;\n\t\trot.rows[i][i] = rot.rows[j][j] = Math::cos(angle);\n\t\trot.rows[i][j] = -(rot.rows[j][i] = Math::sin(angle));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a080f85d06294ea4a43fb0b16f835a7e155830de4d8a7875452e5f9ab4f88230"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 192,
          "offset": 3,
          "length": 3,
          "code": {
            "startLine": 190,
            "length": 3,
            "offset": 69,
            "surroundingCode": "\t\tBasis rot;\n\t\trot.rows[i][i] = rot.rows[j][j] = Math::cos(angle);\n\t\trot.rows[i][j] = -(rot.rows[j][i] = Math::sin(angle));\n\n\t\t// Update the off matrix norm"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "2081d632f77c1a09e6233be41c2b2fe1e0136d3a8181599a3a27cc98bb8d2676"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 192,
          "offset": 22,
          "length": 3,
          "code": {
            "startLine": 190,
            "length": 3,
            "offset": 88,
            "surroundingCode": "\t\tBasis rot;\n\t\trot.rows[i][i] = rot.rows[j][j] = Math::cos(angle);\n\t\trot.rows[i][j] = -(rot.rows[j][i] = Math::sin(angle));\n\n\t\t// Update the off matrix norm"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "afdd622d73f6edb2b6c1503c8d21bc7a5eae6f93c2d4c6b03007fb88bb26c622"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 195,
          "offset": 24,
          "length": 4,
          "code": {
            "startLine": 193,
            "length": 4,
            "offset": 56,
            "surroundingCode": "\n\t\t// Update the off matrix norm\n\t\toff_matrix_norm_2 -= rows[i][j] * rows[i][j];\n\n\t\t// Apply the rotation"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a5c223affcbe29c86f2477f47aa12a8a2a322d17d2fa76d67ea001ce914a7cb0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 195,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 193,
            "length": 4,
            "offset": 69,
            "surroundingCode": "\n\t\t// Update the off matrix norm\n\t\toff_matrix_norm_2 -= rows[i][j] * rows[i][j];\n\n\t\t// Apply the rotation"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "1914a135b32bd187e462ba3eb990034d4db930853c1c46c9ba1d9f6caf7aa5b8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'tr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 218,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 216,
            "length": 2,
            "offset": 42,
            "surroundingCode": "\nBasis Basis::transposed() const {\n\tBasis tr = *this;\n\ttr.transpose();\n\treturn tr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e1eeab84e8dd4bfd6c9c5948b8e44b48519c486371ed6a25d9d30ca2e16a77f3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 242,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 240,
            "length": 1,
            "offset": 60,
            "surroundingCode": "\nBasis Basis::scaled(const Vector3 &p_scale) const {\n\tBasis m = *this;\n\tm.scale(p_scale);\n\treturn m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "42200d5abcdb0f688a64f09916f01706574ce0fe86cb54d13d68349573bce0d8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 258,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 256,
            "length": 1,
            "offset": 71,
            "surroundingCode": "\nBasis Basis::scaled_orthogonal(const Vector3 &p_scale) const {\n\tBasis m = *this;\n\tVector3 s = Vector3(-1, -1, -1) + p_scale;\n\tVector3 dots;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f4ebb789cdb3671eb9b97dd600bd36c5f664fe0c05cbc8d98b8be694509373f7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 259,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 257,
            "length": 1,
            "offset": 90,
            "surroundingCode": "Basis Basis::scaled_orthogonal(const Vector3 &p_scale) const {\n\tBasis m = *this;\n\tVector3 s = Vector3(-1, -1, -1) + p_scale;\n\tVector3 dots;\n\tBasis b;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "84066bf56bd7844cfb4cdc2c84e8564ecc904083bf1811ef063959b5b8b658ba"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 261,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 259,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\tVector3 s = Vector3(-1, -1, -1) + p_scale;\n\tVector3 dots;\n\tBasis b;\n\tfor (int i = 0; i < 3; i++) {\n\t\tfor (int j = 0; j < 3; j++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "31fbebc08f70b19625ac4590e3ddf5204775376bfa778cbd4afcb203259f9f4e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 272,
          "offset": 68,
          "length": 4,
          "code": {
            "startLine": 270,
            "length": 4,
            "offset": 109,
            "surroundingCode": "\nfloat Basis::get_uniform_scale() const {\n\treturn (rows[0].length() + rows[1].length() + rows[2].length()) / 3.0f;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fc618c71f93dc6151d345e510fc4a0ce62712429c6e62c6f03a71a036d621197"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 272,
          "offset": 68,
          "length": 4,
          "code": {
            "startLine": 270,
            "length": 4,
            "offset": 109,
            "surroundingCode": "\nfloat Basis::get_uniform_scale() const {\n\treturn (rows[0].length() + rows[1].length() + rows[2].length()) / 3.0f;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "e935131303a579b6f070a18a42dfd87f87bb700b6e79d5ab1d2b0b3e6eef65b0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'l' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 276,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 274,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\nvoid Basis::make_scale_uniform() {\n\tfloat l = (rows[0].length() + rows[1].length() + rows[2].length()) / 3.0f;\n\tfor (int i = 0; i < 3; i++) {\n\t\trows[i].normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3d20466d0dd703cc8c5f143920905c78557d93e18b072b34df366011a64e4d7c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 276,
          "offset": 71,
          "length": 4,
          "code": {
            "startLine": 274,
            "length": 4,
            "offset": 106,
            "surroundingCode": "\nvoid Basis::make_scale_uniform() {\n\tfloat l = (rows[0].length() + rows[1].length() + rows[2].length()) / 3.0f;\n\tfor (int i = 0; i < 3; i++) {\n\t\trows[i].normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "34b0b7efe195cec2336ae9b7cdea02ed96f389d1705ecbe4978fc260981ed1e8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 276,
          "offset": 71,
          "length": 4,
          "code": {
            "startLine": 274,
            "length": 4,
            "offset": 106,
            "surroundingCode": "\nvoid Basis::make_scale_uniform() {\n\tfloat l = (rows[0].length() + rows[1].length() + rows[2].length()) / 3.0f;\n\tfor (int i = 0; i < 3; i++) {\n\t\trows[i].normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "2e4a77a98df4cc65ef6435ff53617f5d6aae263de72d9a065afc5ef8daab046f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 278,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 276,
            "length": 4,
            "offset": 109,
            "surroundingCode": "\tfloat l = (rows[0].length() + rows[1].length() + rows[2].length()) / 3.0f;\n\tfor (int i = 0; i < 3; i++) {\n\t\trows[i].normalize();\n\t\trows[i] *= l;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "588c18daf31581676ae3617f9ed20fe863d02bb1df4a0f97ff112bfb764b8188"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 279,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 277,
            "length": 4,
            "offset": 56,
            "surroundingCode": "\tfor (int i = 0; i < 3; i++) {\n\t\trows[i].normalize();\n\t\trows[i] *= l;\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "651045c828c0189a48f4462601bde177cbbd6ed1219d3c1d3c1cc52a8b62ad79"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 389,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 387,
            "length": 1,
            "offset": 163,
            "surroundingCode": "\t// and returns the Euler angles corresponding to the rotation part, complementing get_scale().\n\t// See the comment in get_scale() for further information.\n\tBasis m = orthonormalized();\n\treal_t det = m.determinant();\n\tif (det < 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ddb25953d9177f0311e6c88f76d740723cf359451eebdfad7541c2aa4c40961a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 403,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 401,
            "length": 1,
            "offset": 163,
            "surroundingCode": "\t// and returns the Euler angles corresponding to the rotation part, complementing get_scale().\n\t// See the comment in get_scale() for further information.\n\tBasis m = orthonormalized();\n\treal_t det = m.determinant();\n\tif (det < 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "7cb213b1dc4bbd097c0bcdbcd2d49cb2ea640665af31710c1d6469a87bbe2702"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 419,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 417,
            "length": 4,
            "offset": 110,
            "surroundingCode": "\tif (axis.length_squared() != 0) {\n\t\treal_t dot = p_start_direction.dot(p_end_direction);\n\t\tdot = CLAMP(dot, -1.0f, 1.0f);\n\t\tconst real_t angle_rads = Math::acos(dot);\n\t\tset_axis_angle(axis, angle_rads);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "009942e81e327c2c6d6af35d65e1b4bbc8c3a1dddee442371a0e85c960304e6f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 419,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 417,
            "length": 4,
            "offset": 116,
            "surroundingCode": "\tif (axis.length_squared() != 0) {\n\t\treal_t dot = p_start_direction.dot(p_end_direction);\n\t\tdot = CLAMP(dot, -1.0f, 1.0f);\n\t\tconst real_t angle_rads = Math::acos(dot);\n\t\tset_axis_angle(axis, angle_rads);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "79cf05a76eb59317b5598884ff5ba5ef91845d49e09f8ea9fb37883441a60173"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 429,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 427,
            "length": 1,
            "offset": 163,
            "surroundingCode": "\t// and returns the Euler angles corresponding to the rotation part, complementing get_scale().\n\t// See the comment in get_scale() for further information.\n\tBasis m = orthonormalized();\n\treal_t det = m.determinant();\n\tif (det < 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b7cee44c5bbba6c51a4bcac27a7687d3bf2ca6f487e0b3a3f768ebfadeb855c3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 443,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 441,
            "length": 1,
            "offset": 163,
            "surroundingCode": "\t// and returns the Euler angles corresponding to the rotation part, complementing get_scale().\n\t// See the comment in get_scale() for further information.\n\tBasis m = transposed();\n\tm.orthonormalize();\n\treal_t det = m.determinant();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "17d19b555d8b532c36818fd0e5e18781c891ed4a803c4aabaf5c3a1b4a50ad2b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-cognitive-complexity",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'get_euler' has cognitive complexity of 58 (threshold 25)",
      "detailsInfo": "function-cognitive-complexity",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 455,
          "offset": 16,
          "length": 9,
          "code": {
            "startLine": 453,
            "length": 9,
            "offset": 18,
            "surroundingCode": "}\n\nVector3 Basis::get_euler(EulerOrder p_order) const {\n\tswitch (p_order) {\n\t\tcase EULER_ORDER_XYZ: {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-cognitive-complexity"
      },
      "hash": "5b07806b1ff3ff390534c7a1ee8689741940b45e0aaef71b24ff6bf47c2d1ac4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 466,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 464,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\n\t\t\tVector3 euler;\n\t\t\treal_t sy = rows[0][2];\n\t\t\tif (sy < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sy > -(1.0f - (real_t)CMP_EPSILON)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e4df1d9cdfb677ad19fbef077810e186ee91d3c271581dfcb1ee18774347e1cc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 467,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 465,
            "length": 4,
            "offset": 58,
            "surroundingCode": "\t\t\tVector3 euler;\n\t\t\treal_t sy = rows[0][2];\n\t\t\tif (sy < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sy > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\t// is this a pure Y rotation?"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "3e57bf054bbd7cf983059a7cd51b10126b249468f76ff63b767d8a39b896279d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 468,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 466,
            "length": 4,
            "offset": 86,
            "surroundingCode": "\t\t\treal_t sy = rows[0][2];\n\t\t\tif (sy < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sy > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\t// is this a pure Y rotation?\n\t\t\t\t\tif (rows[1][0] == 0 && rows[0][1] == 0 && rows[1][2] == 0 && rows[2][1] == 0 && rows[1][1] == 1) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a8b4d70b0167186a81ca165570ef9e8bcfd03a036e59dde86c66e6ad9dc8d590"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 473,
          "offset": 17,
          "length": 5,
          "code": {
            "startLine": 471,
            "length": 5,
            "offset": 110,
            "surroundingCode": "\t\t\t\t\t\t// return the simplest form (human friendlier in editor and scripts)\n\t\t\t\t\t\teuler.x = 0;\n\t\t\t\t\t\teuler.y = atan2(rows[0][2], rows[0][0]);\n\t\t\t\t\t\teuler.z = 0;\n\t\t\t\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "f3ed3f4c19632e247bc0eef17e1d3e6b6148a633073970b2146dd484c6c92eea"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 482,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 480,
            "length": 4,
            "offset": 91,
            "surroundingCode": "\t\t\t\t} else {\n\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);\n\t\t\t\t\teuler.y = -Math_PI / 2.0f;\n\t\t\t\t\teuler.z = 0.0f;\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f4385741af99dc26756136f895f6ec28875b12ebe1b39e1ae1b683fb47c13d76"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 482,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 480,
            "length": 4,
            "offset": 91,
            "surroundingCode": "\t\t\t\t} else {\n\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);\n\t\t\t\t\teuler.y = -Math_PI / 2.0f;\n\t\t\t\t\teuler.z = 0.0f;\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b96f32b6d54c9e753bfe4b0a38aa95729a0c4fb4d449e3db2d2b3ce61f0066b6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 483,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 481,
            "length": 4,
            "offset": 99,
            "surroundingCode": "\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);\n\t\t\t\t\teuler.y = -Math_PI / 2.0f;\n\t\t\t\t\teuler.z = 0.0f;\n\t\t\t\t}\n\t\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9bfda95592071757c10de0775c0fc9103d59b03741e440e38146a24f391b06dd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 487,
          "offset": 25,
          "length": 4,
          "code": {
            "startLine": 485,
            "length": 4,
            "offset": 87,
            "surroundingCode": "\t\t\t} else {\n\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);\n\t\t\t\teuler.y = Math_PI / 2.0f;\n\t\t\t\teuler.z = 0.0f;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "88dbecf4b8cddee3ec0214751647c92ccba054a5ac54368c42bae740caf19157"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 487,
          "offset": 25,
          "length": 4,
          "code": {
            "startLine": 485,
            "length": 4,
            "offset": 87,
            "surroundingCode": "\t\t\t} else {\n\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);\n\t\t\t\teuler.y = Math_PI / 2.0f;\n\t\t\t\teuler.z = 0.0f;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a6ff91fc154420fe36d996ad20c3c149d7cf67f4e661a6f40a4f79531786c759"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 501,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 499,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\n\t\t\tVector3 euler;\n\t\t\treal_t sz = rows[0][1];\n\t\t\tif (sz < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sz > -(1.0f - (real_t)CMP_EPSILON)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "bfea89e8c53df0d6d9d2546f67bbaa71c07ddf5061d0303f14d499b17e264dbb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 502,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 500,
            "length": 4,
            "offset": 58,
            "surroundingCode": "\t\t\tVector3 euler;\n\t\t\treal_t sz = rows[0][1];\n\t\t\tif (sz < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sz > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "cbf4d39d12d12c39213705b0aadee4c8665939d845beca72922f73f053d83267"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 503,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 501,
            "length": 4,
            "offset": 86,
            "surroundingCode": "\t\t\treal_t sz = rows[0][1];\n\t\t\tif (sz < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sz > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[1][1]);\n\t\t\t\t\teuler.y = Math::atan2(rows[0][2], rows[0][0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "1612e9c682d3f91cec28c0090f9d704b8e1c6bb5bc773e3b0e6b378d86afdfbc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 510,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 508,
            "length": 4,
            "offset": 84,
            "surroundingCode": "\t\t\t\t\t// It's -1\n\t\t\t\t\teuler.x = -Math::atan2(rows[1][2], rows[2][2]);\n\t\t\t\t\teuler.y = 0.0f;\n\t\t\t\t\teuler.z = Math_PI / 2.0f;\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "daa9aa3a1333efff849841221307c45e6e2b0c0bbfebaa02e88a1ce325f62b04"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 516,
          "offset": 15,
          "length": 4,
          "code": {
            "startLine": 514,
            "length": 4,
            "offset": 80,
            "surroundingCode": "\t\t\t\t// It's 1\n\t\t\t\teuler.x = -Math::atan2(rows[1][2], rows[2][2]);\n\t\t\t\teuler.y = 0.0f;\n\t\t\t\teuler.z = -Math_PI / 2.0f;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "0e60c1792b040baa3b276b1f0ea3af4ea1f8e1dcb56ab14e032ccec28d934621"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 517,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 515,
            "length": 4,
            "offset": 97,
            "surroundingCode": "\t\t\t\teuler.x = -Math::atan2(rows[1][2], rows[2][2]);\n\t\t\t\teuler.y = 0.0f;\n\t\t\t\teuler.z = -Math_PI / 2.0f;\n\t\t\t}\n\t\t\treturn euler;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "46e07db50fa88bcd73c4c167cbc7dcba34dd50f728a82246b44ee509f2b03b3f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 517,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 515,
            "length": 4,
            "offset": 97,
            "surroundingCode": "\t\t\t\teuler.x = -Math::atan2(rows[1][2], rows[2][2]);\n\t\t\t\teuler.y = 0.0f;\n\t\t\t\teuler.z = -Math_PI / 2.0f;\n\t\t\t}\n\t\t\treturn euler;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "26d9840cff5aef8e315ae69729f802ac7ac3c8eb87e4f404405a4772217ba813"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 538,
          "offset": 17,
          "length": 5,
          "code": {
            "startLine": 536,
            "length": 5,
            "offset": 195,
            "surroundingCode": "\t\t\t\t\tif (rows[1][0] == 0 && rows[0][1] == 0 && rows[0][2] == 0 && rows[2][0] == 0 && rows[0][0] == 1) {\n\t\t\t\t\t\t// return the simplest form (human friendlier in editor and scripts)\n\t\t\t\t\t\teuler.x = atan2(-m12, rows[1][1]);\n\t\t\t\t\t\teuler.y = 0;\n\t\t\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "22a7ce785c370e35c2d4038e636804c063bf8885de2543a565f7c8bc8102e0cd"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 542,
          "offset": 17,
          "length": 4,
          "code": {
            "startLine": 540,
            "length": 4,
            "offset": 49,
            "surroundingCode": "\t\t\t\t\t\teuler.z = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\teuler.x = asin(-m12);\n\t\t\t\t\t\teuler.y = atan2(rows[0][2], rows[2][2]);\n\t\t\t\t\t\teuler.z = atan2(rows[1][0], rows[1][1]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "48128b0ef862e52c4e816b83fbea4fe8fa2405a496b93f79d555171c8e8f5e0f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 543,
          "offset": 17,
          "length": 5,
          "code": {
            "startLine": 541,
            "length": 5,
            "offset": 58,
            "surroundingCode": "\t\t\t\t\t} else {\n\t\t\t\t\t\teuler.x = asin(-m12);\n\t\t\t\t\t\teuler.y = atan2(rows[0][2], rows[2][2]);\n\t\t\t\t\t\teuler.z = atan2(rows[1][0], rows[1][1]);\n\t\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2d04b5a93d91fab3b902bd58fc9f4741926af779b8aa556a385e905fdd6fa02c"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 544,
          "offset": 17,
          "length": 5,
          "code": {
            "startLine": 542,
            "length": 5,
            "offset": 91,
            "surroundingCode": "\t\t\t\t\t\teuler.x = asin(-m12);\n\t\t\t\t\t\teuler.y = atan2(rows[0][2], rows[2][2]);\n\t\t\t\t\t\teuler.z = atan2(rows[1][0], rows[1][1]);\n\t\t\t\t\t}\n\t\t\t\t} else { // m12 == -1"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2b88ee1d79b62b53c21d1a00c65864b67c6b563e64df832170a2e250086fd56b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 547,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 545,
            "length": 4,
            "offset": 58,
            "surroundingCode": "\t\t\t\t\t}\n\t\t\t\t} else { // m12 == -1\n\t\t\t\t\teuler.x = Math_PI * 0.5f;\n\t\t\t\t\teuler.y = atan2(rows[0][1], rows[0][0]);\n\t\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7ef8fad81936a4319f32bb030e333982bbe9b25be1d6760e6333f122878345a9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 547,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 545,
            "length": 4,
            "offset": 58,
            "surroundingCode": "\t\t\t\t\t}\n\t\t\t\t} else { // m12 == -1\n\t\t\t\t\teuler.x = Math_PI * 0.5f;\n\t\t\t\t\teuler.y = atan2(rows[0][1], rows[0][0]);\n\t\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "cf6ed176c57b3e9675c8dcfa1ea460ea244ca2d4ef2a8357909d2e50fc446983"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 548,
          "offset": 16,
          "length": 5,
          "code": {
            "startLine": 546,
            "length": 5,
            "offset": 72,
            "surroundingCode": "\t\t\t\t} else { // m12 == -1\n\t\t\t\t\teuler.x = Math_PI * 0.5f;\n\t\t\t\t\teuler.y = atan2(rows[0][1], rows[0][0]);\n\t\t\t\t\teuler.z = 0;\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "7d1b730d14087a00915944cc72b496a295d0b13d1b366e5746df1f0275908301"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 552,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 550,
            "length": 4,
            "offset": 55,
            "surroundingCode": "\t\t\t\t}\n\t\t\t} else { // m12 == 1\n\t\t\t\teuler.x = -Math_PI * 0.5f;\n\t\t\t\teuler.y = -atan2(rows[0][1], rows[0][0]);\n\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "11cb5a94800cd733a3042f5eefe21e93e5861906a5e2a4d70092553421cb8ae1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 552,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 550,
            "length": 4,
            "offset": 55,
            "surroundingCode": "\t\t\t\t}\n\t\t\t} else { // m12 == 1\n\t\t\t\teuler.x = -Math_PI * 0.5f;\n\t\t\t\teuler.y = -atan2(rows[0][1], rows[0][0]);\n\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "f7052bcd6bd89f1097b9a4c92bf9e29c0d2ee62d6d47bb2c339420dee68dd8ed"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 553,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 551,
            "length": 1,
            "offset": 69,
            "surroundingCode": "\t\t\t} else { // m12 == 1\n\t\t\t\teuler.x = -Math_PI * 0.5f;\n\t\t\t\teuler.y = -atan2(rows[0][1], rows[0][0]);\n\t\t\t\teuler.z = 0;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "4209197702f19b17957dbed3c62032cc9d7ec542d98dd75f7f5a14acaa80cd5a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 568,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 566,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\n\t\t\tVector3 euler;\n\t\t\treal_t sz = rows[1][0];\n\t\t\tif (sz < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sz > -(1.0f - (real_t)CMP_EPSILON)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cd29c977032a50b35a8f3bd99ba1b39168a145b881049580c317ef8257216b9a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 569,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 567,
            "length": 4,
            "offset": 58,
            "surroundingCode": "\t\t\tVector3 euler;\n\t\t\treal_t sz = rows[1][0];\n\t\t\tif (sz < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sz > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\teuler.x = Math::atan2(-rows[1][2], rows[1][1]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "3a484d3eb922aeb39cb857ea22cfd51450a52f7710bb31e3141114c20ecd993c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 570,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 568,
            "length": 4,
            "offset": 86,
            "surroundingCode": "\t\t\treal_t sz = rows[1][0];\n\t\t\tif (sz < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sz > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\teuler.x = Math::atan2(-rows[1][2], rows[1][1]);\n\t\t\t\t\teuler.y = Math::atan2(-rows[2][0], rows[0][0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "93d1f5a424e5a4f7a548ddbe48da937d76e58f5dc2ec369215f11e791a7fb813"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 577,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 575,
            "length": 4,
            "offset": 83,
            "surroundingCode": "\t\t\t\t\t// It's -1\n\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[2][2]);\n\t\t\t\t\teuler.y = 0.0f;\n\t\t\t\t\teuler.z = -Math_PI / 2.0f;\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "2cadc9eba0cfb69991a0529fa1ede0bd3d84aec3dad3fb1c26f6680ee95861ad"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 578,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 576,
            "length": 4,
            "offset": 99,
            "surroundingCode": "\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[2][2]);\n\t\t\t\t\teuler.y = 0.0f;\n\t\t\t\t\teuler.z = -Math_PI / 2.0f;\n\t\t\t\t}\n\t\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "18e2cfd39adaa47a5271809c5dd69e8650499907450dfb1f9275236cd8901df9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 578,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 576,
            "length": 4,
            "offset": 99,
            "surroundingCode": "\t\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[2][2]);\n\t\t\t\t\teuler.y = 0.0f;\n\t\t\t\t\teuler.z = -Math_PI / 2.0f;\n\t\t\t\t}\n\t\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "aee3f3b732088ac6d62df9ff2edea27b520ea5b58c16aaec751364edc2839ff2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 583,
          "offset": 15,
          "length": 4,
          "code": {
            "startLine": 581,
            "length": 4,
            "offset": 79,
            "surroundingCode": "\t\t\t\t// It's 1\n\t\t\t\teuler.x = Math::atan2(rows[2][1], rows[2][2]);\n\t\t\t\teuler.y = 0.0f;\n\t\t\t\teuler.z = Math_PI / 2.0f;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "ed4ef8d4f38c2d2ae82971dd2337aa4eac8419e6e0f58c36a1495378fc301b54"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 596,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 594,
            "length": 2,
            "offset": 87,
            "surroundingCode": "\t\t\t//        -cx*sy            sx                    cx*cy\n\t\t\tVector3 euler;\n\t\t\treal_t sx = rows[2][1];\n\t\t\tif (sx < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sx > -(1.0f - (real_t)CMP_EPSILON)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "315a7a18a7d3c86c20412bfe7f112b6bcf8b699ffe6fac39169122f69da25f91"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 597,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 595,
            "length": 4,
            "offset": 58,
            "surroundingCode": "\t\t\tVector3 euler;\n\t\t\treal_t sx = rows[2][1];\n\t\t\tif (sx < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sx > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\teuler.x = Math::asin(sx);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a3620d1e27fd313c462ebcd00d636a74e6521a80a0f09c3acca92d66760bc1b7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 598,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 596,
            "length": 4,
            "offset": 86,
            "surroundingCode": "\t\t\treal_t sx = rows[2][1];\n\t\t\tif (sx < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sx > -(1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\t\teuler.x = Math::asin(sx);\n\t\t\t\t\teuler.y = Math::atan2(-rows[2][0], rows[2][2]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "85f17786f7d99f3724837b6de184441952566be290fe3f9bf989ad941e8db468"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 604,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 602,
            "length": 4,
            "offset": 55,
            "surroundingCode": "\t\t\t\t} else {\n\t\t\t\t\t// It's -1\n\t\t\t\t\teuler.x = -Math_PI / 2.0f;\n\t\t\t\t\teuler.y = Math::atan2(rows[0][2], rows[0][0]);\n\t\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4627ce4071d4dd9ed38b3fc5547908c6ceefa0a374fab1fbfe698ff889b3da6e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 604,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 602,
            "length": 4,
            "offset": 55,
            "surroundingCode": "\t\t\t\t} else {\n\t\t\t\t\t// It's -1\n\t\t\t\t\teuler.x = -Math_PI / 2.0f;\n\t\t\t\t\teuler.y = Math::atan2(rows[0][2], rows[0][0]);\n\t\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "49e9dd9bfc805dcbea712a641c26609b91dd43142be77bc58e01206768bf8a58"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 610,
          "offset": 25,
          "length": 4,
          "code": {
            "startLine": 608,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\t\t\t} else {\n\t\t\t\t// It's 1\n\t\t\t\teuler.x = Math_PI / 2.0f;\n\t\t\t\teuler.y = Math::atan2(rows[0][2], rows[0][0]);\n\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "97a9a309318e18889cac14fc13bae837fed5b8b1edd6ee2526a2cca8bf9e7fde"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 610,
          "offset": 25,
          "length": 4,
          "code": {
            "startLine": 608,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\t\t\t} else {\n\t\t\t\t// It's 1\n\t\t\t\teuler.x = Math_PI / 2.0f;\n\t\t\t\teuler.y = Math::atan2(rows[0][2], rows[0][0]);\n\t\t\t\teuler.z = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9437d11dd1116c93c78473d6b22522fbdbef59f2b505e840cae81e2d758539e1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 624,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 622,
            "length": 2,
            "offset": 87,
            "surroundingCode": "\t\t\t//        -sy               cy*sx                 cy*cx\n\t\t\tVector3 euler;\n\t\t\treal_t sy = rows[2][0];\n\t\t\tif (sy < (1.0f - (real_t)CMP_EPSILON)) {\n\t\t\t\tif (sy > -(1.0f - (real_t)CMP_EPSILON)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ac77c1478baa637d73c7f8a4c8e8bc1f078359f09b6395550a567aa927026dc2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 633,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 631,
            "length": 4,
            "offset": 59,
            "surroundingCode": "\t\t\t\t\t// It's -1\n\t\t\t\t\teuler.x = 0;\n\t\t\t\t\teuler.y = Math_PI / 2.0f;\n\t\t\t\t\teuler.z = -Math::atan2(rows[0][1], rows[1][1]);\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3eba2e821303a6742a567a2dc47fe0f4e94f96c23d5ef2d19e5db6844d824d66"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 633,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 631,
            "length": 4,
            "offset": 59,
            "surroundingCode": "\t\t\t\t\t// It's -1\n\t\t\t\t\teuler.x = 0;\n\t\t\t\t\teuler.y = Math_PI / 2.0f;\n\t\t\t\t\teuler.z = -Math::atan2(rows[0][1], rows[1][1]);\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c9efc272b30d9bd5d41c75903b02d44026feacbf40c7e361569968868b0d1344"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 639,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 637,
            "length": 4,
            "offset": 56,
            "surroundingCode": "\t\t\t\t// It's 1\n\t\t\t\teuler.x = 0;\n\t\t\t\teuler.y = -Math_PI / 2.0f;\n\t\t\t\teuler.z = -Math::atan2(rows[0][1], rows[1][1]);\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "bc8437a4f07857b75765758b800dd4c7bed87f661960f4ef6613115867c1b09c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 652,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 650,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\nvoid Basis::set_euler(const Vector3 &p_euler, EulerOrder p_order) {\n\treal_t c, s;\n\n\tc = Math::cos(p_euler.x);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "1c12cf7acd857080480176e19fd5597161b7a28ce356b4a9abab58a808b44f5f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'c' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 652,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 650,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\nvoid Basis::set_euler(const Vector3 &p_euler, EulerOrder p_order) {\n\treal_t c, s;\n\n\tc = Math::cos(p_euler.x);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "ac484465040af6da25023b4d7f305f6956da41c9c96cc335f0285869399d8db0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 652,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 650,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\nvoid Basis::set_euler(const Vector3 &p_euler, EulerOrder p_order) {\n\treal_t c, s;\n\n\tc = Math::cos(p_euler.x);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8a3f9a651c6fceaeb2baff5490086a2c40b6df2cd77523892101cb86d6bc6186"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 's' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 652,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 650,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\nvoid Basis::set_euler(const Vector3 &p_euler, EulerOrder p_order) {\n\treal_t c, s;\n\n\tc = Math::cos(p_euler.x);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "85bace0ab513a68da07868761d3ce3f5f8e89978e46a378594cf60b196b186cd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 652,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 650,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\nvoid Basis::set_euler(const Vector3 &p_euler, EulerOrder p_order) {\n\treal_t c, s;\n\n\tc = Math::cos(p_euler.x);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3980e1c89c9a0f51f46a7d67f85bc863ce5e5486ae74affeebb0b928ccac5c54"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 702,
          "offset": 8,
          "length": 4,
          "code": {
            "startLine": 700,
            "length": 4,
            "offset": 70,
            "surroundingCode": "\tfor (int i = 0; i < 3; i++) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tif (rows[i][j] != p_matrix.rows[i][j]) {\n\t\t\t\treturn false;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a73fb2e063a90f7efd40e922d0fdcf41455b8f7d04fb6214e94c51e8a9e2b544"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 702,
          "offset": 22,
          "length": 8,
          "code": {
            "startLine": 700,
            "length": 8,
            "offset": 84,
            "surroundingCode": "\tfor (int i = 0; i < 3; i++) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tif (rows[i][j] != p_matrix.rows[i][j]) {\n\t\t\t\treturn false;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "53c2d333b0d2192b02993120b569618705d88447ea18cf2f61015e12e4c76def"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 726,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 724,
            "length": 1,
            "offset": 79,
            "surroundingCode": "#endif\n\t/* Allow getting a quaternion from an unnormalized transform */\n\tBasis m = *this;\n\treal_t trace = m.rows[0][0] + m.rows[1][1] + m.rows[2][2];\n\treal_t temp[4];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4ef03c3911a700d6a58b0ef4b892fd9c6b2fcd8bf7bac4cd3e3da291f73f6f12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 728,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 726,
            "length": 6,
            "offset": 79,
            "surroundingCode": "\tBasis m = *this;\n\treal_t trace = m.rows[0][0] + m.rows[1][1] + m.rows[2][2];\n\treal_t temp[4];\n\n\tif (trace > 0.0f) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "2a676ebdfc8662d1e288ab7062a459c313a7e91304ec432611c890cef1375352"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 730,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 728,
            "length": 4,
            "offset": 31,
            "surroundingCode": "\treal_t temp[4];\n\n\tif (trace > 0.0f) {\n\t\treal_t s = Math::sqrt(trace + 1.0f);\n\t\ttemp[3] = (s * 0.5f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c89a506dda74750b10e347292c54c9816f73e82b275a1db2d9b3d39e1bdad054"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 731,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 729,
            "length": 1,
            "offset": 31,
            "surroundingCode": "\n\tif (trace > 0.0f) {\n\t\treal_t s = Math::sqrt(trace + 1.0f);\n\t\ttemp[3] = (s * 0.5f);\n\t\ts = 0.5f / s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b3b65d85a599b3edc328d48b2dd028001ef53cdddf69a70764b7a934f11db9d9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 732,
          "offset": 18,
          "length": 4,
          "code": {
            "startLine": 730,
            "length": 4,
            "offset": 77,
            "surroundingCode": "\tif (trace > 0.0f) {\n\t\treal_t s = Math::sqrt(trace + 1.0f);\n\t\ttemp[3] = (s * 0.5f);\n\t\ts = 0.5f / s;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6cb8c78bf1f5d312990a7c51ed386a5ff46346954e8f9e4b60f9f4d968cb9a66"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 732,
          "offset": 18,
          "length": 4,
          "code": {
            "startLine": 730,
            "length": 4,
            "offset": 77,
            "surroundingCode": "\tif (trace > 0.0f) {\n\t\treal_t s = Math::sqrt(trace + 1.0f);\n\t\ttemp[3] = (s * 0.5f);\n\t\ts = 0.5f / s;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "6aa31b5cccfa61a5180443543e637eab9da230828a19c1b1562a9fb5c2a63d29"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 733,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 731,
            "length": 4,
            "offset": 69,
            "surroundingCode": "\t\treal_t s = Math::sqrt(trace + 1.0f);\n\t\ttemp[3] = (s * 0.5f);\n\t\ts = 0.5f / s;\n\n\t\ttemp[0] = ((m.rows[2][1] - m.rows[1][2]) * s);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "357e0aaf499ee3eee699e64c5f736271afe85c344c6c772e0ef4beab7e813c33"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 733,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 731,
            "length": 4,
            "offset": 69,
            "surroundingCode": "\t\treal_t s = Math::sqrt(trace + 1.0f);\n\t\ttemp[3] = (s * 0.5f);\n\t\ts = 0.5f / s;\n\n\t\ttemp[0] = ((m.rows[2][1] - m.rows[1][2]) * s);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "1bd65c1174ad72827b8f76137f5cd2722bd8b7c95924710597dd1d4b5d60609e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'i' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 739,
          "offset": 7,
          "length": 1,
          "code": {
            "startLine": 737,
            "length": 1,
            "offset": 65,
            "surroundingCode": "\t\ttemp[2] = ((m.rows[1][0] - m.rows[0][1]) * s);\n\t} else {\n\t\tint i = m.rows[0][0] < m.rows[1][1]\n\t\t\t\t? (m.rows[1][1] < m.rows[2][2] ? 2 : 1)\n\t\t\t\t: (m.rows[0][0] < m.rows[2][2] ? 2 : 0);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "dcc00c5f4d82e070997df390ad9e095e6e809898b0c58a9bb218e4227d7a1427"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "avoid-nested-conditional-operator",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators",
      "detailsInfo": "avoid-nested-conditional-operator",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 740,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 738,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\t} else {\n\t\tint i = m.rows[0][0] < m.rows[1][1]\n\t\t\t\t? (m.rows[1][1] < m.rows[2][2] ? 2 : 1)\n\t\t\t\t: (m.rows[0][0] < m.rows[2][2] ? 2 : 0);\n\t\tint j = (i + 1) % 3;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-avoid-nested-conditional-operator"
      },
      "hash": "712033b014c6b507bd73f4c0a0f52a5e7cedcff9e83c6d49117e153c700d01ef"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'j' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 742,
          "offset": 7,
          "length": 1,
          "code": {
            "startLine": 740,
            "length": 1,
            "offset": 95,
            "surroundingCode": "\t\t\t\t? (m.rows[1][1] < m.rows[2][2] ? 2 : 1)\n\t\t\t\t: (m.rows[0][0] < m.rows[2][2] ? 2 : 0);\n\t\tint j = (i + 1) % 3;\n\t\tint k = (i + 2) % 3;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f7d80dad78a310905721057860ce91f8c46caa4ff72b019db1c3165dfdb61920"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'k' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 743,
          "offset": 7,
          "length": 1,
          "code": {
            "startLine": 741,
            "length": 1,
            "offset": 74,
            "surroundingCode": "\t\t\t\t: (m.rows[0][0] < m.rows[2][2] ? 2 : 0);\n\t\tint j = (i + 1) % 3;\n\t\tint k = (i + 2) % 3;\n\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "74d6650b6379e6a4cc90e814945baddb7042393be92417826a605bccdbe2c4bf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 745,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 743,
            "length": 1,
            "offset": 33,
            "surroundingCode": "\t\tint k = (i + 2) % 3;\n\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ad5e921b7a44fe646f05c6b35ebd57aa2331711b58bfdc7f9f34e4c1f8e041cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 745,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 743,
            "length": 1,
            "offset": 48,
            "surroundingCode": "\t\tint k = (i + 2) % 3;\n\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "7581ee03968d1b93d9cd5f019104118d8777835844fe915d74ce7c15bebcb61c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 745,
          "offset": 40,
          "length": 1,
          "code": {
            "startLine": 743,
            "length": 1,
            "offset": 63,
            "surroundingCode": "\t\tint k = (i + 2) % 3;\n\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "5cbb9a0be34622489eb531427c60e9cba69e372c55128327f336b4a86012e816"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 745,
          "offset": 55,
          "length": 1,
          "code": {
            "startLine": 743,
            "length": 1,
            "offset": 78,
            "surroundingCode": "\t\tint k = (i + 2) % 3;\n\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "bcb4d577eb5b54e450506c3dac72d609122fe57d183ba35dbbeb65b55c035a2c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 746,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 744,
            "length": 4,
            "offset": 79,
            "surroundingCode": "\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "c9ae248010e15fdea0c46a750d73d486c5d8be59415efba082b23baf3b9b53d1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 746,
          "offset": 17,
          "length": 4,
          "code": {
            "startLine": 744,
            "length": 4,
            "offset": 93,
            "surroundingCode": "\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7379c5142d345dbca3f2e6429085d9fee4126fa71f0cac30c930bbe5b580824e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 746,
          "offset": 17,
          "length": 4,
          "code": {
            "startLine": 744,
            "length": 4,
            "offset": 93,
            "surroundingCode": "\n\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "3329f46a9f00cb0eeec346dffd148c4e8ae6f1ddba43f316180b2893fb3807a5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 747,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 745,
            "length": 4,
            "offset": 104,
            "surroundingCode": "\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;\n\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5a51d9e2ab0bf39d4fe11e4141d806269d54606f0925a40925f1bfa60627ee75"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 747,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 745,
            "length": 4,
            "offset": 104,
            "surroundingCode": "\t\treal_t s = Math::sqrt(m.rows[i][i] - m.rows[j][j] - m.rows[k][k] + 1.0f);\n\t\ttemp[i] = s * 0.5f;\n\t\ts = 0.5f / s;\n\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "bd6de3700b1a01b554d026fe8dd6996620c24d6e5ecdefc3bc954985346af62f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 749,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 747,
            "length": 1,
            "offset": 30,
            "surroundingCode": "\t\ts = 0.5f / s;\n\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "8d957aaa58d76cb1004d2f48657717af9cc13a8ae1e4afb6f3568368c778a584"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 749,
          "offset": 29,
          "length": 1,
          "code": {
            "startLine": 747,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\t\ts = 0.5f / s;\n\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a2ef8cfed63c1350bd4a3ae1f9a6abd63bd285353e48e5f2d0204ecbc4aec472"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 750,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 748,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "fe0c1c59e95b497060696f4afd8b88bae8ef9b05ead7618c2031042b61e9066b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 750,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 748,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "910b3509eabbb1ebafb22d61e674b8b5546205d216445ed59c12b7b51489778c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 750,
          "offset": 29,
          "length": 1,
          "code": {
            "startLine": 748,
            "length": 1,
            "offset": 76,
            "surroundingCode": "\n\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "fe9270cc0af6eaff80a1f01d2367af942b91d99fb84ac75a812b55c40928a1f0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 751,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 749,
            "length": 4,
            "offset": 96,
            "surroundingCode": "\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "6fed02b9a59b53b925c4958957236e2960d335e62a6d7777cddbbf1b435eb19c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 751,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 749,
            "length": 1,
            "offset": 107,
            "surroundingCode": "\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "c4ba7c409fb0206585811b6a87b2c1bae76dec1b7eda45805e757326e963fecf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 751,
          "offset": 29,
          "length": 1,
          "code": {
            "startLine": 749,
            "length": 1,
            "offset": 122,
            "surroundingCode": "\t\ttemp[3] = (m.rows[k][j] - m.rows[j][k]) * s;\n\t\ttemp[j] = (m.rows[j][i] + m.rows[i][j]) * s;\n\t\ttemp[k] = (m.rows[k][i] + m.rows[i][k]) * s;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "e6aaaa5c465ee3a0b93c07531e82a58c75380fff77e31dc3e7e3fb9c294bc2ce"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 763,
            "length": 6,
            "offset": 98,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "b0950ba17ec00b4906344b499d6c42939e72637645ea4337c020bf50e4a9ccee"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'x' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 763,
            "length": 1,
            "offset": 105,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "4af081dad23cf28b0238e2006b1712395de31cc36c53b48cec053e5e1397da47"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'x' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 763,
            "length": 1,
            "offset": 105,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "7f7cd41faa054896f64f53f06845d0e9833602cd4eae0ba1de582353ab84dfe5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'y' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 763,
            "length": 1,
            "offset": 108,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "6b27f64b5339321339c0bf37a1e094ca4b163ced85d96b26c786cf75b95feea9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'y' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 763,
            "length": 1,
            "offset": 108,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cc53ba9698a95cdd01c579886a894abfdcbeace3a25b3c9e101a4bb913ddd1b1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'z' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 763,
            "length": 1,
            "offset": 111,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "973064681d54cebde5ddc61b0b57ae4f343682a503524c64a0ceab7127ef0c4e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'z' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 765,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 763,
            "length": 1,
            "offset": 111,
            "surroundingCode": "\n\t// https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\treal_t x, y, z; // Variables for result.\n\tif (Math::is_zero_approx(rows[0][1] - rows[1][0]) && Math::is_zero_approx(rows[0][2] - rows[2][0]) && Math::is_zero_approx(rows[1][2] - rows[2][1])) {\n\t\t// Singularity found."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a10b82bcb9f79a77b6e9fef62ca8e005727dd0179cc7131020d266fd8b496322"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 776,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 774,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\t\t}\n\t\t// Otherwise this singularity is angle = 180.\n\t\treal_t xx = (rows[0][0] + 1) / 2;\n\t\treal_t yy = (rows[1][1] + 1) / 2;\n\t\treal_t zz = (rows[2][2] + 1) / 2;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2f2e6b18c36494b2ef9f3dfe8b6229e70378bee3fac58130f4b0807be22e4aa0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'yy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 777,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 775,
            "length": 2,
            "offset": 93,
            "surroundingCode": "\t\t// Otherwise this singularity is angle = 180.\n\t\treal_t xx = (rows[0][0] + 1) / 2;\n\t\treal_t yy = (rows[1][1] + 1) / 2;\n\t\treal_t zz = (rows[2][2] + 1) / 2;\n\t\treal_t xy = (rows[0][1] + rows[1][0]) / 4;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cfc07e6037fb9ad2ff426f9f97fa2604fb4433c44e533abc3ee4196a7bd4284c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'zz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 778,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 776,
            "length": 2,
            "offset": 81,
            "surroundingCode": "\t\treal_t xx = (rows[0][0] + 1) / 2;\n\t\treal_t yy = (rows[1][1] + 1) / 2;\n\t\treal_t zz = (rows[2][2] + 1) / 2;\n\t\treal_t xy = (rows[0][1] + rows[1][0]) / 4;\n\t\treal_t xz = (rows[0][2] + rows[2][0]) / 4;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8957e7e266c5cfc8df4e117e5fb051cc633d144ae48edfa570c8485dd97a68f7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 779,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 777,
            "length": 2,
            "offset": 81,
            "surroundingCode": "\t\treal_t yy = (rows[1][1] + 1) / 2;\n\t\treal_t zz = (rows[2][2] + 1) / 2;\n\t\treal_t xy = (rows[0][1] + rows[1][0]) / 4;\n\t\treal_t xz = (rows[0][2] + rows[2][0]) / 4;\n\t\treal_t yz = (rows[1][2] + rows[2][1]) / 4;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "044484dde678fef5b8678d569b9879424a2a6ce7766ec1061b094f2fd2f71ddc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 780,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 778,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\treal_t zz = (rows[2][2] + 1) / 2;\n\t\treal_t xy = (rows[0][1] + rows[1][0]) / 4;\n\t\treal_t xz = (rows[0][2] + rows[2][0]) / 4;\n\t\treal_t yz = (rows[1][2] + rows[2][1]) / 4;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "73bbd59a38b3bb3258fd1cf18588dd02cb511c942243b4788b227174e932d1e5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'yz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 781,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 779,
            "length": 2,
            "offset": 99,
            "surroundingCode": "\t\treal_t xy = (rows[0][1] + rows[1][0]) / 4;\n\t\treal_t xz = (rows[0][2] + rows[2][0]) / 4;\n\t\treal_t yz = (rows[1][2] + rows[2][1]) / 4;\n\n\t\tif ((xx > yy) && (xx > zz)) { // rows[0][0] is the largest diagonal term."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "09ff8f41c5ed6941675bb2aa6d86ba4b3e309cc4cc23f391f72d9517ba3f864b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 819,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 817,
            "length": 1,
            "offset": 93,
            "surroundingCode": "\t}\n\t// As we have reached here there are no singularities so we can handle normally.\n\tdouble s = Math::sqrt((rows[2][1] - rows[1][2]) * (rows[2][1] - rows[1][2]) + (rows[0][2] - rows[2][0]) * (rows[0][2] - rows[2][0]) + (rows[1][0] - rows[0][1]) * (rows[1][0] - rows[0][1])); // Used to normalize.\n\n\tif (Math::abs(s) < CMP_EPSILON) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "58963273728cf16c93d412e53b9ee9daa2abe2e6208a2fa4564c73cd0437a596"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 819,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 817,
            "length": 1,
            "offset": 108,
            "surroundingCode": "\t}\n\t// As we have reached here there are no singularities so we can handle normally.\n\tdouble s = Math::sqrt((rows[2][1] - rows[1][2]) * (rows[2][1] - rows[1][2]) + (rows[0][2] - rows[2][0]) * (rows[0][2] - rows[2][0]) + (rows[1][0] - rows[0][1]) * (rows[1][0] - rows[0][1])); // Used to normalize.\n\n\tif (Math::abs(s) < CMP_EPSILON) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "30f366631d788c5aea7427b883eb6c1e24373e8e37529c2f0eec51294c9bd1f0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 819,
          "offset": 80,
          "length": 1,
          "code": {
            "startLine": 817,
            "length": 1,
            "offset": 164,
            "surroundingCode": "\t}\n\t// As we have reached here there are no singularities so we can handle normally.\n\tdouble s = Math::sqrt((rows[2][1] - rows[1][2]) * (rows[2][1] - rows[1][2]) + (rows[0][2] - rows[2][0]) * (rows[0][2] - rows[2][0]) + (rows[1][0] - rows[0][1]) * (rows[1][0] - rows[0][1])); // Used to normalize.\n\n\tif (Math::abs(s) < CMP_EPSILON) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "5b236e354d070c364bfb42b79dab875a48f4c1f4bcae72590066d692e5933e0a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 819,
          "offset": 136,
          "length": 1,
          "code": {
            "startLine": 817,
            "length": 1,
            "offset": 220,
            "surroundingCode": "\t}\n\t// As we have reached here there are no singularities so we can handle normally.\n\tdouble s = Math::sqrt((rows[2][1] - rows[1][2]) * (rows[2][1] - rows[1][2]) + (rows[0][2] - rows[2][0]) * (rows[0][2] - rows[2][0]) + (rows[1][0] - rows[0][1]) * (rows[1][0] - rows[0][1])); // Used to normalize.\n\n\tif (Math::abs(s) < CMP_EPSILON) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "df5882459ee9940bc3be4f54b8b619c61c8a41b474421f0518c7ef7f78ca4ed3"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 826,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 824,
            "length": 1,
            "offset": 9,
            "surroundingCode": "\t}\n\n\tx = (rows[2][1] - rows[1][2]) / s;\n\ty = (rows[0][2] - rows[2][0]) / s;\n\tz = (rows[1][0] - rows[0][1]) / s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "95cc00bf994bc4e107564cf37ec00bf7f3f2c92bcba6e61b2a76a95614107f8d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 827,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 825,
            "length": 1,
            "offset": 42,
            "surroundingCode": "\n\tx = (rows[2][1] - rows[1][2]) / s;\n\ty = (rows[0][2] - rows[2][0]) / s;\n\tz = (rows[1][0] - rows[0][1]) / s;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "7a126253ad97675bf59185dc61ac70754eb227c905edf22394480a297cdcdadb"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 828,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 826,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\tx = (rows[2][1] - rows[1][2]) / s;\n\ty = (rows[0][2] - rows[2][0]) / s;\n\tz = (rows[1][0] - rows[0][1]) / s;\n\n\tr_axis = Vector3(x, y, z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "4f795986cadc81c287cad99e189759e183cfe111a76a0147f55c3db8f2d8f4d3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 836,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 834,
            "length": 1,
            "offset": 70,
            "surroundingCode": "\nvoid Basis::set_quaternion(const Quaternion &p_quaternion) {\n\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ee61912e6f1bb1737bea3d3465ffbf1519af6c307ff8b0a636d759a30e518870"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 837,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 835,
            "length": 1,
            "offset": 112,
            "surroundingCode": "void Basis::set_quaternion(const Quaternion &p_quaternion) {\n\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "54f138d750c611652e9e6cd7bd70fcfa86d5bb7ceabe2ce4f694710f1ad2fbe6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 837,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 835,
            "length": 4,
            "offset": 116,
            "surroundingCode": "void Basis::set_quaternion(const Quaternion &p_quaternion) {\n\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "59d8e226c88b08c8ef83095f947299c0117e3200d4a33a5567fbcbce5453bc48"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 837,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 835,
            "length": 4,
            "offset": 116,
            "surroundingCode": "void Basis::set_quaternion(const Quaternion &p_quaternion) {\n\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "42e0a7d2456ab70cceb06cb8fb01bb98ca9be75c64be7b1cde4ed5fdaed43ea5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 838,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 836,
            "length": 6,
            "offset": 66,
            "surroundingCode": "\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "c9e63c7e32199a8b7edcec8cca0f4ddf05f911b6f5b9ede027a6fd6064040000"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xs' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 838,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 836,
            "length": 2,
            "offset": 73,
            "surroundingCode": "\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b380e90a2c876848a934932877cb2e63da468b9ef27b49bdfac57e2f6e2c7658"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'ys' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 838,
          "offset": 34,
          "length": 2,
          "code": {
            "startLine": 836,
            "length": 2,
            "offset": 98,
            "surroundingCode": "\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "093f07391335abf92db9c4b7807f3f972f9efb497e64d0a54379dfb47cd55c78"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'zs' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 838,
          "offset": 59,
          "length": 2,
          "code": {
            "startLine": 836,
            "length": 2,
            "offset": 123,
            "surroundingCode": "\treal_t d = p_quaternion.length_squared();\n\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b473b28ede827d5d7adb8c7e43e6faa47d57aab7fb4e2c7c28f7ac2a86dbb127"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 839,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 837,
            "length": 6,
            "offset": 106,
            "surroundingCode": "\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "2b2cd78b085b26942568aea1c3fbb5d62f0226f3d2d43fbbb6e8464148d10547"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'wx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 839,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 837,
            "length": 2,
            "offset": 113,
            "surroundingCode": "\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ec0cdafcff8f00d1ad6d547b8179bce41d393e6de1d1c2d0c865d2d774f7317d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'wy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 839,
          "offset": 35,
          "length": 2,
          "code": {
            "startLine": 837,
            "length": 2,
            "offset": 139,
            "surroundingCode": "\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "13a2728f71db1029ab6f4ef8ec51c5857893ba3bc23d6fee592c4aa9fe260056"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'wz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 839,
          "offset": 61,
          "length": 2,
          "code": {
            "startLine": 837,
            "length": 2,
            "offset": 165,
            "surroundingCode": "\treal_t s = 2.0f / d;\n\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "91319da85d3522c1af754e25be84bf73802998bdcf9578ecc32dd7ecc0c50e93"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 840,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 838,
            "length": 6,
            "offset": 170,
            "surroundingCode": "\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "5c43f2c1ff29ee438b9736e825a5cfffbf26228e9a8948ece7f8e00e91f7a05c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 840,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 838,
            "length": 2,
            "offset": 177,
            "surroundingCode": "\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "364ca49a471afae40c7019042e083fc7b95aa26767c1b656b91fe553ebcee1b0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 840,
          "offset": 35,
          "length": 2,
          "code": {
            "startLine": 838,
            "length": 2,
            "offset": 203,
            "surroundingCode": "\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "95df3b7975e1817d5bf18f5439021c601338166f4c18daaa60963fc31bfc8d3d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 840,
          "offset": 61,
          "length": 2,
          "code": {
            "startLine": 838,
            "length": 2,
            "offset": 229,
            "surroundingCode": "\treal_t xs = p_quaternion.x * s, ys = p_quaternion.y * s, zs = p_quaternion.z * s;\n\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "dd549724d0996fabe58010d42e8dd698bbc33695b180cc5b26a589021748e937"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 841,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 839,
            "length": 6,
            "offset": 173,
            "surroundingCode": "\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,\n\t\t\txy + wz, 1.0f - (xx + zz), yz - wx,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "56662a44e8fd459243e162cbfc1ffe65a413286a4be2518cfc10b5988eefa136"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'yy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 841,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 839,
            "length": 2,
            "offset": 180,
            "surroundingCode": "\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,\n\t\t\txy + wz, 1.0f - (xx + zz), yz - wx,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3587fc38b1de7bf32b60200750f8e8f35241818a41edb2192cdc839579714c49"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'yz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 841,
          "offset": 35,
          "length": 2,
          "code": {
            "startLine": 839,
            "length": 2,
            "offset": 206,
            "surroundingCode": "\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,\n\t\t\txy + wz, 1.0f - (xx + zz), yz - wx,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e243f91c06935f4f5717179697c532f4c778bd3c18a6c879135b3cc7298d369a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'zz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 841,
          "offset": 61,
          "length": 2,
          "code": {
            "startLine": 839,
            "length": 2,
            "offset": 232,
            "surroundingCode": "\treal_t wx = p_quaternion.w * xs, wy = p_quaternion.w * ys, wz = p_quaternion.w * zs;\n\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,\n\t\t\txy + wz, 1.0f - (xx + zz), yz - wx,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "62231caff6da24733cbef2e6c20f4c601dd082e45fba94e5033cc558b001911a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 842,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 840,
            "length": 4,
            "offset": 177,
            "surroundingCode": "\treal_t xx = p_quaternion.x * xs, xy = p_quaternion.x * ys, xz = p_quaternion.x * zs;\n\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,\n\t\t\txy + wz, 1.0f - (xx + zz), yz - wx,\n\t\t\txz - wy, yz + wx, 1.0f - (xx + yy));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "3be71b9e1d292058440892b4499d4d11fea327bcb067fba6f10c414c07673678"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 843,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 841,
            "length": 4,
            "offset": 139,
            "surroundingCode": "\treal_t yy = p_quaternion.y * ys, yz = p_quaternion.y * zs, zz = p_quaternion.z * zs;\n\tset(1.0f - (yy + zz), xy - wz, xz + wy,\n\t\t\txy + wz, 1.0f - (xx + zz), yz - wx,\n\t\t\txz - wy, yz + wx, 1.0f - (xx + yy));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "cc79c65513ed140e8b66930f74562452fe86fc0f64f2812f3f2ab48ea3b1d7a8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 854,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 852,
            "length": 4,
            "offset": 154,
            "surroundingCode": "\tVector3 axis_sq(p_axis.x * p_axis.x, p_axis.y * p_axis.y, p_axis.z * p_axis.z);\n\treal_t cosine = Math::cos(p_angle);\n\trows[0][0] = axis_sq.x + cosine * (1.0f - axis_sq.x);\n\trows[1][1] = axis_sq.y + cosine * (1.0f - axis_sq.y);\n\trows[2][2] = axis_sq.z + cosine * (1.0f - axis_sq.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "0aa105d90030ba190da05cee963403f2e119590ec8989c37cc87e23e314c1844"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 855,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 853,
            "length": 4,
            "offset": 128,
            "surroundingCode": "\treal_t cosine = Math::cos(p_angle);\n\trows[0][0] = axis_sq.x + cosine * (1.0f - axis_sq.x);\n\trows[1][1] = axis_sq.y + cosine * (1.0f - axis_sq.y);\n\trows[2][2] = axis_sq.z + cosine * (1.0f - axis_sq.z);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "d322358857453a4205da3da8f1d64e2a139e0a201242c5f3d82b0339e4244635"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 856,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 854,
            "length": 4,
            "offset": 146,
            "surroundingCode": "\trows[0][0] = axis_sq.x + cosine * (1.0f - axis_sq.x);\n\trows[1][1] = axis_sq.y + cosine * (1.0f - axis_sq.y);\n\trows[2][2] = axis_sq.z + cosine * (1.0f - axis_sq.z);\n\n\treal_t sine = Math::sin(p_angle);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "962b37efc85268f70452ac6084498ab3b5b31af517c69b812b9042d23bd315af"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 't' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 859,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 857,
            "length": 1,
            "offset": 44,
            "surroundingCode": "\n\treal_t sine = Math::sin(p_angle);\n\treal_t t = 1 - cosine;\n\n\treal_t xyzt = p_axis.x * p_axis.y * t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6a4970a4feb64f0fb18761b12ea5bb09cc8d4873c1d509f1154456f6133c776f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_euler_scale' of similar type ('const Vector3 &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 882,
          "offset": 29,
          "length": 5,
          "code": {
            "startLine": 880,
            "length": 5,
            "offset": 31,
            "surroundingCode": "}\n\nvoid Basis::set_euler_scale(const Vector3 &p_euler, const Vector3 &p_scale, EulerOrder p_order) {\n\t_set_diagonal(p_scale);\n\trotate(p_euler, p_order);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "153aa92f6741fbbcb44fd3a3265a29c1455bb0dfe60c98119c0ce9deb13c5cfe"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 909,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 907,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\nBasis Basis::lerp(const Basis &p_to, const real_t &p_weight) const {\n\tBasis b;\n\tb.rows[0] = rows[0].lerp(p_to.rows[0], p_weight);\n\tb.rows[1] = rows[1].lerp(p_to.rows[1], p_weight);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c16f2f8a44cf2ea5132f4fce606f3318eeb4ef106cddd5ac2890ea84133977ee"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'to' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 920,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 918,
            "length": 2,
            "offset": 55,
            "surroundingCode": "\t//consider scale\n\tQuaternion from(*this);\n\tQuaternion to(p_to);\n\n\tBasis b(from.slerp(to, p_weight));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5d4f44ec0591b943655f90062f2f3abb25d593afd04a026c99c65b571ad3a6d0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 922,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 920,
            "length": 1,
            "offset": 30,
            "surroundingCode": "\tQuaternion to(p_to);\n\n\tBasis b(from.slerp(to, p_weight));\n\tb.rows[0] *= Math::lerp(rows[0].length(), p_to.rows[0].length(), p_weight);\n\tb.rows[1] *= Math::lerp(rows[1].length(), p_to.rows[1].length(), p_weight);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f993cb2695f335f227cd8817da1530764f7124e9d401e646effadc5671b8d04a"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 942,
          "offset": 30,
          "length": 18,
          "code": {
            "startLine": 940,
            "length": 18,
            "offset": 88,
            "surroundingCode": "\tconst static real_t s_c_scale_inv = 0.91529123286551084;\n\n\tconst static real_t s_rc2 = 1.5853309190550713 * s_c_scale;\n\tconst static real_t s_c4_div_c3 = s_c4 / s_c3;\n\tconst static real_t s_c4_div_c3_x2 = (s_c4 / s_c3) * 2.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "10468e91a7e499b7c003824e10ad7643d5f962db095fb120582ea13808a58f6c"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 944,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 942,
            "length": 1,
            "offset": 147,
            "surroundingCode": "\tconst static real_t s_rc2 = 1.5853309190550713 * s_c_scale;\n\tconst static real_t s_c4_div_c3 = s_c4 / s_c3;\n\tconst static real_t s_c4_div_c3_x2 = (s_c4 / s_c3) * 2.0;\n\n\tconst static real_t s_scale_dst2 = s_c3 * s_c_scale_inv;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "7db244c1b318bec79ae7ef2803c6f6aabc6c5a13bfcfd76252975eb17a97329d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 8,
          "length": 6,
          "code": {
            "startLine": 947,
            "length": 6,
            "offset": 66,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "30ddee8b3e10edc0371bef518b395703cd74afd2912953ba3836622458f207af"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 26,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 84,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "937eb9c26b6c3d123b8d9daf7fb40c6c1276094d679b4faecd39263f00c69333"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 39,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 97,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "0c045138c99d1c916ce0b79830a1a7d2073f1f88622aed96d9ac2fd7146744b0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 52,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 110,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "49ae105bafb9d21120dd22a27a658f11398e489f98724da20fb10808fe6b672f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 65,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 123,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "86a4d77b7b22bac8c5a4a671280ce3b766bc5d92e0fdcec518da239fa274d168"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 78,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 136,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b0da25c37c6a154d2b7794747dd89d2e4953195b3d726660366d7e098aedc1f0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 91,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 149,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e1e6e3e969fe1ff5858ad8cdd837fe89c4b9b108da123b40af980c101dcc82f3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 104,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 162,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e8cbfe3eac0bf0771ebf637b1b7a86434e350fe3e0081a518b51d5597e6f3afd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 117,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 175,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "cafcb723c22d9eccce9518e6f021e69caf9c6f790b59a5ba289918b036a27d22"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 949,
          "offset": 130,
          "length": 8,
          "code": {
            "startLine": 947,
            "length": 8,
            "offset": 188,
            "surroundingCode": "\tconst static real_t s_scale_dst4 = s_c5 * s_c_scale_inv;\n\n\tconst real_t src[9] = { p_values[0], p_values[1], p_values[2], p_values[3], p_values[4], p_values[5], p_values[6], p_values[7], p_values[8] };\n\n\treal_t m00 = rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "5f834ff6e367ce76b764a7991240f21eedd0d3ada3a9426d058093779b2e88c4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 961,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 959,
            "length": 8,
            "offset": 28,
            "surroundingCode": "\treal_t m22 = rows[2][2];\n\n\tp_values[0] = src[0];\n\tp_values[1] = m11 * src[1] - m12 * src[2] + m10 * src[3];\n\tp_values[2] = -m21 * src[1] + m22 * src[2] - m20 * src[3];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "36ceb112388cab1fd94f0e4a7c7d6abcb02ce96200f83e321a8ef4226c4cebe6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 962,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 960,
            "length": 8,
            "offset": 25,
            "surroundingCode": "\n\tp_values[0] = src[0];\n\tp_values[1] = m11 * src[1] - m12 * src[2] + m10 * src[3];\n\tp_values[2] = -m21 * src[1] + m22 * src[2] - m20 * src[3];\n\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "cea767cfb6f8f17b2cd6e2134b0b61ceb611afdcf079e88b3f2442b2b8ce51ed"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 963,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 961,
            "length": 8,
            "offset": 83,
            "surroundingCode": "\tp_values[0] = src[0];\n\tp_values[1] = m11 * src[1] - m12 * src[2] + m10 * src[3];\n\tp_values[2] = -m21 * src[1] + m22 * src[2] - m20 * src[3];\n\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b4f88eb9b85e3b14186f2691092e5fb806db1f7a6a80b0290cd31961d6b19a96"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 964,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 962,
            "length": 8,
            "offset": 120,
            "surroundingCode": "\tp_values[1] = m11 * src[1] - m12 * src[2] + m10 * src[3];\n\tp_values[2] = -m21 * src[1] + m22 * src[2] - m20 * src[3];\n\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];\n\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8ff370ec370239555e09668483c33b2fbd0698322aa8728a6d25d7b657011049"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 966,
          "offset": 19,
          "length": 1,
          "code": {
            "startLine": 964,
            "length": 1,
            "offset": 78,
            "surroundingCode": "\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];\n\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8bc3f349327bf9e7a75bd9519cd1070c4958e90917c0f9642c0bed55a81c5e44"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 966,
          "offset": 28,
          "length": 1,
          "code": {
            "startLine": 964,
            "length": 1,
            "offset": 87,
            "surroundingCode": "\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];\n\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0fd04ad7c64689fdadd7bd7602fdf97d6d64ba33b664e9f6da7d772cd416dc00"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 966,
          "offset": 37,
          "length": 1,
          "code": {
            "startLine": 964,
            "length": 1,
            "offset": 96,
            "surroundingCode": "\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];\n\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "eb3d9f7d2016cc2467586bfef81e2ad6de75c577e873dcba69bf179b06019add"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 966,
          "offset": 46,
          "length": 1,
          "code": {
            "startLine": 964,
            "length": 1,
            "offset": 105,
            "surroundingCode": "\tp_values[3] = m01 * src[1] - m02 * src[2] + m00 * src[3];\n\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f714810574236120824bd221f228900b4cd1c629bd837817a6dab13aeeaa6d48"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 967,
          "offset": 24,
          "length": 5,
          "code": {
            "startLine": 965,
            "length": 5,
            "offset": 73,
            "surroundingCode": "\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];\n\treal_t sh3 = -src[7];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f46015a22753e44d490212c5e20c28418fc20de3eed98a3011397ffdb7db72da"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 967,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 965,
            "length": 1,
            "offset": 85,
            "surroundingCode": "\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];\n\treal_t sh3 = -src[7];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "30f491d3aed45465a078769c3fad4117521a9e5ccd25a6ab30fea0ad4d803701"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 967,
          "offset": 45,
          "length": 1,
          "code": {
            "startLine": 965,
            "length": 1,
            "offset": 94,
            "surroundingCode": "\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];\n\treal_t sh3 = -src[7];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "15b9301ffc8ff9a1e10a9c2cf0eeb5031bf65d41388d712eabe3a88a9b99cb12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 967,
          "offset": 54,
          "length": 1,
          "code": {
            "startLine": 965,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\n\treal_t sh0 = src[7] + src[8] + src[8] - src[5];\n\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];\n\treal_t sh3 = -src[7];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5e9403a00f8da83eef35627583bce2c5149c22c550a791dcd6aaf7b4d582a510"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 969,
          "offset": 20,
          "length": 1,
          "code": {
            "startLine": 967,
            "length": 1,
            "offset": 98,
            "surroundingCode": "\treal_t sh1 = src[4] + s_rc2 * src[6] + src[7] + src[8];\n\treal_t sh2 = src[4];\n\treal_t sh3 = -src[7];\n\treal_t sh4 = -src[5];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3af61839b4ae321edc8755a8c6228889efbba7571f296baf6a2436c89ea3a2b1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 970,
          "offset": 20,
          "length": 1,
          "code": {
            "startLine": 968,
            "length": 1,
            "offset": 64,
            "surroundingCode": "\treal_t sh2 = src[4];\n\treal_t sh3 = -src[7];\n\treal_t sh4 = -src[5];\n\n\t// Rotations.  R0 and R1 just use the raw matrix columns"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f5aca5f4f597734209fd6dc122aac97bc15bdbdd102b8511e8bff7f8b3a39fde"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd0' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 990,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 988,
            "length": 2,
            "offset": 62,
            "surroundingCode": "\treal_t sh0_x = sh0 * m00;\n\treal_t sh0_y = sh0 * m10;\n\treal_t d0 = sh0_x * m10;\n\treal_t d1 = sh0_y * m20;\n\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a490ffbba417835a8a8276b4daf2087b4c7a27ec1476135a37cd79930b32b36b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 991,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 989,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\treal_t sh0_y = sh0 * m10;\n\treal_t d0 = sh0_x * m10;\n\treal_t d1 = sh0_y * m20;\n\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);\n\treal_t d3 = sh0_x * m20;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "465047dc4edc985be2933d6bd82e990fe73d08d592a34d415ef4eb24d981f4e1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 992,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 990,
            "length": 2,
            "offset": 60,
            "surroundingCode": "\treal_t d0 = sh0_x * m10;\n\treal_t d1 = sh0_y * m20;\n\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);\n\treal_t d3 = sh0_x * m20;\n\treal_t d4 = sh0_x * m00 - sh0_y * m10;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6def640e0ac16db4431d851d011307b27f184761d5644217235274af715f970b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd3' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 993,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 991,
            "length": 2,
            "offset": 80,
            "surroundingCode": "\treal_t d1 = sh0_y * m20;\n\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);\n\treal_t d3 = sh0_x * m20;\n\treal_t d4 = sh0_x * m00 - sh0_y * m10;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4180940f5f3acc88db8058b209e584a610302df84509b6a91fd0dc5e102e9ad0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd4' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 994,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 992,
            "length": 2,
            "offset": 80,
            "surroundingCode": "\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);\n\treal_t d3 = sh0_x * m20;\n\treal_t d4 = sh0_x * m00 - sh0_y * m10;\n\n\t// column 1"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "45216b3a3bce37991a644db743d3d96d4ba9e8311dcf1678db306753d4339c09"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 994,
          "offset": 14,
          "length": 5,
          "code": {
            "startLine": 992,
            "length": 5,
            "offset": 85,
            "surroundingCode": "\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);\n\treal_t d3 = sh0_x * m20;\n\treal_t d4 = sh0_x * m00 - sh0_y * m10;\n\n\t// column 1"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "cf76f2dcd7940cb16549ca25e911c7d9b012261a1bdddbf1aabfbb326784d224"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 994,
          "offset": 28,
          "length": 5,
          "code": {
            "startLine": 992,
            "length": 5,
            "offset": 99,
            "surroundingCode": "\treal_t d2 = sh0 * (m20 * m20 + s_c4_div_c3);\n\treal_t d3 = sh0_x * m20;\n\treal_t d4 = sh0_x * m00 - sh0_y * m10;\n\n\t// column 1"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "20491c4abb084053ef57050c17c80ebb497e0d2845123d4b34577e072edee82b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1033,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 1031,
            "length": 8,
            "offset": 24,
            "surroundingCode": "\n\t// extra multipliers\n\tp_values[4] = d0;\n\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "94c14c3f0f0865b05e3e4862efcfba3dccd01d004ae95bcba9b5d0fe78542032"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1034,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 1032,
            "length": 8,
            "offset": 42,
            "surroundingCode": "\t// extra multipliers\n\tp_values[4] = d0;\n\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1694864b51d576ff0e47b24411edd04f27390df41d53c820552982702fb45bf1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1034,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 1032,
            "length": 1,
            "offset": 51,
            "surroundingCode": "\t// extra multipliers\n\tp_values[4] = d0;\n\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "677d51b315be48fd0c222b0d0f46ade2da64cbd7e9f60c3b37bb96ab1fc4b044"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1035,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 1033,
            "length": 8,
            "offset": 40,
            "surroundingCode": "\tp_values[4] = d0;\n\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;\n\tp_values[8] = d4 * s_scale_dst4;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "448bf4e68cd6c9f95d82bfb6cb099bce8ae1e3346071f37fcebe0bcd9e28f255"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1035,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 1033,
            "length": 1,
            "offset": 49,
            "surroundingCode": "\tp_values[4] = d0;\n\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;\n\tp_values[8] = d4 * s_scale_dst4;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "90aa474cb05b9014604e55e19939897bf47d49ee9ca81d77441787df1b5ec819"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1036,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 1034,
            "length": 8,
            "offset": 55,
            "surroundingCode": "\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;\n\tp_values[8] = d4 * s_scale_dst4;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "05918ec37fc4812c478d7bd482d613c9370b93587f1e0d82c09eb2d3d818af22"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1036,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 1034,
            "length": 1,
            "offset": 64,
            "surroundingCode": "\tp_values[5] = -d1;\n\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;\n\tp_values[8] = d4 * s_scale_dst4;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "15b759d070f2376747235bfa218390957b5154f8819bb1889245a69e90e43e20"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1037,
          "offset": 2,
          "length": 8,
          "code": {
            "startLine": 1035,
            "length": 8,
            "offset": 55,
            "surroundingCode": "\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;\n\tp_values[8] = d4 * s_scale_dst4;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "5da29d548398caf74440461b4eebaa002811bdb3476f9a5cb2fb62486267d83a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1037,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 1035,
            "length": 1,
            "offset": 64,
            "surroundingCode": "\tp_values[6] = d2 * s_scale_dst2;\n\tp_values[7] = -d3;\n\tp_values[8] = d4 * s_scale_dst4;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9cca852008eb534276b70f37f46a78d4bceb21039ceb513e5e24f41eee69faad"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'looking_at' of similar type ('const Vector3 &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/basis.cpp",
          "line": 1040,
          "offset": 25,
          "length": 5,
          "code": {
            "startLine": 1038,
            "length": 5,
            "offset": 27,
            "surroundingCode": "}\n\nBasis Basis::looking_at(const Vector3 &p_target, const Vector3 &p_up) {\n#ifdef MATH_CHECKS\n\tERR_FAIL_COND_V_MSG(p_target.is_zero_approx(), Basis(), \"The target vector can't be zero.\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "cd3415eafb0e3aa46343556f8b2b35f67919d855f25684355c321216e8b29f41"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 44,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 42,
            "length": 1,
            "offset": 227,
            "surroundingCode": "\nstatic void callable_custom_call(void *p_userdata, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\tcallable_custom->call((const Variant **)p_args, p_argument_count, *(Variant *)r_return, *r_error);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c894967e936a9795676d2182cc6e485d6bb9c1e2af8eb97fb3699ed5a61609cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 45,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 43,
            "length": 1,
            "offset": 279,
            "surroundingCode": "static void callable_custom_call(void *p_userdata, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\tcallable_custom->call((const Variant **)p_args, p_argument_count, *(Variant *)r_return, *r_error);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c71bbb45894604cc4b2ade8ad7fd670ecdfd4120cf6317e82c7ffb0663434e68"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 45,
          "offset": 69,
          "length": 1,
          "code": {
            "startLine": 43,
            "length": 1,
            "offset": 324,
            "surroundingCode": "static void callable_custom_call(void *p_userdata, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\tcallable_custom->call((const Variant **)p_args, p_argument_count, *(Variant *)r_return, *r_error);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ffca22b8fd05ae7dc773e0bd835ce1d42330fc417d71ed70e83d1c51e4f17b6a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 49,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 47,
            "length": 1,
            "offset": 104,
            "surroundingCode": "\nstatic GDExtensionBool callable_custom_is_valid(void *p_userdata) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\treturn callable_custom->is_valid();\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "21f8917ac804d4a4aa19e55f8f73f83d2c6aeecdd52a6c638f6d6d548e5aad27"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 50,
          "offset": 9,
          "length": 15,
          "code": {
            "startLine": 48,
            "length": 15,
            "offset": 141,
            "surroundingCode": "static GDExtensionBool callable_custom_is_valid(void *p_userdata) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\treturn callable_custom->is_valid();\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "e4adf6ce950eb4c5b12ee2d8b39b91f3138c36b3fede5a7ac7a8dbfff1c493f8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 54,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 52,
            "length": 1,
            "offset": 89,
            "surroundingCode": "\nstatic void callable_custom_free(void *p_userdata) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\tmemdelete(callable_custom);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "99d27c8dfc31a555c2b941527c56b74286ba1e5cd2e9fda5456be2db6b80bc3e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 59,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 57,
            "length": 1,
            "offset": 93,
            "surroundingCode": "\nstatic uint32_t callable_custom_hash(void *p_userdata) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\treturn callable_custom->hash();\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "04a002627974666075f593d1d2c0e46ccc471b65c016d79878fe0ea7a49bd74f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 64,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 62,
            "length": 1,
            "offset": 151,
            "surroundingCode": "\nstatic void callable_custom_to_string(void *p_userdata, GDExtensionBool *r_is_valid, GDExtensionStringPtr r_out) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\t*((String *)r_out) = callable_custom->get_as_text();\n\t*r_is_valid = true;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6fa7680ae90d22efdd024753387e9a5a7e8e6db507df2c714b955e34dd8a77e4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 66,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 64,
            "length": 4,
            "offset": 134,
            "surroundingCode": "\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\t*((String *)r_out) = callable_custom->get_as_text();\n\t*r_is_valid = true;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "d4ff0a7e1de51b346e7cfb22cc39794f13a35185cd5f00263f8e6113dbedfd9d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 70,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 68,
            "length": 1,
            "offset": 92,
            "surroundingCode": "\nstatic GDExtensionBool callable_custom_equal_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_equal_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d3efe5e52af8cfc39ca6a400086cb744318e9f668c171907f554d903b13b0b53"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 70,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 68,
            "length": 1,
            "offset": 96,
            "surroundingCode": "\nstatic GDExtensionBool callable_custom_equal_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_equal_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "0d560a687a87ed3acbc382ec59ffc932f39954206ef99c09b742f57a25065367"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 71,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 69,
            "length": 1,
            "offset": 135,
            "surroundingCode": "static GDExtensionBool callable_custom_equal_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_equal_func();\n\tCallableCustom::CompareEqualFunc func_b = b->get_compare_equal_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "0b17c9e481cdfa35cef8d282409c5ef8956da17c54551145e37faab0b4fe5b91"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 71,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 69,
            "length": 1,
            "offset": 139,
            "surroundingCode": "static GDExtensionBool callable_custom_equal_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_equal_func();\n\tCallableCustom::CompareEqualFunc func_b = b->get_compare_equal_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "e62bcf5e7c457b54e3e1eb29cb639feed2fd534b5e8af6d6ee1dc002100f52f2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 75,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 73,
            "length": 5,
            "offset": 106,
            "surroundingCode": "\tCallableCustom::CompareEqualFunc func_b = b->get_compare_equal_func();\n\tif (func_a != func_b) {\n\t\treturn false;\n\t}\n\treturn func_a(a, b);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "18a7617349beba392d9b20ee6adfb26e489d1e4432b6c05d02c587dfebdd100e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 77,
          "offset": 9,
          "length": 6,
          "code": {
            "startLine": 75,
            "length": 6,
            "offset": 27,
            "surroundingCode": "\t\treturn false;\n\t}\n\treturn func_a(a, b);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "fcb89938b713a3587af0f4473a34708095f0289a47c3b50abdb76c717c938a84"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 81,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 79,
            "length": 1,
            "offset": 96,
            "surroundingCode": "\nstatic GDExtensionBool callable_custom_less_than_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_less_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2618465cf3eb46373d7e5776efc0e4b2ce4d35f19bd25f0a68cc05e4cf4a6a6f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 81,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 79,
            "length": 1,
            "offset": 100,
            "surroundingCode": "\nstatic GDExtensionBool callable_custom_less_than_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_less_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "907f3e09eaf3f8838b275edd61af7eb9c6ad3f3ef5672518db2edbd728fc42fb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 82,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 80,
            "length": 1,
            "offset": 139,
            "surroundingCode": "static GDExtensionBool callable_custom_less_than_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_less_func();\n\tCallableCustom::CompareEqualFunc func_b = b->get_compare_less_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "76177b3523c4c35ff9c99b5f6fd2b2e5335dfbe79c3145a401bc42c03cfa2f9a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 82,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 80,
            "length": 1,
            "offset": 143,
            "surroundingCode": "static GDExtensionBool callable_custom_less_than_func(void *p_a, void *p_b) {\n\tCallableCustom *a = (CallableCustom *)p_a;\n\tCallableCustom *b = (CallableCustom *)p_b;\n\tCallableCustom::CompareEqualFunc func_a = a->get_compare_less_func();\n\tCallableCustom::CompareEqualFunc func_b = b->get_compare_less_func();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b2626cc35b331e64cae2d813b036afcd940cb6e8e0e978bf6f606672bc266590"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 87,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 85,
            "length": 3,
            "offset": 67,
            "surroundingCode": "\tif (func_a != func_b) {\n\t\t// Just compare the addresses.\n\t\treturn p_a < p_b;\n\t}\n\treturn func_a(a, b);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "2f14e9abb18f6a6121800a8a379182e3f5a55e53d7b7c83d9aa52fdb0f5405e8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 89,
          "offset": 9,
          "length": 6,
          "code": {
            "startLine": 87,
            "length": 6,
            "offset": 31,
            "surroundingCode": "\t\treturn p_a < p_b;\n\t}\n\treturn func_a(a, b);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "81469606bcb80d92465a10bd48d921acbb41bcbd5c0fc7c1edf09fb7e0443323"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 93,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 91,
            "length": 1,
            "offset": 147,
            "surroundingCode": "\nstatic GDExtensionInt custom_callable_get_argument_count_func(void *p_userdata, GDExtensionBool *r_is_valid) {\n\tCallableCustom *callable_custom = (CallableCustom *)p_userdata;\n\tbool valid = false;\n\tint ret = callable_custom->get_argument_count(valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "2eae58747602f8c65e735b9afd7be5526c65a03ccc95d9c409f65c72288fcb91"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 96,
          "offset": 16,
          "length": 5,
          "code": {
            "startLine": 94,
            "length": 5,
            "offset": 91,
            "surroundingCode": "\tbool valid = false;\n\tint ret = callable_custom->get_argument_count(valid);\n\t*r_is_valid = valid;\n\treturn ret;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "df1bb2265758a44d88b5be6e75ac1ec3f5182071dd2fd7c202ee0a04b07866c7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Object *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_custom.cpp",
          "line": 102,
          "offset": 9,
          "length": 8,
          "code": {
            "startLine": 100,
            "length": 8,
            "offset": 97,
            "surroundingCode": "bool CallableCustom::is_valid() const {\n\t// The same default implementation as in Godot.\n\treturn ObjectDB::get_instance(get_object());\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "8b7bd01a0ee6233af9f6d58139c8ee892ef5e948a3f1313b2bceaf4fc1662b65"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 38,
          "offset": 61,
          "length": 1,
          "code": {
            "startLine": 36,
            "length": 1,
            "offset": 255,
            "surroundingCode": "\nstatic void custom_callable_mp_call(void *p_userdata, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\tcallable_method_pointer->call((const Variant **)p_args, p_argument_count, *(Variant *)r_return, *r_error);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "1ca8eb5287790916a87b0ca6659264925988a696acd041c24c27579f1d70742c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 39,
          "offset": 32,
          "length": 1,
          "code": {
            "startLine": 37,
            "length": 1,
            "offset": 332,
            "surroundingCode": "static void custom_callable_mp_call(void *p_userdata, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\tcallable_method_pointer->call((const Variant **)p_args, p_argument_count, *(Variant *)r_return, *r_error);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ef7aea1909f9f13ec13d38c1905da71744b833614b6bbeeb8024d54f5ce5e280"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 39,
          "offset": 77,
          "length": 1,
          "code": {
            "startLine": 37,
            "length": 1,
            "offset": 377,
            "surroundingCode": "static void custom_callable_mp_call(void *p_userdata, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\tcallable_method_pointer->call((const Variant **)p_args, p_argument_count, *(Variant *)r_return, *r_error);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "1cfa80441ad438c8b9b43d09a288a3c4d92407344a7210a94ffdfe9383e5e4d8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 43,
          "offset": 61,
          "length": 1,
          "code": {
            "startLine": 41,
            "length": 1,
            "offset": 132,
            "surroundingCode": "\nstatic GDExtensionBool custom_callable_mp_is_valid(void *p_userdata) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\tObjectID object = callable_method_pointer->get_object();\n\treturn object == ObjectID() || ObjectDB::get_instance(object);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d0f9f15529fe1eefadd4f8f08c737792b10ca119928c2b590655b47b4e26c77d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 49,
          "offset": 61,
          "length": 1,
          "code": {
            "startLine": 47,
            "length": 1,
            "offset": 117,
            "surroundingCode": "\nstatic void custom_callable_mp_free(void *p_userdata) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\tmemdelete(callable_method_pointer);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "97fed2da38e8270d9b848ec072e830c2b51b534364fc4b55aa800c346909acb6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 54,
          "offset": 61,
          "length": 1,
          "code": {
            "startLine": 52,
            "length": 1,
            "offset": 121,
            "surroundingCode": "\nstatic uint32_t custom_callable_mp_hash(void *p_userdata) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\treturn callable_method_pointer->get_hash();\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c4516167f6f7b1d2589b145fa7888536b9559c704861ce156e6f3cbdd10505af"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 59,
          "offset": 35,
          "length": 1,
          "code": {
            "startLine": 57,
            "length": 1,
            "offset": 112,
            "surroundingCode": "\nstatic GDExtensionBool custom_callable_mp_equal_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "27a91963782126a87626be8cf370fae0fddb1a6c09e7ae0f19e01056199021fb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 59,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 57,
            "length": 1,
            "offset": 116,
            "surroundingCode": "\nstatic GDExtensionBool custom_callable_mp_equal_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9a80001901b3539ea89c8bf7dd55f4a57c818a53e6ab29e81d764b726c6b952a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 60,
          "offset": 35,
          "length": 1,
          "code": {
            "startLine": 58,
            "length": 1,
            "offset": 189,
            "surroundingCode": "static GDExtensionBool custom_callable_mp_equal_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n\n\tif (a->get_comp_size() != b->get_comp_size()) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1fc74dce02f8eef6b0217cc04579c3a0fb52c16ed4249fcd066bc00b2afe1165"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 60,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 58,
            "length": 1,
            "offset": 193,
            "surroundingCode": "static GDExtensionBool custom_callable_mp_equal_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n\n\tif (a->get_comp_size() != b->get_comp_size()) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "17cd57d86953c07eba0e3621f23f585f7cd5f674fc9ebfb932546186defc5584"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 63,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 61,
            "length": 5,
            "offset": 59,
            "surroundingCode": "\n\tif (a->get_comp_size() != b->get_comp_size()) {\n\t\treturn false;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "4f5ebeb8b1ede1bfee6cc0c91a800276c71ef849ccee8b553f5a9d94fec5d5b9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 66,
          "offset": 9,
          "length": 6,
          "code": {
            "startLine": 64,
            "length": 6,
            "offset": 12,
            "surroundingCode": "\t}\n\n\treturn memcmp(a->get_comp_ptr(), b->get_comp_ptr(), a->get_comp_size() * 4) == 0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "4c4dda98bf551677f4e7ef99e5af1f2da0e3eb026519eddd9b25fc1bb47ca134"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "implicit-widening-of-multiplication-result",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "performing an implicit widening conversion to type 'size_t' (aka 'unsigned long') of a multiplication performed in type 'uint32_t' (aka 'unsigned int')",
      "detailsInfo": "implicit-widening-of-multiplication-result",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 66,
          "offset": 54,
          "length": 1,
          "code": {
            "startLine": 64,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\t}\n\n\treturn memcmp(a->get_comp_ptr(), b->get_comp_ptr(), a->get_comp_size() * 4) == 0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-implicit-widening-of-multiplication-result"
      },
      "hash": "eaa9feec7e25b82bdf2e87f89dc8102d358de2c5105f295a3135722dd47a7689"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 70,
          "offset": 35,
          "length": 1,
          "code": {
            "startLine": 68,
            "length": 1,
            "offset": 116,
            "surroundingCode": "\nstatic GDExtensionBool custom_callable_mp_less_than_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3d28dc67c58f1c13dd0b1711558e9f7e8380c311b85ad5618a22bc8ec5ff028d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 70,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 68,
            "length": 1,
            "offset": 120,
            "surroundingCode": "\nstatic GDExtensionBool custom_callable_mp_less_than_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6d35fc0f842117451454ba5e0a9b21605fc561949b2e939125c63a9355e20288"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 71,
          "offset": 35,
          "length": 1,
          "code": {
            "startLine": 69,
            "length": 1,
            "offset": 193,
            "surroundingCode": "static GDExtensionBool custom_callable_mp_less_than_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n\n\tif (a->get_comp_size() != b->get_comp_size()) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a3f5c95d0fda11d4f46e0a1607ca47f7481c7ebc27697351f768d03ce982f745"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 71,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 69,
            "length": 1,
            "offset": 197,
            "surroundingCode": "static GDExtensionBool custom_callable_mp_less_than_func(void *p_a, void *p_b) {\n\tCallableCustomMethodPointerBase *a = (CallableCustomMethodPointerBase *)p_a;\n\tCallableCustomMethodPointerBase *b = (CallableCustomMethodPointerBase *)p_b;\n\n\tif (a->get_comp_size() != b->get_comp_size()) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "655bb7c4c478b968a147ab4a9e95e0f6dc73a09223b27b4afe1ca71e07626c5c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 74,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 72,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\n\tif (a->get_comp_size() != b->get_comp_size()) {\n\t\treturn a->get_comp_size() < b->get_comp_size();\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "c376b4796d9a3e221ae1aa096724328a76b9f2f7d78563050c8af004fba6543b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 77,
          "offset": 9,
          "length": 6,
          "code": {
            "startLine": 75,
            "length": 6,
            "offset": 12,
            "surroundingCode": "\t}\n\n\treturn memcmp(a->get_comp_ptr(), b->get_comp_ptr(), a->get_comp_size() * 4) < 0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "e81f02a67db25b21138f59a3126a9c7d19c6128680c28bc2496b0d93122da862"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "implicit-widening-of-multiplication-result",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "performing an implicit widening conversion to type 'size_t' (aka 'unsigned long') of a multiplication performed in type 'uint32_t' (aka 'unsigned int')",
      "detailsInfo": "implicit-widening-of-multiplication-result",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 77,
          "offset": 54,
          "length": 1,
          "code": {
            "startLine": 75,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\t}\n\n\treturn memcmp(a->get_comp_ptr(), b->get_comp_ptr(), a->get_comp_size() * 4) < 0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-implicit-widening-of-multiplication-result"
      },
      "hash": "7fa6e353dfe79f6450ca48c8cc60a4590ed487ff2164428b1239b10f5d678a93"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 81,
          "offset": 61,
          "length": 1,
          "code": {
            "startLine": 79,
            "length": 1,
            "offset": 175,
            "surroundingCode": "\nstatic GDExtensionInt custom_callable_mp_get_argument_count_func(void *p_userdata, GDExtensionBool *r_is_valid) {\n\tCallableCustomMethodPointerBase *callable_method_pointer = (CallableCustomMethodPointerBase *)p_userdata;\n\tbool valid = false;\n\tint ret = callable_method_pointer->get_argument_count(valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9e93f39d7d2a6ca246dd129c0c5e576e30d86cd49cbe495dfdc7937d83342d44"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 84,
          "offset": 16,
          "length": 5,
          "code": {
            "startLine": 82,
            "length": 5,
            "offset": 99,
            "surroundingCode": "\tbool valid = false;\n\tint ret = callable_method_pointer->get_argument_count(valid);\n\t*r_is_valid = valid;\n\treturn ret;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "e48eb579a7a21f755a6c98d7feb94468c33638ca9d99644fc719d33a26a49f09"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 94,
          "offset": 28,
          "length": 8,
          "code": {
            "startLine": 92,
            "length": 8,
            "offset": 87,
            "surroundingCode": "\tfor (uint32_t i = 0; i < comp_size; i++) {\n\t\tif (i == 0) {\n\t\t\th = hash_murmur3_one_32(comp_ptr[i]);\n\t\t} else {\n\t\t\th = hash_murmur3_one_32(comp_ptr[i], h);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "0b4110f7eea907d16569809f220c6972e963db0dad0b679d08a5f5b7ce86432b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/callable_method_pointer.cpp",
          "line": 96,
          "offset": 28,
          "length": 8,
          "code": {
            "startLine": 94,
            "length": 8,
            "offset": 79,
            "surroundingCode": "\t\t\th = hash_murmur3_one_32(comp_ptr[i]);\n\t\t} else {\n\t\t\th = hash_murmur3_one_32(comp_ptr[i], h);\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "36cc9f34952d393f0e4eca95b417d34433c5caa05db06293cfe427a436dd32e0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'l' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 48,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 46,
            "length": 1,
            "offset": 99,
            "surroundingCode": "_FORCE_INLINE_ bool is_str_less(const L *l_ptr, const R *r_ptr) {\n\twhile (true) {\n\t\tconst char32_t l = *l_ptr;\n\t\tconst char32_t r = *r_ptr;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "848a709f8d5d4dcac2d4a01bb67813162528e421d2fbb5d77b22b3a7c313e52a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 49,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 47,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\twhile (true) {\n\t\tconst char32_t l = *l_ptr;\n\t\tconst char32_t r = *r_ptr;\n\n\t\tif (l == 0 && r == 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "207f6a6034dc913058cdd96426197bbeec6fe4b0990d27dee11c79c325d0a3ee"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "branch-clone",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "repeated branch body in conditional chain",
      "detailsInfo": "branch-clone",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 51,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 49,
            "length": 1,
            "offset": 54,
            "surroundingCode": "\t\tconst char32_t r = *r_ptr;\n\n\t\tif (l == 0 && r == 0) {\n\t\t\treturn false;\n\t\t} else if (l == 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-branch-clone"
      },
      "hash": "a91f5ef29caeef570cb565b6ebc4e29f8470fcd3f5a538d022bd07ed8003bf04"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 53,
          "offset": 5,
          "length": 4,
          "code": {
            "startLine": 51,
            "length": 4,
            "offset": 47,
            "surroundingCode": "\t\tif (l == 0 && r == 0) {\n\t\t\treturn false;\n\t\t} else if (l == 0) {\n\t\t\treturn true;\n\t\t} else if (r == 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "5b6e6688bbe15e03da8139dfa250ce39e5a7a87907dd7286650d79ee4f7badb3"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "branch-clone",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "repeated branch body in conditional chain",
      "detailsInfo": "branch-clone",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 53,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 51,
            "length": 1,
            "offset": 64,
            "surroundingCode": "\t\tif (l == 0 && r == 0) {\n\t\t\treturn false;\n\t\t} else if (l == 0) {\n\t\t\treturn true;\n\t\t} else if (r == 0) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-branch-clone"
      },
      "hash": "0f7e83520942e8272b21df260833ac72202e8d9df169d6759220ad45a74b164d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 63,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 61,
            "length": 2,
            "offset": 12,
            "surroundingCode": "\t\t}\n\n\t\tl_ptr++;\n\t\tr_ptr++;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c9f62cc645b6149ad4233e994df4aba6aae36f5de97158aa51886e766b1ee5f4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 64,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 62,
            "length": 2,
            "offset": 19,
            "surroundingCode": "\n\t\tl_ptr++;\n\t\tr_ptr++;\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c7093fd2bc4c3dc4c56c5cb4296aa3a41a826be25c2f8d2a3652c62d76e67978"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 83,
          "offset": 2,
          "length": 3,
          "code": {
            "startLine": 81,
            "length": 3,
            "offset": 20,
            "surroundingCode": "\n\tT *dst = ptrw();\n\tdst[lhs_len] = p_char;\n\tdst[lhs_len + 1] = 0;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "6506f6a1026ddb1e8bfaaca688a0ce41ad6a29b9d7c7cd3b60953cfd7650be12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 84,
          "offset": 2,
          "length": 3,
          "code": {
            "startLine": 82,
            "length": 3,
            "offset": 43,
            "surroundingCode": "\tT *dst = ptrw();\n\tdst[lhs_len] = p_char;\n\tdst[lhs_len + 1] = 0;\n\n\treturn *this;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "05471e981c23f9fd127673b6bee93ce980730241e60d28c2a1e088232d701807"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "c-copy-assignment-signature",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "operator=() should return 'CharStringT&'",
      "detailsInfo": "c-copy-assignment-signature",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 89,
          "offset": 1,
          "length": 8,
          "code": {
            "startLine": 87,
            "length": 8,
            "offset": 3,
            "surroundingCode": "}\n\ntemplate <typename T>\nvoid CharStringT<T>::operator=(const T *p_cstr) {\n\tcopy_from(p_cstr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-c-copy-assignment-signature"
      },
      "hash": "376955c7b9d43251e5d0b3051d4c02576519cfddb177dff22dd8ad5f6a01bc35"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'const T *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/char_string.cpp",
          "line": 132,
          "offset": 7,
          "length": 6,
          "code": {
            "startLine": 130,
            "length": 6,
            "offset": 78,
            "surroundingCode": "template <typename T>\nvoid CharStringT<T>::copy_from(const T *p_cstr) {\n\tif (!p_cstr) {\n\t\tresize(0);\n\t\treturn;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "af94cc86f319e0ab19eacb25b57f491b45648fab86029a3f732fe192870fb7a0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 39,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 37,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nuint32_t Color::to_argb32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b43ec85146989c8a3b5b93ab392fa3dfec9cc94cc385162bd062c60120aaa552"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 39,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 37,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\nuint32_t Color::to_argb32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ad60bf38263c276da043a272d4457e083aa786cbe3ee086a3f07adf7c971ecec"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 39,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 37,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\nuint32_t Color::to_argb32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "90d8d049a29642ba2c3fdcc0830d2246b9f3edeededc79999c18ad277b518c6a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 40,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 38,
            "length": 1,
            "offset": 91,
            "surroundingCode": "uint32_t Color::to_argb32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9b9ec455025cff340892c6958963feb9cd272608fc011389933742a33e3ec90b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 41,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 39,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d582ed0e709672cc89e4f1925594eb793b660b30d23dd7ad08303d5cca30d72a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 41,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 39,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a20c89dd24c2405df7224bd1bd96841cf4d033e57bd00bdb0bd4324fad76d3cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 42,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 40,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "006322c1d5eec779fbc93874faf815a9b87de925a7d385ff632cfed3238691d4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 43,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 41,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f48371225daddcc3fc5d029f48584987860bb96a05f9f2921c7fe1fcdecbf009"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 43,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 41,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "746b4fc2666b11dc26fa23f7a2278cc4a10784a9a3a95e04368034fbd7142cb7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 44,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 42,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9416aaec74ada6bb5fb61f2dc2c743fd5a3262e2bc555d87fb9045efab29be51"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 45,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 43,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6571b156fbedf5f278709ef5889b69a2d455aa0b5f624f06c6d3058d9f486ec4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 45,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 43,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c2eeffd1259c36dac8479c30d66b0a6ce2267cdc8caa7a37b2949d0f1635616d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 51,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 49,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nuint32_t Color::to_abgr32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d62a8f75bd517eccf8b01d6e9558c66b706ef043ef191364f4064ea18ef7cd9e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 51,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 49,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\nuint32_t Color::to_abgr32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "441c4e958eeeff51fe2db09be7b74652e730da8a94c8e4be6c1f8f71ca5b5b55"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 51,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 49,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\nuint32_t Color::to_abgr32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c64ab2b78057a418a2ba163a72e0387efb13e98fd90462b82bbc344971a7c337"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 52,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 50,
            "length": 1,
            "offset": 91,
            "surroundingCode": "uint32_t Color::to_abgr32() const {\n\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ca67695a7dd740713f57efd8ef6da14453b26a8fa544f78c5e214ceb8fd7eb28"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 53,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 51,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9b64b1914dee6f2f1c0975e03b227bd7c82d6fde7a5caa4931a6c60abaf7868a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 53,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 51,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\tuint32_t c = (uint8_t)Math::round(a * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a749e6c90a50e14afcd96f2e4c565b39f0d7ca86661d8def5e10ac3d2a3a3062"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 54,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 52,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7e78cb4f221c5a3654c679b613ea04741f0b7b67d2493edd8f0168bef446cf61"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 55,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 53,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "35b6cc66c59e2a398840feaedd861be069bdde7671f8e536d6a35ed2aad856d9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 55,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 53,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "2a4fc7f223d7160189f95dc924daf984f448ce79bd60a57f103b4a9950ad1dec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 56,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 54,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3ad374a3f92a5d8049e2666d7e55181e6b6366a1d3744fd3d4b483fc15411f3b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 57,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 55,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4a5eebb808228ee94dcc3dac24534ea094188c286945b153961e6e32fb499a31"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 57,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 55,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(r * 255.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "741d8e8380e6e910d186c9b5c1d5bac067e2cd9493c7ca962fdb2a91aa466f37"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 63,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 61,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nuint32_t Color::to_rgba32() const {\n\tuint32_t c = (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a1444c57e653a675369030db637b6d1ec38bd3ff8011f965a2ed0601adeb8944"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 63,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 61,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\nuint32_t Color::to_rgba32() const {\n\tuint32_t c = (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4a8f984e8359e02a1b3966e8504c89d47d82aa541cce5eaee5905f4d6095bcb6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 63,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 61,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\nuint32_t Color::to_rgba32() const {\n\tuint32_t c = (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "d39dfc26da75f4bfb6a6a67bcdb83ddd0fe98756af7ca55079e5157e46949ce5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 64,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 62,
            "length": 1,
            "offset": 91,
            "surroundingCode": "uint32_t Color::to_rgba32() const {\n\tuint32_t c = (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8a59253b904d5f3f66d699cad664673174c65a310466fe5ebbba9147f7b25ea2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 65,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 63,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\tuint32_t c = (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "af1ce8826d8c7d59502c922ce1741c18e2c5d6641a091fb79274cd86fde113b7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 65,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 63,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\tuint32_t c = (uint8_t)Math::round(r * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "4d3878d00312a08c52a7be2324b262603980af3fe8492ca0a5ca2f49cb3ad984"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 66,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 64,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tc <<= 8;\n\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f726ca9ce1e16470a7b59e6b9e2fb2fbe7810beb7f69b21f1676a2a9aa38770c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 67,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 65,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(a * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "82f457e2f56ed936c1c45a5f9ce9745c02b5c7b8b0822d08557f5df26e167407"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 67,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 65,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(g * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(a * 255.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9e21226c9dcc65c74f5a2ba1a93077e1f0bf2a25cae3495c046e2a475949ae5c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 68,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 66,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tc <<= 8;\n\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(a * 255.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ec62e4b2121956f40eccdb61c1b776e4e59e21fb4cef363855062b958a8e8190"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 69,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 67,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(a * 255.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b90455bcf6b764aeaeaa4149c035d5c26c17792c9f939d4ffa585d93d54b8181"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 69,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 67,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\tc |= (uint8_t)Math::round(b * 255.0f);\n\tc <<= 8;\n\tc |= (uint8_t)Math::round(a * 255.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9beae7b9936997cf4db1e43ad0b6b3876ab4f41cb66fb554b9c8116c334e238a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 75,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 73,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nuint64_t Color::to_abgr64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ffce2887e91e1b3364e36671d3e131bf21f2269263c87c47ae6d1e8cb7e7db47"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 75,
          "offset": 41,
          "length": 8,
          "code": {
            "startLine": 73,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\nuint64_t Color::to_abgr64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8d3758f3b1fb7c327009b4a55a8582e12f04990f2cc3adeaa32e55281ced8b96"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 75,
          "offset": 41,
          "length": 8,
          "code": {
            "startLine": 73,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\nuint64_t Color::to_abgr64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c1159dfcb956e653f3888619242988a7503859059ab100ec5f4c1e8b5e0c9dea"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 76,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 74,
            "length": 2,
            "offset": 94,
            "surroundingCode": "uint64_t Color::to_abgr64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "536d4103999c0ec3ef56e9cb92192a2d9b6a16f05e99849d57d55df441fbc020"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 77,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 75,
            "length": 8,
            "offset": 94,
            "surroundingCode": "\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f88688e031b5e1c94105c815c16df705622152638d0c05d0e85e3235eea23c07"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 77,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 75,
            "length": 8,
            "offset": 94,
            "surroundingCode": "\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b6d3f8d7436da34dbdbe2e654a38319b7cf704b665a80430c05067373f6ce59e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 78,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 76,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a94e6380ff03a5a30643736ba896b2538936a14df4f7a54b2a8be0c27df8c9c8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 79,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 77,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5e299abbb62d75f99ceb3daa506b073613e26bc67b74deefe449285c060b616c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 79,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 77,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "4f6200c37a0dc54d9c57056c6584b0bb38d817d0bdb21fe9b7873a6cd15f6edf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 80,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 78,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b1bb436eba555a87b7bbaa0ca62c8ab48d4aa68d11e6c5186ff17f80af76ce08"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 81,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 79,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ff1ed94e82e4c6032199bc9d1f4b6046c11cc4a56cdc8e8b46982ad156672922"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 81,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 79,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "697ccc3becf51a1bcf6366bf9daef64c294551bf1eb49616cef0a93600153a63"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 87,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 85,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nuint64_t Color::to_argb64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "9cd91bf53a3e43f9bb7c2b1fa1dcc0d94746d4dcd0491c73bd541155e2c22117"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 87,
          "offset": 41,
          "length": 8,
          "code": {
            "startLine": 85,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\nuint64_t Color::to_argb64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d81caeb575f45a4b2353b74561e59a30e0cca0a7c7ad1448a0938553553175c4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 87,
          "offset": 41,
          "length": 8,
          "code": {
            "startLine": 85,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\nuint64_t Color::to_argb64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "831f9ff8bdb73202ed36db019c81b95a7306aa99df3e3a6f79dab1d883ddb2bf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 88,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 86,
            "length": 2,
            "offset": 94,
            "surroundingCode": "uint64_t Color::to_argb64() const {\n\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "22fb13fe5a31268d0214d34807a73b3f1e997866b38fe7d2124a9eca228f9a2e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 89,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 87,
            "length": 8,
            "offset": 94,
            "surroundingCode": "\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3a75724a30b37aa3f37a216136f6c3840dc7fcc568580d3ad3238495b3afef49"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 89,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 87,
            "length": 8,
            "offset": 94,
            "surroundingCode": "\tuint64_t c = (uint16_t)Math::round(a * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "e3bebdb34073e00d5574c80df6c17d8e2a605cb15731027e58a6f4289cb29a12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 90,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 88,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tc <<= 16;\n\tc |= (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "bfbb2471b363759c3e8150aab8d163da766170e5aabde19480b903f88943cec8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 91,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 89,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "60e9b5e9b7c5efe41dc36b759f7446defa1419b7f6aa59bcdf16acd3ed37f2e9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 91,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 89,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "d63a524dc9b01b51d05cb47c9140ead057b70c7622bb0a945d15849094be301a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 92,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 90,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6c9e8e75b2247e9e804511003993d3ca634b822de2a2b14bfc2c0134813a7f03"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 93,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 91,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d7d812a0df615f35bac17b79b5c12716203e70759ef0cb9b7e48d7bb3d68875e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 99,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 97,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nuint64_t Color::to_rgba64() const {\n\tuint64_t c = (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ca1020c783da08ed4f3dc8939852920a37028e23428059134f2e3f1c530d6e26"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 99,
          "offset": 41,
          "length": 8,
          "code": {
            "startLine": 97,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\nuint64_t Color::to_rgba64() const {\n\tuint64_t c = (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "efa85016b5421240742e8594d61a69e39ab1f7ae2bf9bd6fa8eb31507ede2470"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 99,
          "offset": 41,
          "length": 8,
          "code": {
            "startLine": 97,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\nuint64_t Color::to_rgba64() const {\n\tuint64_t c = (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "656a1c910a742e957e9b78776248fbaa62fb6248f5b3cee92fbb6ab17f82e352"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 100,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 98,
            "length": 2,
            "offset": 94,
            "surroundingCode": "uint64_t Color::to_rgba64() const {\n\tuint64_t c = (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "822230a944265e5110a42f631403b09a4c40e504405b4bb78e564465e2c7ac1a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 101,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 99,
            "length": 8,
            "offset": 94,
            "surroundingCode": "\tuint64_t c = (uint16_t)Math::round(r * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "feee197f1149949866447f0abf69e1afbdf011008cf5b1023c9e6e1f8986d8a8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 102,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 100,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tc <<= 16;\n\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5f9b2f41920bb94befd7e7571583a56a3c807f5961ad6d5a73425a9525c6a50b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 103,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 101,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(a * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f2e2c4cd4d40e7710d30749ffc148741eef08f8e316d683a08579825e63e0775"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 103,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 101,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(g * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(a * 65535.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "1b0ea05ca8023a5c7dc10bb3d87cf3c08b1e4fbb47f2dae817215065d1046003"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 104,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 102,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tc <<= 16;\n\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(a * 65535.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8380f457cef7683a2376c5c7888117f7400cde310f10613ad1d40a7b0e98fea2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 105,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 103,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(a * 65535.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "529282a5fbd3e2744846c9d3aaa55b8aa0144fcafd44be934ed4a8a4d9b22875"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 105,
          "offset": 33,
          "length": 8,
          "code": {
            "startLine": 103,
            "length": 8,
            "offset": 86,
            "surroundingCode": "\tc |= (uint16_t)Math::round(b * 65535.0f);\n\tc <<= 16;\n\tc |= (uint16_t)Math::round(a * 65535.0f);\n\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "75156feb96be3694d26241408d98d565cecef89f8dd729a694750090b355b6b7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 111,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 109,
            "length": 1,
            "offset": 36,
            "surroundingCode": "\nString _to_hex(float p_val) {\n\tint v = Math::round(p_val * 255.0f);\n\tv = CLAMP(v, 0, 255);\n\tString ret;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "abed264ed028a4523acd6930cc61da9c2e49d049dcfa6e2ed78407703e5a16b1"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'float' to 'int'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 111,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 109,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\nString _to_hex(float p_val) {\n\tint v = Math::round(p_val * 255.0f);\n\tv = CLAMP(v, 0, 255);\n\tString ret;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "e5773862fba5a9971b5c8a3ab6f6d1c7778b182aef4a4b9b9e77ccf435900ab9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 111,
          "offset": 30,
          "length": 6,
          "code": {
            "startLine": 109,
            "length": 6,
            "offset": 60,
            "surroundingCode": "\nString _to_hex(float p_val) {\n\tint v = Math::round(p_val * 255.0f);\n\tv = CLAMP(v, 0, 255);\n\tString ret;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "54f8e4831ef3c414c73311c8c643447fa7eab037a85a9907733028322e6e8844"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 111,
          "offset": 30,
          "length": 6,
          "code": {
            "startLine": 109,
            "length": 6,
            "offset": 60,
            "surroundingCode": "\nString _to_hex(float p_val) {\n\tint v = Math::round(p_val * 255.0f);\n\tv = CLAMP(v, 0, 255);\n\tString ret;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "0b547272d78388bd8a85099852b5f53b0522b97739c4f766f2d5916d8e9a987f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 112,
          "offset": 18,
          "length": 3,
          "code": {
            "startLine": 110,
            "length": 3,
            "offset": 85,
            "surroundingCode": "String _to_hex(float p_val) {\n\tint v = Math::round(p_val * 255.0f);\n\tv = CLAMP(v, 0, 255);\n\tString ret;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fa9f3bf14d39d10af0883f7be0f6f27c4913169c6d783cf223518c59ae4c261b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 116,
          "offset": 3,
          "length": 8,
          "code": {
            "startLine": 114,
            "length": 8,
            "offset": 34,
            "surroundingCode": "\n\tfor (int i = 0; i < 2; i++) {\n\t\tchar32_t c[2] = { 0, 0 };\n\t\tint lv = v & 0xF;\n\t\tif (lv < 10) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "2d36d8ea8faf34e9b05af0e77772db6eaf4f834409c99534c27db2eec72973bb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 116,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 114,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\n\tfor (int i = 0; i < 2; i++) {\n\t\tchar32_t c[2] = { 0, 0 };\n\t\tint lv = v & 0xF;\n\t\tif (lv < 10) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "661573411c8edcce9cf6b069c82bdd338d5c14a4a4b3c6f1cc7834338aee97f0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'lv' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 117,
          "offset": 7,
          "length": 2,
          "code": {
            "startLine": 115,
            "length": 2,
            "offset": 65,
            "surroundingCode": "\tfor (int i = 0; i < 2; i++) {\n\t\tchar32_t c[2] = { 0, 0 };\n\t\tint lv = v & 0xF;\n\t\tif (lv < 10) {\n\t\t\tc[0] = '0' + lv;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "9b4f12c4fdf65c6b8dd8f877736cb79ad7e5f2698649889e2e9c94ab32484d70"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 117,
          "offset": 16,
          "length": 3,
          "code": {
            "startLine": 115,
            "length": 3,
            "offset": 74,
            "surroundingCode": "\tfor (int i = 0; i < 2; i++) {\n\t\tchar32_t c[2] = { 0, 0 };\n\t\tint lv = v & 0xF;\n\t\tif (lv < 10) {\n\t\t\tc[0] = '0' + lv;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3d8001c8f36be21281e1b8fb4baf31c3fbb23dbcac7c6330418b2137663fa13e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 118,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 116,
            "length": 2,
            "offset": 59,
            "surroundingCode": "\t\tchar32_t c[2] = { 0, 0 };\n\t\tint lv = v & 0xF;\n\t\tif (lv < 10) {\n\t\t\tc[0] = '0' + lv;\n\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d2c83acb2604300cedca84cf92b9e16c72e17cb32d6b4af92e257aa2eb7712c0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 121,
          "offset": 22,
          "length": 2,
          "code": {
            "startLine": 119,
            "length": 2,
            "offset": 52,
            "surroundingCode": "\t\t\tc[0] = '0' + lv;\n\t\t} else {\n\t\t\tc[0] = 'a' + lv - 10;\n\t\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ec8f6934274dfd198113e618395f55310c7d2dd23a3e2360f8e674f50766158a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cs' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 125,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 123,
            "length": 2,
            "offset": 21,
            "surroundingCode": "\n\t\tv >>= 4;\n\t\tString cs = (const char32_t *)c;\n\t\tret = cs + ret;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4e5d72964b80a54655d3404d6ba49b0b4100ba6d86e796df5baae2c888325953"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'to_html' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 132,
          "offset": 15,
          "length": 7,
          "code": {
            "startLine": 130,
            "length": 7,
            "offset": 17,
            "surroundingCode": "}\n\nString Color::to_html(bool p_alpha) const {\n\tString txt;\n\ttxt = txt + _to_hex(r);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "45862292c43640f3299488f5c06647a5fe316f2b4a96cbb351d60c6b3a72fb34"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 151,
          "offset": 15,
          "length": 4,
          "code": {
            "startLine": 149,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\tfloat delta = max - min;\n\n\tif (delta == 0.0f) {\n\t\treturn 0.0f;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "4915faf6724dbb7f8e987ca40e3deed1f041f8369de427cfe68348634dcffe70"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 152,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 150,
            "length": 4,
            "offset": 32,
            "surroundingCode": "\n\tif (delta == 0.0f) {\n\t\treturn 0.0f;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b5b080610a17ba6f4c67ae88e0d241434a4292e8d2cdaf873fda90f57196b494"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'h' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 155,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 153,
            "length": 1,
            "offset": 11,
            "surroundingCode": "\t}\n\n\tfloat h;\n\tif (r == max) {\n\t\th = (g - b) / delta; // between yellow & magenta"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "1805167dc9dd33afae4b174732702d09b0194e31c0e6f9c09c9fc40a9273e2db"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'h' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 155,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 153,
            "length": 1,
            "offset": 11,
            "surroundingCode": "\t}\n\n\tfloat h;\n\tif (r == max) {\n\t\th = (g - b) / delta; // between yellow & magenta"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b365775c8a97bb0dcde13f04964b82aad93df56c5ea7da02f2e859b67268a9f0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 164,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 162,
            "length": 4,
            "offset": 10,
            "surroundingCode": "\t}\n\n\th /= 6.0f;\n\tif (h < 0.0f) {\n\t\th += 1.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "adeec41afe36192630b95aa54b486de97044db54d8145045093e54b6933574a4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 165,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 163,
            "length": 4,
            "offset": 22,
            "surroundingCode": "\n\th /= 6.0f;\n\tif (h < 0.0f) {\n\t\th += 1.0f;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "932c719c116ca10109a0a360229aae0e548800b35522e30e775d2942ce3a3dc6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 166,
          "offset": 8,
          "length": 4,
          "code": {
            "startLine": 164,
            "length": 4,
            "offset": 36,
            "surroundingCode": "\th /= 6.0f;\n\tif (h < 0.0f) {\n\t\th += 1.0f;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "4cc8c6cc521e3daf52f8e3c8577069f51ec1db53a00736ae2ba314bc92a47ddc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 180,
          "offset": 17,
          "length": 4,
          "code": {
            "startLine": 178,
            "length": 4,
            "offset": 43,
            "surroundingCode": "\tfloat delta = max - min;\n\n\treturn (max != 0.0f) ? (delta / max) : 0.0f;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "832d103141502b06ffdf2a25cecd66f8a7ee48215cc24ee72e451a5b57dacdce"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_hsv' of similar type ('float') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 189,
          "offset": 43,
          "length": 5,
          "code": {
            "startLine": 187,
            "length": 5,
            "offset": 45,
            "surroundingCode": "}\n\nvoid Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "a9dafe57d50d36cfa2324a8a6d02f717e8cf95ac51d74e026fb6b8f8c29a1a31"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'i' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 190,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 188,
            "length": 1,
            "offset": 76,
            "surroundingCode": "\nvoid Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "e66b28d558fdef91d1fa6b6b142fb9329ca96180530bd8041de35bc8ae54f148"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'i' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 190,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 188,
            "length": 1,
            "offset": 76,
            "surroundingCode": "\nvoid Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b7413e62d6659091da8a3c864db6c9412202c32f8c9a046462e5f3775387f66f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 2,
          "length": 5,
          "code": {
            "startLine": 189,
            "length": 5,
            "offset": 79,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "94fe41254b448f3febedaa9b074d0d7e4820f260164f3f90a5887683d355be12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'f' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 85,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "c39c525eec275d1135d3b36d6a1830b0bb058c150ba182f4edbebe0969946f36"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'f' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 85,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "97f499c651ef1e1a1037b1b2b1cccff8c596006671b415a257d2958ad11842b9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'p' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 88,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "9cbab0e86691232cfee74942778c76df44fb6c55e89d3db4d53e6e9ed74f80b9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 88,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ca252d9a372a6082477f468bd694d46aa0c7bc4c66122032f4d8d5a46a76aad6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'q' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 91,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "6c2096bade30ff60b1cd049f3b5a15dd38db8359f22825065217f5446a0be570"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'q' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 91,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "55880292c30d454237a9b3c06de46e0fe23b408a370a7d5d79fd22700f23cf48"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 't' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 94,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "07d780df02be3e874172e2ad137479c6e5bb716ab27ab59ed53871ad318cde7d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 't' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 191,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 189,
            "length": 1,
            "offset": 94,
            "surroundingCode": "void Color::set_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tint i;\n\tfloat f, p, q, t;\n\ta = p_alpha;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d753f3f069b2849342abbd9e3c2baf0b392450f9db814635f448c0890ac62bc2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 194,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 192,
            "length": 4,
            "offset": 27,
            "surroundingCode": "\ta = p_alpha;\n\n\tif (p_s == 0.0f) {\n\t\t// Achromatic (gray)\n\t\tr = g = b = p_v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "776c18eaaf145673cf8f7bc76b03c4f3184f74fd5a586a668cdfb3b100253a28"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 200,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 198,
            "length": 4,
            "offset": 12,
            "surroundingCode": "\t}\n\n\tp_h *= 6.0f;\n\tp_h = Math::fmod(p_h, 6);\n\ti = Math::floor(p_h);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c720bbc974a5ddd7d5ad26e3fac87f35c4efcf4ed57c41695caf3160fffaa00c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 200,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 198,
            "length": 4,
            "offset": 12,
            "surroundingCode": "\t}\n\n\tp_h *= 6.0f;\n\tp_h = Math::fmod(p_h, 6);\n\ti = Math::floor(p_h);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "ef3479aebdc487d0ea67c9c73d2e4a93c62b452e8de36bd2347c9daf16123547"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 201,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 199,
            "length": 1,
            "offset": 38,
            "surroundingCode": "\n\tp_h *= 6.0f;\n\tp_h = Math::fmod(p_h, 6);\n\ti = Math::floor(p_h);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "160b8993cba8cf7d9c767efaa46bc76c8730c256358f2309b1865bc187cebcd3"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'float' to 'int'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 202,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 200,
            "length": 4,
            "offset": 46,
            "surroundingCode": "\tp_h *= 6.0f;\n\tp_h = Math::fmod(p_h, 6);\n\ti = Math::floor(p_h);\n\n\tf = p_h - i;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "37b17e1f13c330da7752f728f2ac63003972109992783ff3b354ca719b21f759"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int' to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 204,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 202,
            "length": 1,
            "offset": 35,
            "surroundingCode": "\ti = Math::floor(p_h);\n\n\tf = p_h - i;\n\tp = p_v * (1.0f - p_s);\n\tq = p_v * (1.0f - p_s * f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "9303708d98c063686f040b31346ba2ba5acfe55e823cfebd48b5f9757672192a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 205,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 203,
            "length": 4,
            "offset": 27,
            "surroundingCode": "\n\tf = p_h - i;\n\tp = p_v * (1.0f - p_s);\n\tq = p_v * (1.0f - p_s * f);\n\tt = p_v * (1.0f - p_s * (1.0f - f));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "eb3afad62f35a42c6aecceb8cff78af12b5ae0b085e6e9998b417c82fb632454"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 206,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 204,
            "length": 4,
            "offset": 51,
            "surroundingCode": "\tf = p_h - i;\n\tp = p_v * (1.0f - p_s);\n\tq = p_v * (1.0f - p_s * f);\n\tt = p_v * (1.0f - p_s * (1.0f - f));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "06a06d32390c93fe00613e17c8e460c539015b49d0e3beded28b2826e487105d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 207,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 205,
            "length": 4,
            "offset": 66,
            "surroundingCode": "\tp = p_v * (1.0f - p_s);\n\tq = p_v * (1.0f - p_s * f);\n\tt = p_v * (1.0f - p_s * (1.0f - f));\n\n\tswitch (i) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "26c87e003e865be8439a1b2aba57dda9da7ff55a1a2ad8d60c0113b955633235"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 256,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 254,
            "length": 4,
            "offset": 29,
            "surroundingCode": "\nvoid Color::invert() {\n\tr = 1.0f - r;\n\tg = 1.0f - g;\n\tb = 1.0f - b;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "115cfd5fb2e8c94e134f1c7f5dd23601aa0fa7b3ec19a654fb9edec355ec4da4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 257,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 255,
            "length": 4,
            "offset": 43,
            "surroundingCode": "void Color::invert() {\n\tr = 1.0f - r;\n\tg = 1.0f - g;\n\tb = 1.0f - b;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "bc109f15aa3504fd51726e813e23486a9bb1de73359ab0e87011c252c0f81d29"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 258,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 256,
            "length": 4,
            "offset": 35,
            "surroundingCode": "\tr = 1.0f - r;\n\tg = 1.0f - g;\n\tb = 1.0f - b;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c6aa76db0d2c97abcea85d2f15396ecf1040bc1bc815e9c1f0d4b65ed62b66fe"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 262,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 260,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\nColor Color::hex(uint32_t p_hex) {\n\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "38e1819a556bda01dc48dd7a39e7ae93e638dfe99c5ab00cd4fa16fed6cc8224"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 262,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 260,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\nColor Color::hex(uint32_t p_hex) {\n\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "8b95658cd1d3de5ab2adadaa1524f5332a561d8951668f6ceb46d3c8b720c380"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 262,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 260,
            "length": 4,
            "offset": 56,
            "surroundingCode": "\nColor Color::hex(uint32_t p_hex) {\n\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "44d8c82ac7e3f04c29d495ea9ebbacfc11f36183eb08d43d4526d65f256d1636"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 263,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 261,
            "length": 1,
            "offset": 82,
            "surroundingCode": "Color Color::hex(uint32_t p_hex) {\n\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9466c1dda17aef334f000110bd671643da9fecce8210ccd0aa81e9507fa68c70"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 264,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 262,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "75c774855244389bedef3d7f1d1e10491757ac2f40d64ca1a886e18badea80df"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 264,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 262,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "bd69c304bb43b9571417c49525bf92580c7c9f967e8411a7dc085987b30f0b74"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 264,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 262,
            "length": 4,
            "offset": 70,
            "surroundingCode": "\tfloat a = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f5195673957487645099743be09b369e01cce365060175873d9a9f60da25a174"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 265,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 263,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\tp_hex >>= 8;\n\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "243b87cbf9814d857d20ba4aaa2ede1b83bed8e6d61fa460ddbfb7f9f1d11730"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'g' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 266,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 264,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "48bfdf0656190b0f50e5d0d3c195546a5071fca78933b50c732e2f09267de975"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 266,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 264,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "dc17948702aff9a82474b439da99fcdf70fdaea67cf6fdafcc0a773dfcdf2f41"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 266,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 264,
            "length": 4,
            "offset": 70,
            "surroundingCode": "\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6756e9294e103dbe14cbf3f10a9816bb07f9c70e03e864794933de47c7568dbb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 266,
          "offset": 29,
          "length": 6,
          "code": {
            "startLine": 264,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "90e22af3836901d4e7efd986939d624a198c4fd697be126b189a2fedb09c851b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 266,
          "offset": 29,
          "length": 6,
          "code": {
            "startLine": 264,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\tfloat b = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "1865db12648f1653c03fc48a908e5cf961aa0d56a041d93f2233b599b3aa6f65"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 267,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 265,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\tp_hex >>= 8;\n\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "2774a871d1d28840397b32b0752eeee7ccd79bdfd47f1f2160123e622ec7c210"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 268,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 266,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "888a5481495e6da643d60f3af10d332b7378139f112b7000086bf1f9d7861ecc"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 268,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 266,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "a932a42e6c5b31ac933ea562a146779e828ded25a49f88372e82d041fc067fca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 268,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 266,
            "length": 4,
            "offset": 70,
            "surroundingCode": "\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "77db08bea17d68be0a1646479fb8650c8410869b05c1c44da4986d06012a1ce4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 268,
          "offset": 29,
          "length": 6,
          "code": {
            "startLine": 266,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\tfloat g = (p_hex & 0xFF) / 255.0f;\n\tp_hex >>= 8;\n\tfloat r = (p_hex & 0xFF) / 255.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c1257878b22a6a1c355d090f94dbd087949b010429d1d6ac995a4f34a1665cca"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 274,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 272,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\nColor Color::hex64(uint64_t p_hex) {\n\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "13098e01a1fe2a0bc707c884d38cabeaa6c5a261ce70ce72d93c59c6e934d25e"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 274,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 272,
            "length": 1,
            "offset": 49,
            "surroundingCode": "\nColor Color::hex64(uint64_t p_hex) {\n\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2dd0b2f321105de3dd31a217266fef1a99a8930aa227f34cd7f1f74a8642a088"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFFFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 274,
          "offset": 21,
          "length": 6,
          "code": {
            "startLine": 272,
            "length": 6,
            "offset": 58,
            "surroundingCode": "\nColor Color::hex64(uint64_t p_hex) {\n\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9d666f318c195bce5fd461756921281048577f1008c5151f59633b276be67a8c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 274,
          "offset": 31,
          "length": 8,
          "code": {
            "startLine": 272,
            "length": 8,
            "offset": 68,
            "surroundingCode": "\nColor Color::hex64(uint64_t p_hex) {\n\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d1602f17277aa533a91f0c352f031c4710eaff5754a6c4470c97ac43b085ac24"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 275,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 273,
            "length": 2,
            "offset": 88,
            "surroundingCode": "Color Color::hex64(uint64_t p_hex) {\n\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4bdd69cd03938544478342969ea37e3984114ef3d5efd4cdc98d8ca438e891ad"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 276,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 274,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "09bcf44e25aeda438301981f927b7e57e7f7de7e5309a51dbcd19f36f5d22d8d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 276,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 274,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "d45396f9c5ba9543ceab1654dfb28ca91b3abb1d4c992fdcecd6c0deddd999b1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFFFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 276,
          "offset": 21,
          "length": 6,
          "code": {
            "startLine": 274,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "495dee831ebefddcc41ed184098cb51ae0efe84a73063a0f645d1e0498343dd7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 276,
          "offset": 31,
          "length": 8,
          "code": {
            "startLine": 274,
            "length": 8,
            "offset": 85,
            "surroundingCode": "\tfloat a = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8e614c9ff0d8a8db7485dd7005d16745aaf9d581a7feb47bf77198890188041f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 277,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 275,
            "length": 2,
            "offset": 66,
            "surroundingCode": "\tp_hex >>= 16;\n\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5b8d3e570a8d859b9d37884f365de684f745ec37d094c4629b3aae67e833da9a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'g' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 278,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 276,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "944088c1a342bb186af46ee329a9a585c618b99655f86ee19c819343bdaab61e"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 278,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 276,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "c6363a2121b089f396e70980a1942a37086c39c0d4de0ffc0926fc68f8a29367"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFFFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 278,
          "offset": 21,
          "length": 6,
          "code": {
            "startLine": 276,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9ecbde7dd7b8e247ed072e7fa4b145f3bead0af27cbc4f23ebd3ab8cba8ab9fc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 278,
          "offset": 31,
          "length": 8,
          "code": {
            "startLine": 276,
            "length": 8,
            "offset": 85,
            "surroundingCode": "\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "50bed269d0bb4c1acae080a3e4fa75f83228f88154d6c56a8e79e519f41dcf59"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 278,
          "offset": 31,
          "length": 8,
          "code": {
            "startLine": 276,
            "length": 8,
            "offset": 85,
            "surroundingCode": "\tfloat b = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "6583aca3c88f6e3ba17c5500e02eca36b95dc2d98ac7cc0030b03cc2e50ebb4b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 279,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 277,
            "length": 2,
            "offset": 66,
            "surroundingCode": "\tp_hex >>= 16;\n\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "bc044a455e16d68579376bbd9bd5866a856da4a78a142b3b19e80c04f0b0f2d7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 280,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 278,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "48988c41b673ac97d4d3d71f057a75c19836b7569ff2dbcfccc81391641848c5"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 280,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 278,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "d52f563c33d006c37e7c6e5a1f93c1dc83772e482bcc23b74f462ce819e6ae15"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0xFFFF is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 280,
          "offset": 21,
          "length": 6,
          "code": {
            "startLine": 278,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8d8100d62311c60c2b275820b8ce3995e81a086616807da7cc6b105afbb51492"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "65535.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 280,
          "offset": 31,
          "length": 8,
          "code": {
            "startLine": 278,
            "length": 8,
            "offset": 85,
            "surroundingCode": "\tfloat g = (p_hex & 0xFFFF) / 65535.0f;\n\tp_hex >>= 16;\n\tfloat r = (p_hex & 0xFFFF) / 65535.0f;\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f47c51950b12e625e46fb7ea820f7642efd3b03ded31a9123348df3da35b990b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'character' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 286,
          "offset": 7,
          "length": 9,
          "code": {
            "startLine": 284,
            "length": 9,
            "offset": 64,
            "surroundingCode": "\nstatic int _parse_col4(const String &p_str, int p_ofs) {\n\tchar character = p_str[p_ofs];\n\n\tif (character >= '0' && character <= '9') {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "ad559a04539e95e7cffea82d30b9b27cfea3b26db62c64f5cb28d6a52183eac7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 290,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 288,
            "length": 4,
            "offset": 74,
            "surroundingCode": "\tif (character >= '0' && character <= '9') {\n\t\treturn character - '0';\n\t} else if (character >= 'a' && character <= 'f') {\n\t\treturn character + (10 - 'a');\n\t} else if (character >= 'A' && character <= 'F') {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "5e0d5e7e1af789da8abaa9585f499acbadf8ade90a8551e5ba1e9c74a1eeb0c0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 291,
          "offset": 23,
          "length": 2,
          "code": {
            "startLine": 289,
            "length": 2,
            "offset": 100,
            "surroundingCode": "\t\treturn character - '0';\n\t} else if (character >= 'a' && character <= 'f') {\n\t\treturn character + (10 - 'a');\n\t} else if (character >= 'A' && character <= 'F') {\n\t\treturn character + (10 - 'A');"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "2e0e3a934a63cd2f6010acd15607401ba5c9b916825c493a8444e0b693271da6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 293,
          "offset": 23,
          "length": 2,
          "code": {
            "startLine": 291,
            "length": 2,
            "offset": 107,
            "surroundingCode": "\t\treturn character + (10 - 'a');\n\t} else if (character >= 'A' && character <= 'F') {\n\t\treturn character + (10 - 'A');\n\t}\n\treturn -1;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "30409d018881c09119e2ddb3bc9c6e8ac7ebd7d00eea0b2a5b5616433a0fc25c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 299,
          "offset": 9,
          "length": 11,
          "code": {
            "startLine": 297,
            "length": 11,
            "offset": 66,
            "surroundingCode": "\nstatic int _parse_col8(const String &p_str, int p_ofs) {\n\treturn _parse_col4(p_str, p_ofs) * 16 + _parse_col4(p_str, p_ofs + 1);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "60cfda590a4ebaeb47dd7dea3e22655a79dde1a061dff0b1cfba347603151000"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "16 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 299,
          "offset": 37,
          "length": 2,
          "code": {
            "startLine": 297,
            "length": 2,
            "offset": 94,
            "surroundingCode": "\nstatic int _parse_col8(const String &p_str, int p_ofs) {\n\treturn _parse_col4(p_str, p_ofs) * 16 + _parse_col4(p_str, p_ofs + 1);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "192d4b465802277d19ba5afad08c6db1d5b56607509d67b7d8b34d783c3a1257"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 303,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 301,
            "length": 1,
            "offset": 40,
            "surroundingCode": "\nColor Color::inverted() const {\n\tColor c = *this;\n\tc.invert();\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6de8351c9c7a349e135cab7383adb2a33624e6225d195e92f20f3e33441b74b7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 319,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 317,
            "length": 1,
            "offset": 174,
            "surroundingCode": "\t// If enabled, use 1 hex digit per channel instead of 2.\n\t// Other sizes aren't in the HTML/CSS spec but we could add them if desired.\n\tbool is_shorthand = color.length() < 5;\n\tbool alpha = false;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b4f1f572bb50e46a19cf951fd51fbbf1259a395acbc074283043b650e712bf20"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 322,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 320,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tbool alpha = false;\n\n\tif (color.length() == 8) {\n\t\talpha = true;\n\t} else if (color.length() == 6) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5b9c56c4047d28e8a6df649c3fc93cf08825da35ccd1390908cc2c17802dbfc3"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "branch-clone",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "repeated branch body in conditional chain",
      "detailsInfo": "branch-clone",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 322,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 320,
            "length": 1,
            "offset": 48,
            "surroundingCode": "\tbool alpha = false;\n\n\tif (color.length() == 8) {\n\t\talpha = true;\n\t} else if (color.length() == 6) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-branch-clone"
      },
      "hash": "ae67ef7369bf6fd1c3ca7f5e293e121994b265bbae95d35a053e700b06d682ab"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 324,
          "offset": 31,
          "length": 1,
          "code": {
            "startLine": 322,
            "length": 1,
            "offset": 74,
            "surroundingCode": "\tif (color.length() == 8) {\n\t\talpha = true;\n\t} else if (color.length() == 6) {\n\t\talpha = false;\n\t} else if (color.length() == 4) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "720c4e924cc40319563afa47f8d82d583205243a148860ebba2906d2837ffce3"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "branch-clone",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "repeated branch body in conditional chain",
      "detailsInfo": "branch-clone",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 324,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 322,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\tif (color.length() == 8) {\n\t\talpha = true;\n\t} else if (color.length() == 6) {\n\t\talpha = false;\n\t} else if (color.length() == 4) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-branch-clone"
      },
      "hash": "64c30758b9ec8ee7d8122c210bc4d773239140e1eae3e117a9ab71181b53309a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 2,
          "length": 5,
          "code": {
            "startLine": 332,
            "length": 5,
            "offset": 5,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "ed7c0e71a3de0240c666f7f012a62df06c9e2b332c2c503b2d202a1390fabc1a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'r' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 11,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "19fc5662b6bb040c5d90eac62f2bcfd79ff81b8cec1b1cf1e7315417e025f73c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 11,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3bbf30fb6beddccd339d3d548a1651bf55189a99b62f64d63fbfe4705871c59a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'g' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 14,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "931f024519e191fcb51e08b3d75222a1a0434ad54ee2b6f3d5b934a6b3ae6a4d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'g' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 14,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a6bef87672b98fd393a0686771f4c01b7ed8748385092d800e101c0f31515201"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'b' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 17,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "85870f170b67df589426c997d23eae6d209645a4ca32cbc6cdeded0884a50a0e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 17,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ad0409f28d80565abac9218b247c449041c3f113d3781866d4eb0179ab2c282c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 334,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 332,
            "length": 1,
            "offset": 20,
            "surroundingCode": "\t}\n\n\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c64f7a1fb452d16b2a8e03ab40aadce94ed352f54eee71b5b8132a71c8aff2c3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 336,
          "offset": 31,
          "length": 5,
          "code": {
            "startLine": 334,
            "length": 5,
            "offset": 77,
            "surroundingCode": "\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;\n\t\tg = _parse_col4(color, 1) / 15.0f;\n\t\tb = _parse_col4(color, 2) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fd8743794d0c935e471757bdd1eaaad3f4a2677a3f5195a231388f2599d2b5eb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 336,
          "offset": 31,
          "length": 5,
          "code": {
            "startLine": 334,
            "length": 5,
            "offset": 77,
            "surroundingCode": "\tfloat r, g, b, a = 1.0f;\n\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;\n\t\tg = _parse_col4(color, 1) / 15.0f;\n\t\tb = _parse_col4(color, 2) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "e64035dc2beae19f295a187d0d697847487134526f7e4f4e8611dc36d2249fb6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 337,
          "offset": 31,
          "length": 5,
          "code": {
            "startLine": 335,
            "length": 5,
            "offset": 88,
            "surroundingCode": "\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;\n\t\tg = _parse_col4(color, 1) / 15.0f;\n\t\tb = _parse_col4(color, 2) / 15.0f;\n\t\tif (alpha) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "72ad9e31f075cf5819903ac7a25fb9c59f863c6d266836303ccd33ab63f0bd22"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 337,
          "offset": 31,
          "length": 5,
          "code": {
            "startLine": 335,
            "length": 5,
            "offset": 88,
            "surroundingCode": "\tif (is_shorthand) {\n\t\tr = _parse_col4(color, 0) / 15.0f;\n\t\tg = _parse_col4(color, 1) / 15.0f;\n\t\tb = _parse_col4(color, 2) / 15.0f;\n\t\tif (alpha) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a5395b639a92998b236c7da9fed5345373d48057abbcf7e89d0a46f42db30b6f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 338,
          "offset": 31,
          "length": 5,
          "code": {
            "startLine": 336,
            "length": 5,
            "offset": 104,
            "surroundingCode": "\t\tr = _parse_col4(color, 0) / 15.0f;\n\t\tg = _parse_col4(color, 1) / 15.0f;\n\t\tb = _parse_col4(color, 2) / 15.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col4(color, 3) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "05772a19036a8d509be8a609006cbef93dab8c5d1e4318d83623fab903e0e638"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 338,
          "offset": 31,
          "length": 5,
          "code": {
            "startLine": 336,
            "length": 5,
            "offset": 104,
            "surroundingCode": "\t\tr = _parse_col4(color, 0) / 15.0f;\n\t\tg = _parse_col4(color, 1) / 15.0f;\n\t\tb = _parse_col4(color, 2) / 15.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col4(color, 3) / 15.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "7aa58f1392de231c0a5f43654c416b6c17112a3613e015f3f6af552a91ad4195"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 340,
          "offset": 32,
          "length": 5,
          "code": {
            "startLine": 338,
            "length": 5,
            "offset": 83,
            "surroundingCode": "\t\tb = _parse_col4(color, 2) / 15.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col4(color, 3) / 15.0f;\n\t\t}\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b0ac3eb4f04d08480441f3faff1bd52a1951bd85757c0adbc8527211d4836092"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 340,
          "offset": 32,
          "length": 5,
          "code": {
            "startLine": 338,
            "length": 5,
            "offset": 83,
            "surroundingCode": "\t\tb = _parse_col4(color, 2) / 15.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col4(color, 3) / 15.0f;\n\t\t}\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9c50e317a0d4d0d2cf37b993af6bf90fe88353ff41f359e1403ca5afa2a52064"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 343,
          "offset": 31,
          "length": 6,
          "code": {
            "startLine": 341,
            "length": 6,
            "offset": 44,
            "surroundingCode": "\t\t}\n\t} else {\n\t\tr = _parse_col8(color, 0) / 255.0f;\n\t\tg = _parse_col8(color, 2) / 255.0f;\n\t\tb = _parse_col8(color, 4) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e4ccccdc1848928b1c3599d570d9d5e0d79bf5e1f8872a91f711d751c973e544"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 343,
          "offset": 31,
          "length": 6,
          "code": {
            "startLine": 341,
            "length": 6,
            "offset": 44,
            "surroundingCode": "\t\t}\n\t} else {\n\t\tr = _parse_col8(color, 0) / 255.0f;\n\t\tg = _parse_col8(color, 2) / 255.0f;\n\t\tb = _parse_col8(color, 4) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "5f6047fc65e8b908de86f577a1c3c5bfbb26292de334a1345382eeafa94122b5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 344,
          "offset": 31,
          "length": 6,
          "code": {
            "startLine": 342,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\t} else {\n\t\tr = _parse_col8(color, 0) / 255.0f;\n\t\tg = _parse_col8(color, 2) / 255.0f;\n\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4950d280727057e65ba829eadb028680c785c3df8dbf4334d398c9143bfb9657"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 344,
          "offset": 31,
          "length": 6,
          "code": {
            "startLine": 342,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\t} else {\n\t\tr = _parse_col8(color, 0) / 255.0f;\n\t\tg = _parse_col8(color, 2) / 255.0f;\n\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "7dcbc2bd5ea1fca7f6558e6cb8467f1aa5a90ec6d284cf841b2cc7ffd10d49de"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 345,
          "offset": 31,
          "length": 6,
          "code": {
            "startLine": 343,
            "length": 6,
            "offset": 106,
            "surroundingCode": "\t\tr = _parse_col8(color, 0) / 255.0f;\n\t\tg = _parse_col8(color, 2) / 255.0f;\n\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col8(color, 6) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4f360b2c7a229826b83d99cd34613a7d2bfd26e1addfab6af9569d79c526c587"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 345,
          "offset": 31,
          "length": 6,
          "code": {
            "startLine": 343,
            "length": 6,
            "offset": 106,
            "surroundingCode": "\t\tr = _parse_col8(color, 0) / 255.0f;\n\t\tg = _parse_col8(color, 2) / 255.0f;\n\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col8(color, 6) / 255.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "97f98f48f739d1bf4beac5ce63ac8df7f60cf5c9a938abfcb8ceec607a62ca87"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 347,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 345,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col8(color, 6) / 255.0f;\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "241676bffba1796b94395f3e692a1add47622fefd2401b83bfe8d0f24e8b5b02"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "255.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 347,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 345,
            "length": 6,
            "offset": 84,
            "surroundingCode": "\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col8(color, 6) / 255.0f;\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6dc7b16d4e78688e5aaa51f39607823c1e9cb5c58eb35c85b561febe0649a9de"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 347,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 345,
            "length": 6,
            "offset": 84,
            "surroundingCode": "\t\tb = _parse_col8(color, 4) / 255.0f;\n\t\tif (alpha) {\n\t\t\ta = _parse_col8(color, 6) / 255.0f;\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "0670901c305e77685586744f2f5c9741c9cac5c7952d70a77cf5d338f736c807"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 350,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 348,
            "length": 4,
            "offset": 32,
            "surroundingCode": "\t\t}\n\t}\n\tERR_FAIL_COND_V_MSG(r < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(g < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(b < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "834fad4580467f81916b2e26d26f1d9f977bc142248b8f92d4efe2971ddd0d47"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 351,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 349,
            "length": 4,
            "offset": 108,
            "surroundingCode": "\t}\n\tERR_FAIL_COND_V_MSG(r < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(g < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(b < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(a < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "109b4f19dd8d56d29878b8016cfa9afe6b4457ecc6b53bcd1f4047b9eacff61d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 352,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 350,
            "length": 4,
            "offset": 185,
            "surroundingCode": "\tERR_FAIL_COND_V_MSG(r < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(g < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(b < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(a < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "381a9da2892bfb819ffd0c0078d3a8549c0763f127a2b893f76bd3212f12f9f8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 353,
          "offset": 26,
          "length": 4,
          "code": {
            "startLine": 351,
            "length": 4,
            "offset": 185,
            "surroundingCode": "\tERR_FAIL_COND_V_MSG(g < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(b < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\tERR_FAIL_COND_V_MSG(a < 0.0f, Color(), \"Invalid color code: \" + p_rgba + \".\");\n\n\treturn Color(r, g, b, a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "72cfa51b20bd6ba6e9869f345ddbf2fbc85fbc9d226fb831d3ddfffca28190bc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "simplify-boolean-expr",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "boolean expression can be simplified by DeMorgan's theorem",
      "detailsInfo": "simplify-boolean-expr",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 370,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 368,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\t// Check if the amount of hex digits is valid.\n\tint len = color.length();\n\tif (!(len == 3 || len == 4 || len == 6 || len == 8)) {\n\t\treturn false;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-simplify-boolean-expr"
      },
      "hash": "443655fa7953b290305f5055247b8c0f73071de84597ea5f74bcecceadb029cc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 370,
          "offset": 39,
          "length": 1,
          "code": {
            "startLine": 368,
            "length": 1,
            "offset": 113,
            "surroundingCode": "\t// Check if the amount of hex digits is valid.\n\tint len = color.length();\n\tif (!(len == 3 || len == 4 || len == 6 || len == 8)) {\n\t\treturn false;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8567c5cce2c1998938bae41254442bcfa52af255611af596a983b38d4d679968"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 370,
          "offset": 51,
          "length": 1,
          "code": {
            "startLine": 368,
            "length": 1,
            "offset": 125,
            "surroundingCode": "\t// Check if the amount of hex digits is valid.\n\tint len = color.length();\n\tif (!(len == 3 || len == 4 || len == 6 || len == 8)) {\n\t\treturn false;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c5e8e32424d7f1b8c58cef38aa0c3129f2ad8b71de2e173fb0d91ecded692a57"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 390,
          "offset": 9,
          "length": 12,
          "code": {
            "startLine": 388,
            "length": 12,
            "offset": 29,
            "surroundingCode": "\t\treturn Color();\n\t}\n\treturn named_colors[idx].color;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "fd0ae560d23a268c46154aa52057185684d28531fbc3624f77123b4cb1bedc25"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'named' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 393,
          "offset": 20,
          "length": 5,
          "code": {
            "startLine": 391,
            "length": 5,
            "offset": 22,
            "surroundingCode": "}\n\nColor Color::named(const String &p_name, const Color &p_default) {\n\tint idx = find_named_color(p_name);\n\tif (idx == -1) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "e4c937383ac242b1027849d910e91fbcad66c7788b33f93a0775891d8c4d4a92"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 398,
          "offset": 9,
          "length": 12,
          "code": {
            "startLine": 396,
            "length": 12,
            "offset": 31,
            "surroundingCode": "\t\treturn p_default;\n\t}\n\treturn named_colors[idx].color;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "ae43079ed4e5fa1b681be5a642fdb8e0454911dd6ff4d82ab4dafd3b306c092a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 412,
          "offset": 9,
          "length": 12,
          "code": {
            "startLine": 410,
            "length": 12,
            "offset": 23,
            "surroundingCode": "\n\tint idx = 0;\n\twhile (named_colors[idx].name != nullptr) {\n\t\tif (name == String(named_colors[idx].name).replace(\"_\", \"\")) {\n\t\t\treturn idx;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "d0470aa0243400c60ba273e232400ff90d0b5c21949e036ce49c3e9ef03481e6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 413,
          "offset": 22,
          "length": 12,
          "code": {
            "startLine": 411,
            "length": 12,
            "offset": 80,
            "surroundingCode": "\tint idx = 0;\n\twhile (named_colors[idx].name != nullptr) {\n\t\tif (name == String(named_colors[idx].name).replace(\"_\", \"\")) {\n\t\t\treturn idx;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a2f60ee66e652cb9be406bdfe40d7a4ab31c41e07198e537091a565be2e0a046"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 424,
          "offset": 9,
          "length": 12,
          "code": {
            "startLine": 422,
            "length": 12,
            "offset": 59,
            "surroundingCode": "int Color::get_named_color_count() {\n\tint idx = 0;\n\twhile (named_colors[idx].name != nullptr) {\n\t\tidx++;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "81e326a5e7463e271511da539837d06dfefd65fde83fda8587c212951056ed4e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 432,
          "offset": 9,
          "length": 12,
          "code": {
            "startLine": 430,
            "length": 12,
            "offset": 111,
            "surroundingCode": "String Color::get_named_color_name(int p_idx) {\n\tERR_FAIL_INDEX_V(p_idx, get_named_color_count(), \"\");\n\treturn named_colors[p_idx].name;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "bf3d1988183cd5ed02dd3ab75af08228a5b291f95fa86edfe66e43cfbbd90e91"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 437,
          "offset": 9,
          "length": 12,
          "code": {
            "startLine": 435,
            "length": 12,
            "offset": 110,
            "surroundingCode": "Color Color::get_named_color(int p_idx) {\n\tERR_FAIL_INDEX_V(p_idx, get_named_color_count(), Color());\n\treturn named_colors[p_idx].color;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "1fb6ecbd292fe258e74a9aef825011eb4287292ec73079c6ec749840d3aae91b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 445,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 443,
            "length": 4,
            "offset": 60,
            "surroundingCode": "\tif (html_is_valid(p_string)) {\n\t\treturn html(p_string);\n\t} else {\n\t\treturn named(p_string, p_default);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "2e32c854050172e4d7938099a90ae770c569b5ceb52fb1e217d5a1dd4fee3270"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 451,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 449,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\nColor Color::from_hsv(float p_h, float p_s, float p_v, float p_alpha) {\n\tColor c;\n\tc.set_hsv(p_h, p_s, p_v, p_alpha);\n\treturn c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5fa5694e90e3af6ca482628a18c1189bbb2035486893005bb0f43e92d84f5787"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 457,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 455,
            "length": 1,
            "offset": 54,
            "surroundingCode": "\nColor Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "bb739decb3f7ce731e0432aa89f172c5fdd21975d0c6e0d96df0dee8d1cc234f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 457,
          "offset": 12,
          "length": 6,
          "code": {
            "startLine": 455,
            "length": 6,
            "offset": 58,
            "surroundingCode": "\nColor Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "13fd40343c4a0e4337b9dfacace14676f68c2fdc27aea371b7d68f392e5cfa53"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0x1ff is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 457,
          "offset": 21,
          "length": 5,
          "code": {
            "startLine": 455,
            "length": 5,
            "offset": 67,
            "surroundingCode": "\nColor Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "cc49c5b42fc1633ae50b1dec67fef27a9d10ebc27878c82dbe31a9b581fba114"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'g' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 458,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 456,
            "length": 1,
            "offset": 80,
            "surroundingCode": "Color Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "31078b3b02b39b131e311374411776dc91befdc94069501cf79c2fd72425285f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 458,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 456,
            "length": 1,
            "offset": 84,
            "surroundingCode": "Color Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "1058f90b118cdeed9aeb9d934cdd5681e70b6f098da0152fdb8ee4cb52eb5a0e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 458,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 456,
            "length": 1,
            "offset": 95,
            "surroundingCode": "Color Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e1baa65d27455025e2993ae021cfa79e774cfc5ed084878c871008fb77dbd315"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0x1ff is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 458,
          "offset": 28,
          "length": 5,
          "code": {
            "startLine": 456,
            "length": 5,
            "offset": 100,
            "surroundingCode": "Color Color::from_rgbe9995(uint32_t p_rgbe) {\n\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "eb14fba47c86766b1369b29eb9af0441f9c3ed671b1fe3242584f6103e4a3f03"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 459,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 457,
            "length": 1,
            "offset": 68,
            "surroundingCode": "\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8e13ca4568eae6678d7d3131f56bca0e10faa274a65561ea26a9087b2e0e4fb5"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 459,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 457,
            "length": 1,
            "offset": 72,
            "surroundingCode": "\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "b2746a6dfd07522219dbcf5cd50515218caa6100d6ccfaae1605833d290b0775"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "18 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 459,
          "offset": 23,
          "length": 2,
          "code": {
            "startLine": 457,
            "length": 2,
            "offset": 83,
            "surroundingCode": "\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "dbaf41dda913f303f6becea8b6c962981f21557b200d09e99951e9f508f38bb8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0x1ff is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 459,
          "offset": 29,
          "length": 5,
          "code": {
            "startLine": 457,
            "length": 5,
            "offset": 89,
            "surroundingCode": "\tfloat r = p_rgbe & 0x1ff;\n\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "45b3acdaa89b308a6509c990c4309bc40b6b417930377e503ebdb2395ad308e1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'e' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 460,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 458,
            "length": 1,
            "offset": 76,
            "surroundingCode": "\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cdc2f0e9377c155bb8f5b704fbb3eec5b1518a6e8c1c60c6dd0ece5c9918ec66"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 460,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 458,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "491753d68b85547f367ac1a38ba2f469b1d975bfb8fcc07d0c4c09ae03f003c7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "27 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 460,
          "offset": 23,
          "length": 2,
          "code": {
            "startLine": 458,
            "length": 2,
            "offset": 91,
            "surroundingCode": "\tfloat g = (p_rgbe >> 9) & 0x1ff;\n\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b1bb2532925d11bc4558b112fb1c4c9776bbcce73d2bac9f7c57b90332aac31b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 461,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 459,
            "length": 1,
            "offset": 69,
            "surroundingCode": "\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "fb6c764aead82429aa18f32d38f55a60bdc91acd813e19729d978918a29eb3e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 461,
          "offset": 22,
          "length": 4,
          "code": {
            "startLine": 459,
            "length": 4,
            "offset": 83,
            "surroundingCode": "\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "74b16d5b29977ca51a7bc6105c962deea73cfd93c343ff71ec1667d91d0ac897"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 461,
          "offset": 22,
          "length": 4,
          "code": {
            "startLine": 459,
            "length": 4,
            "offset": 83,
            "surroundingCode": "\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "f7c4d35f8afe5254f3c59ab27a83c03b45b2386c2dfb451c7a30a9f87bbea84d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 461,
          "offset": 32,
          "length": 5,
          "code": {
            "startLine": 459,
            "length": 5,
            "offset": 93,
            "surroundingCode": "\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "86ac61d0f4233a9cc44b165535ac800a0ac6fa60d2280c81691bf18b1e147349"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 461,
          "offset": 32,
          "length": 5,
          "code": {
            "startLine": 459,
            "length": 5,
            "offset": 93,
            "surroundingCode": "\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "23cd2b7762f53afca850d1af5296145a0003390046750079b2ec04667f95af1f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 461,
          "offset": 40,
          "length": 4,
          "code": {
            "startLine": 459,
            "length": 4,
            "offset": 101,
            "surroundingCode": "\tfloat b = (p_rgbe >> 18) & 0x1ff;\n\tfloat e = (p_rgbe >> 27);\n\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "1b4aeb321b7b956d8a555db308aea696685cb36d1bed8bc9e00ab0fb187cf47d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'rd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 463,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 461,
            "length": 2,
            "offset": 54,
            "surroundingCode": "\tfloat m = Math::pow(2.0f, e - 15.0f - 9.0f);\n\n\tfloat rd = r * m;\n\tfloat gd = g * m;\n\tfloat bd = b * m;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2ce5c8cc70b5918dfae4e723141e51d5fa3884cd8a8043cd2986c61dba9158f2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'gd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 464,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 462,
            "length": 2,
            "offset": 27,
            "surroundingCode": "\n\tfloat rd = r * m;\n\tfloat gd = g * m;\n\tfloat bd = b * m;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3c32ef19fa0bb79cff01429ec0e15e3cef6268ff7488b301ab58c36d8ab92e8f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'bd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 465,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 463,
            "length": 2,
            "offset": 45,
            "surroundingCode": "\tfloat rd = r * m;\n\tfloat gd = g * m;\n\tfloat bd = b * m;\n\n\treturn Color(rd, gd, bd, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c4170fad2729455ef40ab535bacab902ba7e64a86f0de35c4a28523f89cd5090"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 467,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 465,
            "length": 4,
            "offset": 46,
            "surroundingCode": "\tfloat bd = b * m;\n\n\treturn Color(rd, gd, bd, 1.0f);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "18bc143bc94d66bd1a23bc7fca086c5f4e0a92fa2517a0e6f3ed6ecdaad46b9d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 566,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 564,
            "length": 4,
            "offset": 51,
            "surroundingCode": "Color Color::operator-() const {\n\treturn Color(\n\t\t\t1.0f - r,\n\t\t\t1.0f - g,\n\t\t\t1.0f - b,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "081608f160835b40262f5fdcdd26b4d7085d8055d0ae5a50d0edac9f89d386a5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 567,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 565,
            "length": 4,
            "offset": 31,
            "surroundingCode": "\treturn Color(\n\t\t\t1.0f - r,\n\t\t\t1.0f - g,\n\t\t\t1.0f - b,\n\t\t\t1.0f - a);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "05316be8d81fffd773c2cbcf0dad0a76b8c6f750f8a1324fdedf89f0f241cfb9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 568,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 566,
            "length": 4,
            "offset": 29,
            "surroundingCode": "\t\t\t1.0f - r,\n\t\t\t1.0f - g,\n\t\t\t1.0f - b,\n\t\t\t1.0f - a);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9d47a600a5479fa6de266bfea3d60232b49faf910b71d9ef0b92e2eafef733ce"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/color.cpp",
          "line": 569,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 567,
            "length": 4,
            "offset": 29,
            "surroundingCode": "\t\t\t1.0f - g,\n\t\t\t1.0f - b,\n\t\t\t1.0f - a);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "241c26178df4b9afe4b9a4ee5498690107cb4c6693c31c4c9c8a39d13d16e117"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'l' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 43,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 41,
            "length": 1,
            "offset": 35,
            "surroundingCode": "\nvoid Plane::normalize() {\n\treal_t l = normal.length();\n\tif (l == 0) {\n\t\t*this = Plane(0, 0, 0, 0);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3921cf767330f53b2173393e25354408e67c8813f4f870022c6ca324c3ec2c05"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 53,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 51,
            "length": 1,
            "offset": 42,
            "surroundingCode": "\nPlane Plane::normalized() const {\n\tPlane p = *this;\n\tp.normalize();\n\treturn p;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a1c878423edc79e6dc6b18f478069414a9e9f119b672b9542538ce6a04a1cb8e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 59,
          "offset": 23,
          "length": 2,
          "code": {
            "startLine": 57,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\nVector3 Plane::get_any_perpendicular_normal() const {\n\tstatic const Vector3 p1 = Vector3(1, 0, 0);\n\tstatic const Vector3 p2 = Vector3(0, 1, 0);\n\tVector3 p;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "10eb84e1296a6f66529b952866d7b33131da4fc4b0dc53bf2f7787e7a4925330"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 60,
          "offset": 23,
          "length": 2,
          "code": {
            "startLine": 58,
            "length": 2,
            "offset": 121,
            "surroundingCode": "Vector3 Plane::get_any_perpendicular_normal() const {\n\tstatic const Vector3 p1 = Vector3(1, 0, 0);\n\tstatic const Vector3 p2 = Vector3(0, 1, 0);\n\tVector3 p;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "eb1fc6c52a7129cac8b955d96d1d1e0d0ac670ef5e79ff63a621b082549741ff"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 61,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 59,
            "length": 1,
            "offset": 99,
            "surroundingCode": "\tstatic const Vector3 p1 = Vector3(1, 0, 0);\n\tstatic const Vector3 p2 = Vector3(0, 1, 0);\n\tVector3 p;\n\n\tif (Math::abs(normal.dot(p1)) > 0.99f) { // if too similar to p1"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5494fad47d1c409ff2ad2271fa75282920e16491cabf811e4e5f88b65c49b2b0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.99f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 63,
          "offset": 34,
          "length": 5,
          "code": {
            "startLine": 61,
            "length": 5,
            "offset": 46,
            "surroundingCode": "\tVector3 p;\n\n\tif (Math::abs(normal.dot(p1)) > 0.99f) { // if too similar to p1\n\t\tp = p2; // use p2\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "aa17df3a2c704d401e8706aaa59ed5e7fd9d70fe68b336fb1d2830a4ecd0077c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 63,
          "offset": 34,
          "length": 5,
          "code": {
            "startLine": 61,
            "length": 5,
            "offset": 46,
            "surroundingCode": "\tVector3 p;\n\n\tif (Math::abs(normal.dot(p1)) > 0.99f) { // if too similar to p1\n\t\tp = p2; // use p2\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "874575f048f4f5f214bb56e80dc17deab019c38921b79522e047fae12b024b90"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Vector3 *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 89,
          "offset": 6,
          "length": 8,
          "code": {
            "startLine": 87,
            "length": 8,
            "offset": 9,
            "surroundingCode": "\t}\n\n\tif (r_result) {\n\t\t*r_result = ((vec3_cross(normal1, normal2) * p_plane0.d) +\n\t\t\t\t\t\t\t(vec3_cross(normal2, normal0) * p_plane1.d) +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "ffb3f8a82893b8a939c99831c33175c48a6abac40f81d75d67dd5ec707b0e741"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'intersects_ray' of similar type ('const Vector3 &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 99,
          "offset": 28,
          "length": 5,
          "code": {
            "startLine": 97,
            "length": 5,
            "offset": 30,
            "surroundingCode": "}\n\nbool Plane::intersects_ray(const Vector3 &p_from, const Vector3 &p_dir, Vector3 *p_intersection) const {\n\tVector3 segment = p_dir;\n\treal_t den = normal.dot(segment);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "7ee67d08af63b56e102963eb872f8efb3736d4e878f5684423db5d562c9f8d8e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 134,
          "offset": 45,
          "length": 4,
          "code": {
            "startLine": 132,
            "length": 4,
            "offset": 77,
            "surroundingCode": "\t//printf(\"dist is %i\\n\",dist);\n\n\tif (dist < (real_t)-CMP_EPSILON || dist > (1.0f + (real_t)CMP_EPSILON)) {\n\t\treturn false;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "998a93d73547b101c661f1c69244118194c691c667c8b4e1202674b15a9e52ed"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 148,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 146,
            "length": 4,
            "offset": 69,
            "surroundingCode": "\tif (intersect_3(p_plane1, p_plane2, &inters)) {\n\t\treturn inters;\n\t} else {\n\t\treturn Variant();\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "3f8db94d8fd5a30200a230afeb8e7b53fc9115eaf404dd05d3f8ae5ae09669d5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 157,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 155,
            "length": 4,
            "offset": 67,
            "surroundingCode": "\tif (intersects_ray(p_from, p_dir, &inters)) {\n\t\treturn inters;\n\t} else {\n\t\treturn Variant();\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "0cee2adea0364cede0faf9495d051891817a8a9e8d1fa0c1607572d51812525e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/plane.cpp",
          "line": 166,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 164,
            "length": 4,
            "offset": 72,
            "surroundingCode": "\tif (intersects_segment(p_begin, p_end, &inters)) {\n\t\treturn inters;\n\t} else {\n\t\treturn Variant();\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "29bf35ce6bfc02daaefff86d403066d55ad8a81a4835f8e6349e32bc800632fd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 43,
          "offset": 9,
          "length": 7,
          "code": {
            "startLine": 41,
            "length": 7,
            "offset": 49,
            "surroundingCode": "\nfloat Projection::determinant() const {\n\treturn columns[0][3] * columns[1][2] * columns[2][1] * columns[3][0] - columns[0][2] * columns[1][3] * columns[2][1] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ddd2b44fda526b0f77727233e531e3270ac6c029bf817be70c9ec25bfe09bc5d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 43,
          "offset": 73,
          "length": 7,
          "code": {
            "startLine": 41,
            "length": 7,
            "offset": 113,
            "surroundingCode": "\nfloat Projection::determinant() const {\n\treturn columns[0][3] * columns[1][2] * columns[2][1] * columns[3][0] - columns[0][2] * columns[1][3] * columns[2][1] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "8b04d875a3d4bc9346c6cea9e75d556cf830ff9293874c20f60ceda17727e404"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 44,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 42,
            "length": 7,
            "offset": 179,
            "surroundingCode": "float Projection::determinant() const {\n\treturn columns[0][3] * columns[1][2] * columns[2][1] * columns[3][0] - columns[0][2] * columns[1][3] * columns[2][1] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "270e278692bf3404ed8b739fb1bb2861467a1577336fb8b26df2b1ba757c4551"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 44,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 42,
            "length": 7,
            "offset": 243,
            "surroundingCode": "float Projection::determinant() const {\n\treturn columns[0][3] * columns[1][2] * columns[2][1] * columns[3][0] - columns[0][2] * columns[1][3] * columns[2][1] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f75ad3c87429b72b51057d17670698d80fd0cc0a579360081e68f647f7ec7057"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 45,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 43,
            "length": 7,
            "offset": 270,
            "surroundingCode": "\treturn columns[0][3] * columns[1][2] * columns[2][1] * columns[3][0] - columns[0][2] * columns[1][3] * columns[2][1] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1f0822460aee68072dccc6c242397281ebbdc7c0183bb7fce680b4826079a0be"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 45,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 43,
            "length": 7,
            "offset": 334,
            "surroundingCode": "\treturn columns[0][3] * columns[1][2] * columns[2][1] * columns[3][0] - columns[0][2] * columns[1][3] * columns[2][1] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "4c998027298385a35daa171066fc57f6f5da20eb3d447f4ffb8412d7ee8a14d7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 46,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 44,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "8eb3ad1d6d52cd949a03be92ed8ed2f650f0a78ff118e15c02a19ef9d3351804"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 46,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 44,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][1] * columns[2][2] * columns[3][0] + columns[0][1] * columns[1][3] * columns[2][2] * columns[3][0] +\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "fe0d994a0bd931c53a70414861ec7a50f279ec8627e9da21982544abc339e613"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 47,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 45,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "54f50c6888250ab3a7d4a46212f8915afe0727a5031f613673c4b5d5dc916fdb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 47,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 45,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][2] * columns[1][1] * columns[2][3] * columns[3][0] - columns[0][1] * columns[1][2] * columns[2][3] * columns[3][0] -\n\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "8a5f1ab687c48935a917855bda37512a5ae3b6ab9d9e92989352804df1e3f80d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 48,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 46,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "16a31ea2ca1a6db0bea739a83440955bcc20a1898474eb2d56cb8a9374a0e583"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 48,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 46,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][2] * columns[2][0] * columns[3][1] + columns[0][2] * columns[1][3] * columns[2][0] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "172a9ca034d1954767131efc205c8d440381431466662ded29511aaead70ceda"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 49,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 47,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "9bc6286cc4154efd58bb26b2a5a50408522238e7ee3d01ee498181e1a8d19071"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 49,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 47,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][0] * columns[2][2] * columns[3][1] - columns[0][0] * columns[1][3] * columns[2][2] * columns[3][1] -\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "d8f4c7bae12c6481fb45675aa2b8faddaf6a1fdb34c2313e2161b36924becf23"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 50,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 48,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "a5c785a81b28266bd888d36fb51a483d741e3148d8d4a8c967a95a2f41cbe223"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 50,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 48,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][2] * columns[1][0] * columns[2][3] * columns[3][1] + columns[0][0] * columns[1][2] * columns[2][3] * columns[3][1] +\n\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "0d66dc39161deff70c3b0914bd45eba9e739045d282b59e9da32ab0a187da8b5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 51,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 49,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "b44d9c6b1c4b79fd991d054aad0e51b43f6715e69b7d6e0a5bb3e4861aaf221a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 51,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 49,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][1] * columns[2][0] * columns[3][2] - columns[0][1] * columns[1][3] * columns[2][0] * columns[3][2] -\n\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "7afb6396bd27b34b5673f32be7cbf7ba05f858df2cb9f552cf4a85546e984213"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 52,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 50,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][2] * columns[3][3] + columns[0][0] * columns[1][1] * columns[2][2] * columns[3][3];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "c0851d14fb96d87981bab55ffdee0f89541d03d507640ebbff085504481f8712"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 52,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 50,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][3] * columns[1][0] * columns[2][1] * columns[3][2] + columns[0][0] * columns[1][3] * columns[2][1] * columns[3][2] +\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][2] * columns[3][3] + columns[0][0] * columns[1][1] * columns[2][2] * columns[3][3];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "87c33a42338b5a05158680d1e8b384e462704ef288c19d9460aade3eee0de552"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 53,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 51,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][2] * columns[3][3] + columns[0][0] * columns[1][1] * columns[2][2] * columns[3][3];\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "0a8e9f24eae0b8ddab136e470861ee9cf81a6ab3d01c869ff12b8f3534b03948"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 53,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 51,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][1] * columns[1][0] * columns[2][3] * columns[3][2] - columns[0][0] * columns[1][1] * columns[2][3] * columns[3][2] -\n\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][2] * columns[3][3] + columns[0][0] * columns[1][1] * columns[2][2] * columns[3][3];\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "70879aeb57d3e6949e8f14f1c383cfe185acac5e708b13468af7eadf083e4f41"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 54,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 52,
            "length": 7,
            "offset": 265,
            "surroundingCode": "\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][2] * columns[3][3] + columns[0][0] * columns[1][1] * columns[2][2] * columns[3][3];\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1884eb8d1ed4d614431ec54064b491289b285986bab676df31914bef901b0063"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 54,
          "offset": 68,
          "length": 7,
          "code": {
            "startLine": 52,
            "length": 7,
            "offset": 329,
            "surroundingCode": "\t\t\tcolumns[0][2] * columns[1][1] * columns[2][0] * columns[3][3] + columns[0][1] * columns[1][2] * columns[2][0] * columns[3][3] +\n\t\t\tcolumns[0][2] * columns[1][0] * columns[2][1] * columns[3][3] - columns[0][0] * columns[1][2] * columns[2][1] * columns[3][3] -\n\t\t\tcolumns[0][1] * columns[1][0] * columns[2][2] * columns[3][3] + columns[0][0] * columns[1][1] * columns[2][2] * columns[3][3];\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "3685e70aee67637ce7930c6e81b1c969b3ae764c9139c152a02c350c84096c32"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 60,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 58,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcolumns[i][j] = (i == j) ? 1 : 0;\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "cd23989ef4c20225c0f1f1b7aeacabf160159acd56c3f698338a877245675750"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 68,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 66,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcolumns[i][j] = 0;\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "9db14168d1ac7a61426044ed56319d73cd2364b1474618f10e0d0cc5dea7eb95"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 85,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 83,
            "length": 7,
            "offset": 77,
            "surroundingCode": "Vector4 Projection::xform(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "efcda3b70e6d0cffa99a61d5f59643f02ba10704072b4367b30475d33093de40"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 85,
          "offset": 31,
          "length": 7,
          "code": {
            "startLine": 83,
            "length": 7,
            "offset": 104,
            "surroundingCode": "Vector4 Projection::xform(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "14e86b249eb63a9edd6f7a82d35d6829346eb58b4082b1cdaf8c71721dd4cd27"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 85,
          "offset": 58,
          "length": 7,
          "code": {
            "startLine": 83,
            "length": 7,
            "offset": 131,
            "surroundingCode": "Vector4 Projection::xform(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "0bd43ceacb3b8fa5c7a65753962954a04c5622024370c6e99fb16ad47eb81627"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 85,
          "offset": 85,
          "length": 7,
          "code": {
            "startLine": 83,
            "length": 7,
            "offset": 158,
            "surroundingCode": "Vector4 Projection::xform(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "c7c109c0b77c6781c5f9f72b5969278b1523ff250cfc335a71544a194e2dd026"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 86,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 84,
            "length": 7,
            "offset": 130,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "45d368f67971bf756ad664439ec5a42b702691f6f49254a9f031d118da0f3445"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 86,
          "offset": 31,
          "length": 7,
          "code": {
            "startLine": 84,
            "length": 7,
            "offset": 157,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "319dea80af8c51daef4107350048ce3cb46d336c467ef9e3c13f0308580e2d42"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 86,
          "offset": 58,
          "length": 7,
          "code": {
            "startLine": 84,
            "length": 7,
            "offset": 184,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "e4c404e1e453955231a0a2615c94d0e869cab6cb83c862466cc1abcfcfaa3a80"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 86,
          "offset": 85,
          "length": 7,
          "code": {
            "startLine": 84,
            "length": 7,
            "offset": 211,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "e17a83cda733746ad637276ff204d63a3ec4c0d552ca3ddf304655ae36d19deb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 87,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 85,
            "length": 7,
            "offset": 223,
            "surroundingCode": "\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f058bda9cc800b90459836112743e059fea7ca3ff2653c65b5cf4b6974c4db08"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 87,
          "offset": 31,
          "length": 7,
          "code": {
            "startLine": 85,
            "length": 7,
            "offset": 250,
            "surroundingCode": "\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "114a0ec2e3a1d37953827f42ff2d11812d978c31380a3bf6cabe8c1945215ed6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 87,
          "offset": 58,
          "length": 7,
          "code": {
            "startLine": 85,
            "length": 7,
            "offset": 277,
            "surroundingCode": "\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "a155bd8c1dee3919680751b1c6ebdd28afcfacf05a528e57c74dcf2e649846ab"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 87,
          "offset": 85,
          "length": 7,
          "code": {
            "startLine": 85,
            "length": 7,
            "offset": 304,
            "surroundingCode": "\t\t\tcolumns[0][0] * p_vec4.x + columns[1][0] * p_vec4.y + columns[2][0] * p_vec4.z + columns[3][0] * p_vec4.w,\n\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "79e745c03d4634c26034a103e867dc640a569e009e790520a2f63a2c2e6176aa"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 88,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 86,
            "length": 7,
            "offset": 223,
            "surroundingCode": "\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}\nVector4 Projection::xform_inv(const Vector4 &p_vec4) const {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "be223403fe6506a82f9c3d7d1e64d558fa916bc7a611c667b7705321d0576d96"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 88,
          "offset": 31,
          "length": 7,
          "code": {
            "startLine": 86,
            "length": 7,
            "offset": 250,
            "surroundingCode": "\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}\nVector4 Projection::xform_inv(const Vector4 &p_vec4) const {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f420e9d8c15106caa8f887c86df18fa8be0a0b35dc312b0845dfd4b0a3d4c04f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 88,
          "offset": 58,
          "length": 7,
          "code": {
            "startLine": 86,
            "length": 7,
            "offset": 277,
            "surroundingCode": "\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}\nVector4 Projection::xform_inv(const Vector4 &p_vec4) const {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "8c218bc157920210bdd9ef099875d3af1f4217a3f8287c5356d38c46f47b9f04"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 88,
          "offset": 85,
          "length": 7,
          "code": {
            "startLine": 86,
            "length": 7,
            "offset": 304,
            "surroundingCode": "\t\t\tcolumns[0][1] * p_vec4.x + columns[1][1] * p_vec4.y + columns[2][1] * p_vec4.z + columns[3][1] * p_vec4.w,\n\t\t\tcolumns[0][2] * p_vec4.x + columns[1][2] * p_vec4.y + columns[2][2] * p_vec4.z + columns[3][2] * p_vec4.w,\n\t\t\tcolumns[0][3] * p_vec4.x + columns[1][3] * p_vec4.y + columns[2][3] * p_vec4.z + columns[3][3] * p_vec4.w);\n}\nVector4 Projection::xform_inv(const Vector4 &p_vec4) const {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "12a625a0e5e848c936e29d78d85751732d788854b27c02331a24417805d5aec1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 92,
          "offset": 31,
          "length": 7,
          "code": {
            "startLine": 90,
            "length": 7,
            "offset": 108,
            "surroundingCode": "Vector4 Projection::xform_inv(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "00e152fd358af546af21692b8330ad1c96e507fd1b96100c7585539147fc15ad"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 92,
          "offset": 58,
          "length": 7,
          "code": {
            "startLine": 90,
            "length": 7,
            "offset": 135,
            "surroundingCode": "Vector4 Projection::xform_inv(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f798ca0f9c04ab1cf827e49b8fd4c82df86b5c2aa06a7b880cabfd69585da4f9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 92,
          "offset": 85,
          "length": 7,
          "code": {
            "startLine": 90,
            "length": 7,
            "offset": 162,
            "surroundingCode": "Vector4 Projection::xform_inv(const Vector4 &p_vec4) const {\n\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "b878c154d5b3ed4b51a9cbf297055f7ce9371ab65fc8f0ae9168d6ce02f0a8b1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 93,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 91,
            "length": 7,
            "offset": 130,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,\n\t\t\tcolumns[3][0] * p_vec4.x + columns[3][1] * p_vec4.y + columns[3][2] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "4ed8cd06247049d29abde75aaf785cd9dc6b2e3116b26dc8261dac6f51b93adb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 93,
          "offset": 31,
          "length": 7,
          "code": {
            "startLine": 91,
            "length": 7,
            "offset": 157,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,\n\t\t\tcolumns[3][0] * p_vec4.x + columns[3][1] * p_vec4.y + columns[3][2] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "a9e908ebd214d5a2ec8c10e3ee2561facaecab9a316b216b80eb414b649e5f37"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 93,
          "offset": 58,
          "length": 7,
          "code": {
            "startLine": 91,
            "length": 7,
            "offset": 184,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,\n\t\t\tcolumns[3][0] * p_vec4.x + columns[3][1] * p_vec4.y + columns[3][2] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "a016f8c84f11be3126cb86c015590e068b27276f516f016b37775955c6e94c06"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 93,
          "offset": 85,
          "length": 7,
          "code": {
            "startLine": 91,
            "length": 7,
            "offset": 211,
            "surroundingCode": "\treturn Vector4(\n\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,\n\t\t\tcolumns[3][0] * p_vec4.x + columns[3][1] * p_vec4.y + columns[3][2] * p_vec4.z + columns[3][3] * p_vec4.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "cfc963404d9d6af92df1d625267ac2531511401a759860cf1b5a1444fd891ea7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 94,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 92,
            "length": 7,
            "offset": 223,
            "surroundingCode": "\t\t\tcolumns[0][0] * p_vec4.x + columns[0][1] * p_vec4.y + columns[0][2] * p_vec4.z + columns[0][3] * p_vec4.w,\n\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,\n\t\t\tcolumns[3][0] * p_vec4.x + columns[3][1] * p_vec4.y + columns[3][2] * p_vec4.z + columns[3][3] * p_vec4.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "cdf780b9a13c6cda9f4f3a39353e85ca80dc036f50c48be009a326f56836556f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 95,
          "offset": 4,
          "length": 7,
          "code": {
            "startLine": 93,
            "length": 7,
            "offset": 223,
            "surroundingCode": "\t\t\tcolumns[1][0] * p_vec4.x + columns[1][1] * p_vec4.y + columns[1][2] * p_vec4.z + columns[1][3] * p_vec4.w,\n\t\t\tcolumns[2][0] * p_vec4.x + columns[2][1] * p_vec4.y + columns[2][2] * p_vec4.z + columns[2][3] * p_vec4.w,\n\t\t\tcolumns[3][0] * p_vec4.x + columns[3][1] * p_vec4.y + columns[3][2] * p_vec4.z + columns[3][3] * p_vec4.w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "b2c01095472c9975666206cbad13b9636c5e5752c1591ac002896d33ec1a7955"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 174,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 172,
            "length": 1,
            "offset": 88,
            "surroundingCode": "\nPlane Projection::get_projection_plane(Planes p_plane) const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\n\tswitch (p_plane) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "69ee25be03f1e1c1504aa52dc62a76a40c3b1939f66040e4f3c2c15a230f0964"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 178,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 176,
            "length": 6,
            "offset": 68,
            "surroundingCode": "\tswitch (p_plane) {\n\t\tcase PLANE_NEAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9cf4985368434afde5693ca5a7a5bf74b0a56dbb042ea714b23a2c4e9349387f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 178,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 176,
            "length": 6,
            "offset": 80,
            "surroundingCode": "\tswitch (p_plane) {\n\t\tcase PLANE_NEAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e7f3661e37cd64b6d3da5c566da74c0c62183d0486b615dfa0d7d440bb4ac236"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 179,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 177,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\t\tcase PLANE_NEAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c3a6ee06bdd11d98401e0879a4ab38ebaf15a9d120309fa9b6a1f1d14d84c244"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 179,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 177,
            "length": 1,
            "offset": 83,
            "surroundingCode": "\t\tcase PLANE_NEAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "879364bce72254087de67ba1523d7693da1813a68f4d7610e70d9cd05b0f8d83"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 179,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 177,
            "length": 6,
            "offset": 88,
            "surroundingCode": "\t\tcase PLANE_NEAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "16d5e7548b44b8b60690790c55ecd4957416508264ad04ac7381a36c394b48b1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 179,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 177,
            "length": 1,
            "offset": 95,
            "surroundingCode": "\t\tcase PLANE_NEAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c0a904666c731ce63d7c80db17e9607dda66971fcc1f7f4d33d999a72d14cc95"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 180,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 178,
            "length": 6,
            "offset": 83,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "6d8d808af51bf0c21311e819d7df21deb9c4ac8dc4752d281b3fdc2836c65d1d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 180,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 178,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b3c204317174b21dd3b00f0465afbbb65c3b03458e68b2b163627a5db2b26f93"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 180,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 178,
            "length": 6,
            "offset": 96,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1b4d000d51bd8e3f4865040566d66541483b25a59e0d81a2636262beb204cad1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 180,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 178,
            "length": 2,
            "offset": 103,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d72f46034bc2af26b27a8e8f0324010a04565ab90a00ab078b1fe40956933aee"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 181,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 179,
            "length": 6,
            "offset": 63,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d4cdf633166c18af55083496ce896cd3d33cc2d68cb744ed7b726a30febd73aa"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 181,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 179,
            "length": 2,
            "offset": 70,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a0b01682db1a85116477346aec046f9263bf842fb3f3cc4deea4163da2513818"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 181,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 179,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7dd8ad189b3821ad3874841d7a33f3ed7e3fe65219e43d1d1829a35d0af61273"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 181,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 179,
            "length": 2,
            "offset": 83,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[6],\n\t\t\t\t\tmatrix[11] + matrix[10],\n\t\t\t\t\tmatrix[15] + matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a0e47b025ca7a9ee12aa07ea4ac869c5287fed907ed54ccd3347fd45e9cbf14b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 188,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 186,
            "length": 6,
            "offset": 51,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_FAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b2498f7ee595860d2239e97c51ed4ed418e1da369b63d6584998424a14ba7225"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 188,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 186,
            "length": 6,
            "offset": 63,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_FAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f0c90742118475148d92d633104718410db005c8c16ab71ab61f2cabd51c3f2b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 189,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 187,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\t\tcase PLANE_FAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c736981c547ab1f77772f37362597dc66d1d2f0fed21c7685d7ec3fa92c86cfd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 189,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 187,
            "length": 1,
            "offset": 82,
            "surroundingCode": "\t\tcase PLANE_FAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "088a9c6d72227bd3129226fff4ad12a4b0786c5a7b185970ebeed109e1e297d2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 189,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 187,
            "length": 6,
            "offset": 87,
            "surroundingCode": "\t\tcase PLANE_FAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4e03449db26d946121f48fe37a3940d5e2997ad75112fa14f4bb7175eb6ecb91"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 189,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 187,
            "length": 1,
            "offset": 94,
            "surroundingCode": "\t\tcase PLANE_FAR: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "2bfbcda40325c3944b469b5e6e974c6534cc8fa2bcb407dc2ab6968e63e6dfac"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 190,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 188,
            "length": 6,
            "offset": 83,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e720f02002703b5b4db652a0ded13687713c30a150e4f1d78a637f888f3eeed8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 190,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 188,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "2a6ff6b0f6583e143906ad6dc2cb6338117172936efca8f649ffd3b5422b4e5d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 190,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 188,
            "length": 6,
            "offset": 96,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b82ba9c508f4113476495689da8225c9c88cc565802d7451d96c2cfb7d259526"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 190,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 188,
            "length": 2,
            "offset": 103,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b7eaac1e3e1383e4c45936fee7ea5b2567c04aea35bd9b9905aca6250bb53e5d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 191,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 189,
            "length": 6,
            "offset": 63,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c432a3e7766a0b45dd174a31b5b91e0c630e34d253734b5e75737e31588cf409"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 191,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 189,
            "length": 2,
            "offset": 70,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d1f635f2a16f119c7f6d65baeafcb930a6ff01a3ce44e820ebbf0d5dca622601"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 191,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 189,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e2e69c933a49daf27dea9acfe5ce7055555f7bb034fe002ea9cf49681eb7f548"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 191,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 189,
            "length": 2,
            "offset": 83,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[6],\n\t\t\t\t\tmatrix[11] - matrix[10],\n\t\t\t\t\tmatrix[15] - matrix[14]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e1c49fe3f3d25c911e34eb425245ee2374cf7464addd473682b231692be3e3a1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 198,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 196,
            "length": 6,
            "offset": 52,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_LEFT: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9eaae10bdf46d0b5991f25219a18cabdd68e46d8ef2b4184e23a539df55fbe80"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 198,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 196,
            "length": 6,
            "offset": 64,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_LEFT: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f7b82385f87bfc2b42f9622c1944d5eeaef2067ee3492a71ff1e1ebef0684d33"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 199,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 197,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\t\tcase PLANE_LEFT: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1319021a291c102e864d2888c0520ec15ff2bb320d56937c2174cd9a3760c537"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 199,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 197,
            "length": 1,
            "offset": 83,
            "surroundingCode": "\t\tcase PLANE_LEFT: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5b28fe87732f99b0daa1b83d63b455f7d8a826cd6b7656a842e4a5695d257ea1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 199,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 197,
            "length": 6,
            "offset": 88,
            "surroundingCode": "\t\tcase PLANE_LEFT: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4bc700cec817b61cb63f8e0763cdab1be8c4a5d318a70e842f3e6f6ef2ca20b7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 200,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 198,
            "length": 6,
            "offset": 83,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d39a7cabe3f1d2e96a296b325bda5e22b4a7221fbcc086304629047944a4b3f7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 200,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 198,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "56a4120cfe8a708f323a4bfce1379da93f3b7c88b68f1714426bd9011f041ad0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 200,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 198,
            "length": 6,
            "offset": 96,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "158a20444dee1ebd085eee1dc96b7059e18c7cbb7636af804a9efc6497bd3222"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 200,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 198,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6b2f1f330cd9a90323f091bf464cbbf1795277c41b344a0202ef4d4e1b0afcb8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 201,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 199,
            "length": 6,
            "offset": 62,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "592169fce73ab5a5e6105879e496ed3de59399acc38976a97fcdf1d40dcf81cc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 201,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 199,
            "length": 2,
            "offset": 69,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "25d4f7bd83be4000d21d1df1cd70220085f9212d435bfd0e4aab90876a3963ab"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 201,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 199,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e74c8fc53f64c3843272e1a4ddb2eb51d38cf228624ccb45da479dfc0c34a22a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 201,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 199,
            "length": 2,
            "offset": 82,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\t\tmatrix[15] + matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a9bd2882d2be6c44439f0a554df44bf2772300193a89967bdd268af6475f1784"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 208,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 206,
            "length": 6,
            "offset": 51,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_TOP: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d5d6cdae81de787f294f722ad4d0b86c9a5f3e5136b87350944dc85e9a62ff94"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 209,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 207,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\t\tcase PLANE_TOP: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "023fbeabba071f8f5c831d8190977bedc7e2d568545cbba5d572ddcf24114ace"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 209,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 207,
            "length": 1,
            "offset": 82,
            "surroundingCode": "\t\tcase PLANE_TOP: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a0188a93620fed79b75a965008138d0cd72a9731e427ee8a22e742369fdac0cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 209,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 207,
            "length": 1,
            "offset": 94,
            "surroundingCode": "\t\tcase PLANE_TOP: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a984a6b608510e6a97984eb92a47fb29cf9769130e92c553f5e6075ac8da6341"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 210,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 208,
            "length": 6,
            "offset": 83,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f25f4d6554b39c3c87073002703554948e54eb8b9a6fe50071601b02e6eb21a1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 210,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 208,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f5ad827cc75066cb5c4bc084c8cb369b097086b5c6dcfdd756099720c8bfca45"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 210,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 208,
            "length": 6,
            "offset": 96,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1ce4dc0fd938350b8b3be0a87e73763afc90a5d8a96d17753e62220fe5bcaa74"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 210,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 208,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[1],\n\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ebde3363cf4aec4192daf732296c86fbd0450000521f79f5d11055d04a762b01"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 211,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 209,
            "length": 6,
            "offset": 62,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "63ea808bb1391f2a95bda9ffed5d6d4002e35826c10b9d11d0f75fd67c916f5c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 211,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 209,
            "length": 2,
            "offset": 69,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e74df48a59305a875eadfb601136f9df29c5b614966c05f01189595b8bdb95cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 211,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 209,
            "length": 2,
            "offset": 82,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[5],\n\t\t\t\t\tmatrix[11] - matrix[9],\n\t\t\t\t\tmatrix[15] - matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7dd1249a226338be4f306621043ad56d511801e018b2ec63126c4621b35c5e00"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 218,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 216,
            "length": 6,
            "offset": 53,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_RIGHT: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "6dc80826551094d16bae743bd3c6bda3ba45619cff003daa0ca000a00940c1ce"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 218,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 216,
            "length": 6,
            "offset": 65,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_RIGHT: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1b667fbed55030c4a95bf4e4a2b147669a11b36e536aed1810ae40b162d04c14"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 219,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 217,
            "length": 6,
            "offset": 77,
            "surroundingCode": "\t\tcase PLANE_RIGHT: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e934640595fb81fdfafea9e91b3faed8908dd2da0eca10c4107abf71905b5027"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 219,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 217,
            "length": 1,
            "offset": 84,
            "surroundingCode": "\t\tcase PLANE_RIGHT: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9ae2477765170d9a60f7bd763d5e313833e677a050706f3cb7236f4450cfd70e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 219,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 217,
            "length": 6,
            "offset": 89,
            "surroundingCode": "\t\tcase PLANE_RIGHT: {\n\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "da4902ea544031f68b4073b21a8aa78d703a8a672fc8e33b37181a95fa338071"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 220,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 218,
            "length": 6,
            "offset": 83,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f0180dc03e2c15db45ad2cc3a4feab7c9f984fdde4358771a3a66fa14fb78981"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 220,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 218,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "06d79aa57832c736a7d38e32648ef42cbb05df0adbe893e269ee3cce8efb34af"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 220,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 218,
            "length": 6,
            "offset": 96,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e49d3e5386511b3c724911b37ebcc21bf670718b88710e44796950078fb43267"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 220,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 218,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] - matrix[0],\n\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "cd15419ca8fbead6811cb17a111b2b1201de63c2324e9766fe780dda2537de8f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 221,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 219,
            "length": 6,
            "offset": 62,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "61e40f7210c9651f80aeaa5ffbb4e6e49bf343e9137ccfc56d92a2e9defe2580"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 221,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 219,
            "length": 2,
            "offset": 69,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5d09599cbbbf1b53cbd9442756f12a0f4c66e367893b7e5eed9a7330d5bf50d0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 221,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 219,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9de23c691205a803df32180c412b89ceb9d84bee1f294904a4c6d931076c6ef7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 221,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 219,
            "length": 2,
            "offset": 82,
            "surroundingCode": "\t\t\t\t\tmatrix[7] - matrix[4],\n\t\t\t\t\tmatrix[11] - matrix[8],\n\t\t\t\t\tmatrix[15] - matrix[12]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "17ce4e3b88663920358b7bc3aae3d43a4d9376b0b11ec7cf0c66b8384d0b9191"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 228,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 226,
            "length": 6,
            "offset": 54,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_BOTTOM: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4ff888a51ccb7ae8c29906d880782a62ce67a2e30dac3dce696989385aefa8ca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 228,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 226,
            "length": 6,
            "offset": 66,
            "surroundingCode": "\t\t}\n\t\tcase PLANE_BOTTOM: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f969b7c094302abb761077c7260346eeaede00e94253bb0140d7c4306dc1c9dc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 229,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 227,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\t\tcase PLANE_BOTTOM: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f3c08b02fd54f6d2ceed838a5168553b419335cf48922e854dc1203a6dc996e2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 229,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 227,
            "length": 1,
            "offset": 85,
            "surroundingCode": "\t\tcase PLANE_BOTTOM: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8b8319ca39abbdbede171d6a62218656300ce0df8b1507ef9ace96f2e7c98813"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 229,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 227,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\t\tcase PLANE_BOTTOM: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c4ccbf70238637efbba42b3cd428e9e5b768c535efb6d0a10225439c6667dc19"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 229,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 227,
            "length": 1,
            "offset": 97,
            "surroundingCode": "\t\tcase PLANE_BOTTOM: {\n\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "22c641e5388d9c10509e98a042d0a1a628c56f96d5f66055705370cee3c36c4f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 230,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 228,
            "length": 6,
            "offset": 83,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b5b0ad7259551a8a1b1c3b4155af5af39c49909b2b58f698f5d44f327ff6dfbe"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 230,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 228,
            "length": 2,
            "offset": 90,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7c1743640022f5141de9f6cb90cc4c6a30c2890debad08f1010d6aadf36eea64"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 230,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 228,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\t\t\tPlane new_plane = Plane(matrix[3] + matrix[1],\n\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e640f7065f29570432f12b4e899f84b6d0cbef9ab23a495eecdef7591744e5d2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 231,
          "offset": 6,
          "length": 6,
          "code": {
            "startLine": 229,
            "length": 6,
            "offset": 62,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4218526c62778e3e17f9fe7813206a23b1e313fcf69fc1a11d23fc72c2dfd0c4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 231,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 69,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "72a085700f734b2baca219f0d974b62fa52f357c70a849d67846822bcc222319"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 231,
          "offset": 19,
          "length": 6,
          "code": {
            "startLine": 229,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "63e8e577737acbdcd8ae0a00a332fe77cdd1a1bbba8ee70a3f083ae981f09404"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 231,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 82,
            "surroundingCode": "\t\t\t\t\tmatrix[7] + matrix[5],\n\t\t\t\t\tmatrix[11] + matrix[9],\n\t\t\t\t\tmatrix[15] + matrix[13]);\n\n\t\t\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "afdcefd31498a62128c7781c0412ecfd16f8a826d6abd0f8c763c775cdc9115f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_perspective' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 254,
          "offset": 57,
          "length": 6,
          "code": {
            "startLine": 252,
            "length": 6,
            "offset": 59,
            "surroundingCode": "}\n\nvoid Projection::set_perspective(real_t p_fovy_degrees, real_t p_aspect, real_t p_z_near, real_t p_z_far, bool p_flip_fov) {\n\tif (p_flip_fov) {\n\t\tp_fovy_degrees = get_fovy(p_fovy_degrees, 1.0 / p_aspect);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "fbf66ca4e5d0d55f0edb3a5e2cfed81f7b08cf6c38cd8d6bb51375a733cc3d1f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 256,
          "offset": 45,
          "length": 3,
          "code": {
            "startLine": 254,
            "length": 3,
            "offset": 188,
            "surroundingCode": "void Projection::set_perspective(real_t p_fovy_degrees, real_t p_aspect, real_t p_z_near, real_t p_z_far, bool p_flip_fov) {\n\tif (p_flip_fov) {\n\t\tp_fovy_degrees = get_fovy(p_fovy_degrees, 1.0 / p_aspect);\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "29c5efaff325d01ba10251cbcde72974e6398e602ef2d3357542fd37d254c423"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 259,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 257,
            "length": 6,
            "offset": 5,
            "surroundingCode": "\t}\n\n\treal_t sine, cotangent, deltaZ;\n\treal_t radians = Math::deg_to_rad(p_fovy_degrees / 2.0);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "715d997bae5d8544df9c4a10a35b8fb981855d7cf02b05436e790f29536c05af"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'sine' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 259,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 257,
            "length": 4,
            "offset": 12,
            "surroundingCode": "\t}\n\n\treal_t sine, cotangent, deltaZ;\n\treal_t radians = Math::deg_to_rad(p_fovy_degrees / 2.0);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "983ecb448be8f979576860b0ffe6f29559aaff29947f62b318b0339eb55a3b7d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'cotangent' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 259,
          "offset": 15,
          "length": 9,
          "code": {
            "startLine": 257,
            "length": 9,
            "offset": 18,
            "surroundingCode": "\t}\n\n\treal_t sine, cotangent, deltaZ;\n\treal_t radians = Math::deg_to_rad(p_fovy_degrees / 2.0);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "328c3243427d4c94edf4c25766c74d0efe776bc37bc2be88f24872aa3a6ba469"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'deltaZ' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 259,
          "offset": 26,
          "length": 6,
          "code": {
            "startLine": 257,
            "length": 6,
            "offset": 29,
            "surroundingCode": "\t}\n\n\treal_t sine, cotangent, deltaZ;\n\treal_t radians = Math::deg_to_rad(p_fovy_degrees / 2.0);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "7774bc7d71746f051171ce2737eec8c68fa61acb19bfb530280ca579437f2c47"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 260,
          "offset": 19,
          "length": 4,
          "code": {
            "startLine": 258,
            "length": 4,
            "offset": 52,
            "surroundingCode": "\n\treal_t sine, cotangent, deltaZ;\n\treal_t radians = Math::deg_to_rad(p_fovy_degrees / 2.0);\n\n\tdeltaZ = p_z_far - p_z_near;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "257a918f9eaaa7959cecac768ef743d8b96fcc672ace6a53a2201ae2fd081835"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 260,
          "offset": 53,
          "length": 3,
          "code": {
            "startLine": 258,
            "length": 3,
            "offset": 86,
            "surroundingCode": "\n\treal_t sine, cotangent, deltaZ;\n\treal_t radians = Math::deg_to_rad(p_fovy_degrees / 2.0);\n\n\tdeltaZ = p_z_far - p_z_near;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6263fbf5804fa66ed6b7bae2c3b243f4896562425c19b13ad390d9c6cfc64f1b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_perspective' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 280,
          "offset": 57,
          "length": 6,
          "code": {
            "startLine": 278,
            "length": 6,
            "offset": 59,
            "surroundingCode": "}\n\nvoid Projection::set_perspective(real_t p_fovy_degrees, real_t p_aspect, real_t p_z_near, real_t p_z_far, bool p_flip_fov, int p_eye, real_t p_intraocular_dist, real_t p_convergence_dist) {\n\tif (p_flip_fov) {\n\t\tp_fovy_degrees = get_fovy(p_fovy_degrees, 1.0 / p_aspect);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "9786fc34401e508537eabfd97b00bcccc244b7cb840cf81f32bbe6780c505907"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_perspective' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 280,
          "offset": 124,
          "length": 3,
          "code": {
            "startLine": 278,
            "length": 3,
            "offset": 126,
            "surroundingCode": "}\n\nvoid Projection::set_perspective(real_t p_fovy_degrees, real_t p_aspect, real_t p_z_near, real_t p_z_far, bool p_flip_fov, int p_eye, real_t p_intraocular_dist, real_t p_convergence_dist) {\n\tif (p_flip_fov) {\n\t\tp_fovy_degrees = get_fovy(p_fovy_degrees, 1.0 / p_aspect);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "3e537f1e032ed0401b8f3924783727308207cdcf490d1aad28bffef9f49cb08b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 282,
          "offset": 45,
          "length": 3,
          "code": {
            "startLine": 280,
            "length": 3,
            "offset": 253,
            "surroundingCode": "void Projection::set_perspective(real_t p_fovy_degrees, real_t p_aspect, real_t p_z_near, real_t p_z_far, bool p_flip_fov, int p_eye, real_t p_intraocular_dist, real_t p_convergence_dist) {\n\tif (p_flip_fov) {\n\t\tp_fovy_degrees = get_fovy(p_fovy_degrees, 1.0 / p_aspect);\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "4d57542872865e9c9ebe33e4daa0f2fecac3c90a5cf1737a4a86f703154a37ef"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 283,
            "length": 6,
            "offset": 5,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "e759a36f8af46c7a9bd75db1c81187f8136bf03ea14ef075b5002359043d9ee5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'left' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 283,
            "length": 4,
            "offset": 12,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "5f5eecbc231421e5165316a6f7ceaff8e7c5c08cee14b7cbe851ee1008763e47"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'right' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 15,
          "length": 5,
          "code": {
            "startLine": 283,
            "length": 5,
            "offset": 18,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "25867eb75b9b7426fe7d87f7b92cd231b807137446482f3f17c5e615a4dace69"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'modeltranslation' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 22,
          "length": 16,
          "code": {
            "startLine": 283,
            "length": 16,
            "offset": 25,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "8298fabf1527f4b090c45aa7b02dfc7f20b2a6110f962770273211196bc2d055"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'ymax' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 40,
          "length": 4,
          "code": {
            "startLine": 283,
            "length": 4,
            "offset": 43,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "704fc91bf1cff9c02da6ea3b2a8cef9091e1af8f277fa7a6b2a6dc1dd5f389c9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'xmax' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 46,
          "length": 4,
          "code": {
            "startLine": 283,
            "length": 4,
            "offset": 49,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "f1c6dea3b30209901a93e24073e71b50aca59188870f5e7382cb83dfcae523c5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'frustumshift' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 285,
          "offset": 52,
          "length": 12,
          "code": {
            "startLine": 283,
            "length": 12,
            "offset": 55,
            "surroundingCode": "\t}\n\n\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "4277e5f7b57d5eef3ae1884732fb5c1f4ed7150dd630f0a91a1fc4e328f8fe5c"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 287,
          "offset": 9,
          "length": 8,
          "code": {
            "startLine": 285,
            "length": 8,
            "offset": 74,
            "surroundingCode": "\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));\n\txmax = ymax * p_aspect;\n\tfrustumshift = (p_intraocular_dist / 2.0) * p_z_near / p_convergence_dist;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "95af8443e518ef1b31ebc55103c20ec03a07a343c087d76fa8771be647f0206a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 287,
          "offset": 58,
          "length": 3,
          "code": {
            "startLine": 285,
            "length": 3,
            "offset": 123,
            "surroundingCode": "\treal_t left, right, modeltranslation, ymax, xmax, frustumshift;\n\n\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));\n\txmax = ymax * p_aspect;\n\tfrustumshift = (p_intraocular_dist / 2.0) * p_z_near / p_convergence_dist;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7cdcc054672f9ff29f291898b55bb9d35533d4aa5d36e34bf377749b1248a827"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 289,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 287,
            "length": 1,
            "offset": 105,
            "surroundingCode": "\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));\n\txmax = ymax * p_aspect;\n\tfrustumshift = (p_intraocular_dist / 2.0) * p_z_near / p_convergence_dist;\n\n\tswitch (p_eye) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "df43ee584797e480ec40d53ff93261255e1ac77fde5c76241c1b75ad1cff5c27"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 289,
          "offset": 39,
          "length": 3,
          "code": {
            "startLine": 287,
            "length": 3,
            "offset": 127,
            "surroundingCode": "\tymax = p_z_near * tan(Math::deg_to_rad(p_fovy_degrees / 2.0));\n\txmax = ymax * p_aspect;\n\tfrustumshift = (p_intraocular_dist / 2.0) * p_z_near / p_convergence_dist;\n\n\tswitch (p_eye) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3c9426da3887f86d1b1c39f31eba9d7754a975b52a9505a31fac2b30d8ecfbb4"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 295,
          "offset": 23,
          "length": 18,
          "code": {
            "startLine": 293,
            "length": 18,
            "offset": 86,
            "surroundingCode": "\t\t\tleft = -xmax + frustumshift;\n\t\t\tright = xmax + frustumshift;\n\t\t\tmodeltranslation = p_intraocular_dist / 2.0;\n\t\t} break;\n\t\tcase 2: { // right eye"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "54fc5d75df8f818285d7dfe1462de78022d26abb1754507b907bb9234f9696a6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 295,
          "offset": 44,
          "length": 3,
          "code": {
            "startLine": 293,
            "length": 3,
            "offset": 107,
            "surroundingCode": "\t\t\tleft = -xmax + frustumshift;\n\t\t\tright = xmax + frustumshift;\n\t\t\tmodeltranslation = p_intraocular_dist / 2.0;\n\t\t} break;\n\t\tcase 2: { // right eye"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "1dc1b26a33a347eb433af2683ab2d08f39c8ee59baca099b612d77aa2d0477d0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 300,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 298,
            "length": 1,
            "offset": 86,
            "surroundingCode": "\t\t\tleft = -xmax - frustumshift;\n\t\t\tright = xmax - frustumshift;\n\t\t\tmodeltranslation = -p_intraocular_dist / 2.0;\n\t\t} break;\n\t\tdefault: { // mono, should give the same result as set_perspective(p_fovy_degrees,p_aspect,p_z_near,p_z_far,p_flip_fov)"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "0bcc48cc5383ba9a22b2eda3c382311aeb901bedaaf731d7ba2dc23f028080a3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 300,
          "offset": 45,
          "length": 3,
          "code": {
            "startLine": 298,
            "length": 3,
            "offset": 108,
            "surroundingCode": "\t\t\tleft = -xmax - frustumshift;\n\t\t\tright = xmax - frustumshift;\n\t\t\tmodeltranslation = -p_intraocular_dist / 2.0;\n\t\t} break;\n\t\tdefault: { // mono, should give the same result as set_perspective(p_fovy_degrees,p_aspect,p_z_near,p_z_far,p_flip_fov)"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f45afed6ddc358e8f8c0e7d419d8513c78087f992674e9d0518314244b03493f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 312,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 310,
            "length": 2,
            "offset": 66,
            "surroundingCode": "\n\t// translate matrix by (modeltranslation, 0.0, 0.0)\n\tProjection cm;\n\tcm.set_identity();\n\tcm.columns[3][0] = modeltranslation;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "42d1aae7de366dd4a3ae91a8b4a985b7f3124bcb563fbed60e4f141a55fc920b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of 'set_for_hmd' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 318,
          "offset": 30,
          "length": 3,
          "code": {
            "startLine": 316,
            "length": 3,
            "offset": 32,
            "surroundingCode": "}\n\nvoid Projection::set_for_hmd(int p_eye, real_t p_aspect, real_t p_intraocular_dist, real_t p_display_width, real_t p_display_to_lens, real_t p_oversample, real_t p_z_near, real_t p_z_far) {\n\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "caf21a24a9faf126cea82d98c12a67fdb3316cf38ae5f3fc9374225fb2d2c8b2"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of 'set_for_hmd' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 318,
          "offset": 109,
          "length": 6,
          "code": {
            "startLine": 316,
            "length": 6,
            "offset": 111,
            "surroundingCode": "}\n\nvoid Projection::set_for_hmd(int p_eye, real_t p_aspect, real_t p_intraocular_dist, real_t p_display_width, real_t p_display_to_lens, real_t p_oversample, real_t p_z_near, real_t p_z_far) {\n\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "cc36f9da673c67b0d9e0cc55a7ad58a923809ce8e73b3e52e752239d0279d613"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'f1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 320,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 318,
            "length": 2,
            "offset": 304,
            "surroundingCode": "void Projection::set_for_hmd(int p_eye, real_t p_aspect, real_t p_intraocular_dist, real_t p_display_width, real_t p_display_to_lens, real_t p_oversample, real_t p_z_near, real_t p_z_far) {\n\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d2f568c8cf2a2d23a0416ce01ded23904992523448b2d9adaa8d04b829060952"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 320,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 318,
            "length": 1,
            "offset": 309,
            "surroundingCode": "void Projection::set_for_hmd(int p_eye, real_t p_aspect, real_t p_intraocular_dist, real_t p_display_width, real_t p_display_to_lens, real_t p_oversample, real_t p_z_near, real_t p_z_far) {\n\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "83b92ed9e3899247ef8684a1efb59b2a7d46a0fee3b0e27ac2966b05e5c07958"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 320,
          "offset": 36,
          "length": 3,
          "code": {
            "startLine": 318,
            "length": 3,
            "offset": 331,
            "surroundingCode": "void Projection::set_for_hmd(int p_eye, real_t p_aspect, real_t p_intraocular_dist, real_t p_display_width, real_t p_display_to_lens, real_t p_oversample, real_t p_z_near, real_t p_z_far) {\n\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c8995a3ddbad8098f22122940f226ff111dec5d4fc82ed8e59c37686793fede4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'f2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 321,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 319,
            "length": 2,
            "offset": 175,
            "surroundingCode": "\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5a849405799cbcb3ae3cda0be2fcab7e7adfc983989c345901f27e38d35d375d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 321,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 319,
            "length": 1,
            "offset": 180,
            "surroundingCode": "\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "f9722fa1642c130e12f9972cbd1d9eab00d3ab8fe4a0e9234f3a0d82b22231a3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 321,
          "offset": 56,
          "length": 3,
          "code": {
            "startLine": 319,
            "length": 3,
            "offset": 222,
            "surroundingCode": "\t// we first calculate our base frustum on our values without taking our lens magnification into account.\n\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "946c4023749b4e58e527d15161c55c2f32d3b17165cfe7c558c6b561fb645461"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'f3' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 322,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 320,
            "length": 2,
            "offset": 150,
            "surroundingCode": "\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;\n\n\t// now we apply our oversample factor to increase our FOV. how much we oversample is always a balance we strike between performance and how much"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "0d243f263a9293c0d56c796a975b533d293cda55006b01f2e975bb190c65985d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 322,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 320,
            "length": 1,
            "offset": 155,
            "surroundingCode": "\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;\n\n\t// now we apply our oversample factor to increase our FOV. how much we oversample is always a balance we strike between performance and how much"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "aaccab0a6f50a38ecc38c608a3217bb6676fd378ca429dc80fc1b01fa2bfe89f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "4.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 322,
          "offset": 33,
          "length": 3,
          "code": {
            "startLine": 320,
            "length": 3,
            "offset": 174,
            "surroundingCode": "\treal_t f1 = (p_intraocular_dist * 0.5) / p_display_to_lens;\n\treal_t f2 = ((p_display_width - p_intraocular_dist) * 0.5) / p_display_to_lens;\n\treal_t f3 = (p_display_width / 4.0) / p_display_to_lens;\n\n\t// now we apply our oversample factor to increase our FOV. how much we oversample is always a balance we strike between performance and how much"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8b3409581def2f265897015f4176286e6d61fa325c13dc1a6c8fe8ff640f8f0e"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 326,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 324,
            "length": 1,
            "offset": 199,
            "surroundingCode": "\t// now we apply our oversample factor to increase our FOV. how much we oversample is always a balance we strike between performance and how much\n\t// we're willing to sacrifice in FOV.\n\treal_t add = ((f1 + f2) * (p_oversample - 1.0)) / 2.0;\n\tf1 += add;\n\tf2 += add;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "8098a74c06ee2491e06199afc5727b35debf1b8ca6c4ba122997a4302deb2d47"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 326,
          "offset": 52,
          "length": 3,
          "code": {
            "startLine": 324,
            "length": 3,
            "offset": 236,
            "surroundingCode": "\t// now we apply our oversample factor to increase our FOV. how much we oversample is always a balance we strike between performance and how much\n\t// we're willing to sacrifice in FOV.\n\treal_t add = ((f1 + f2) * (p_oversample - 1.0)) / 2.0;\n\tf1 += add;\n\tf2 += add;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0c9b78e7301c4d85c07092bf5fe230a043ce64de9c6c24a8b563cbeaab4178bb"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_orthogonal' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 346,
          "offset": 48,
          "length": 6,
          "code": {
            "startLine": 344,
            "length": 6,
            "offset": 50,
            "surroundingCode": "}\n\nvoid Projection::set_orthogonal(real_t p_left, real_t p_right, real_t p_bottom, real_t p_top, real_t p_znear, real_t p_zfar) {\n\tset_identity();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "7263aafe122b3950a5f1ba8244b5c5114621fad4bf2dc5bd304c3ebec3d58782"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_orthogonal' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 346,
          "offset": 81,
          "length": 6,
          "code": {
            "startLine": 344,
            "length": 6,
            "offset": 83,
            "surroundingCode": "}\n\nvoid Projection::set_orthogonal(real_t p_left, real_t p_right, real_t p_bottom, real_t p_top, real_t p_znear, real_t p_zfar) {\n\tset_identity();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "57ed199437c1c944e32474f49cf19d4ef4717f3d6f173e6b94fe4ad8e2a46643"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 349,
          "offset": 18,
          "length": 3,
          "code": {
            "startLine": 347,
            "length": 3,
            "offset": 35,
            "surroundingCode": "\tset_identity();\n\n\tcolumns[0][0] = 2.0 / (p_right - p_left);\n\tcolumns[3][0] = -((p_right + p_left) / (p_right - p_left));\n\tcolumns[1][1] = 2.0 / (p_top - p_bottom);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "b43410c4ef87082173df86b4942f337e35323824b131ef937001f0edf811b35c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 349,
          "offset": 18,
          "length": 3,
          "code": {
            "startLine": 347,
            "length": 3,
            "offset": 35,
            "surroundingCode": "\tset_identity();\n\n\tcolumns[0][0] = 2.0 / (p_right - p_left);\n\tcolumns[3][0] = -((p_right + p_left) / (p_right - p_left));\n\tcolumns[1][1] = 2.0 / (p_top - p_bottom);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "30e3fccf08a5db03ebb609ee1bc4873fdcca28624d7227a24bf4ebf57a7eb6ad"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 351,
          "offset": 18,
          "length": 3,
          "code": {
            "startLine": 349,
            "length": 3,
            "offset": 121,
            "surroundingCode": "\tcolumns[0][0] = 2.0 / (p_right - p_left);\n\tcolumns[3][0] = -((p_right + p_left) / (p_right - p_left));\n\tcolumns[1][1] = 2.0 / (p_top - p_bottom);\n\tcolumns[3][1] = -((p_top + p_bottom) / (p_top - p_bottom));\n\tcolumns[2][2] = -2.0 / (p_zfar - p_znear);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "c0b8be28a2975cdea16475d67e9a79a39a9f6f294d3e62f4b8deaccc9c39afc6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 351,
          "offset": 18,
          "length": 3,
          "code": {
            "startLine": 349,
            "length": 3,
            "offset": 121,
            "surroundingCode": "\tcolumns[0][0] = 2.0 / (p_right - p_left);\n\tcolumns[3][0] = -((p_right + p_left) / (p_right - p_left));\n\tcolumns[1][1] = 2.0 / (p_top - p_bottom);\n\tcolumns[3][1] = -((p_top + p_bottom) / (p_top - p_bottom));\n\tcolumns[2][2] = -2.0 / (p_zfar - p_znear);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "688f3e1b2224cb1dd1640a85321c13bfbd7f5c993856b4fde4e43164eeb9de93"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 353,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 351,
            "length": 1,
            "offset": 121,
            "surroundingCode": "\tcolumns[1][1] = 2.0 / (p_top - p_bottom);\n\tcolumns[3][1] = -((p_top + p_bottom) / (p_top - p_bottom));\n\tcolumns[2][2] = -2.0 / (p_zfar - p_znear);\n\tcolumns[3][2] = -((p_zfar + p_znear) / (p_zfar - p_znear));\n\tcolumns[3][3] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "9d615037af6e1fd3b107478c9ab6f4d1351494852595cd964701fe2157f2683c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 353,
          "offset": 19,
          "length": 3,
          "code": {
            "startLine": 351,
            "length": 3,
            "offset": 122,
            "surroundingCode": "\tcolumns[1][1] = 2.0 / (p_top - p_bottom);\n\tcolumns[3][1] = -((p_top + p_bottom) / (p_top - p_bottom));\n\tcolumns[2][2] = -2.0 / (p_zfar - p_znear);\n\tcolumns[3][2] = -((p_zfar + p_znear) / (p_zfar - p_znear));\n\tcolumns[3][3] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6b38626c041ee294d743881a3a1f9a61c10dc8c4ac71ba9cec7c1a7c35782c4e"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_frustum' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 366,
          "offset": 45,
          "length": 6,
          "code": {
            "startLine": 364,
            "length": 6,
            "offset": 47,
            "surroundingCode": "}\n\nvoid Projection::set_frustum(real_t p_left, real_t p_right, real_t p_bottom, real_t p_top, real_t p_near, real_t p_far) {\n\tERR_FAIL_COND(p_right <= p_left);\n\tERR_FAIL_COND(p_top <= p_bottom);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "e2c7a80eeb0443fed5f6d04af37d63b01708b92403a16c784feb9e2b2e06578b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'te' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 371,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 369,
            "length": 2,
            "offset": 43,
            "surroundingCode": "\tERR_FAIL_COND(p_far <= p_near);\n\n\treal_t *te = &columns[0][0];\n\treal_t x = 2 * p_near / (p_right - p_left);\n\treal_t y = 2 * p_near / (p_top - p_bottom);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cfef8471697989566f4ca0b8a6bc57d14cf2f14d8246a300ce2c9fc0ee7da489"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'x' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 372,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 370,
            "length": 1,
            "offset": 39,
            "surroundingCode": "\n\treal_t *te = &columns[0][0];\n\treal_t x = 2 * p_near / (p_right - p_left);\n\treal_t y = 2 * p_near / (p_top - p_bottom);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "0e08ae057e8a1246933f971dcc67f3793061436f6269cfd113ae6d384f0da144"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'y' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 373,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 371,
            "length": 1,
            "offset": 83,
            "surroundingCode": "\treal_t *te = &columns[0][0];\n\treal_t x = 2 * p_near / (p_right - p_left);\n\treal_t y = 2 * p_near / (p_top - p_bottom);\n\n\treal_t a = (p_right + p_left) / (p_right - p_left);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c3e0a585657e10befe965853939c1baf55c6070577b0b7335b95b9ce7c481b59"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 375,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 373,
            "length": 1,
            "offset": 54,
            "surroundingCode": "\treal_t y = 2 * p_near / (p_top - p_bottom);\n\n\treal_t a = (p_right + p_left) / (p_right - p_left);\n\treal_t b = (p_top + p_bottom) / (p_top - p_bottom);\n\treal_t c = -(p_far + p_near) / (p_far - p_near);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8cc76fea572409056fbe290d4126c269e88743eb0d436788fcaabe0cfb805184"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 376,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 374,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\n\treal_t a = (p_right + p_left) / (p_right - p_left);\n\treal_t b = (p_top + p_bottom) / (p_top - p_bottom);\n\treal_t c = -(p_far + p_near) / (p_far - p_near);\n\treal_t d = -2 * p_far * p_near / (p_far - p_near);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f7fe145f150436a7d5790719c15e06a6cde5dd08b31e1bee006fdae5a780f8ee"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 377,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 375,
            "length": 1,
            "offset": 114,
            "surroundingCode": "\treal_t a = (p_right + p_left) / (p_right - p_left);\n\treal_t b = (p_top + p_bottom) / (p_top - p_bottom);\n\treal_t c = -(p_far + p_near) / (p_far - p_near);\n\treal_t d = -2 * p_far * p_near / (p_far - p_near);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2aefd3d759fa0fc61fcf940018262576bbec5381a00de69f38cdb595916ee785"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 378,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 376,
            "length": 1,
            "offset": 111,
            "surroundingCode": "\treal_t b = (p_top + p_bottom) / (p_top - p_bottom);\n\treal_t c = -(p_far + p_near) / (p_far - p_near);\n\treal_t d = -2 * p_far * p_near / (p_far - p_near);\n\n\tte[0] = x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "62adeb5c7eb9ba2a499f09f4608b135084950e7f1da227c85aac32bdd9ee337d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 381,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 379,
            "length": 2,
            "offset": 14,
            "surroundingCode": "\n\tte[0] = x;\n\tte[1] = 0;\n\tte[2] = 0;\n\tte[3] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "0e8b53812001ebe7d95fb5a8ba04a33e92e39c79105e778ab710064a0a6548ec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 383,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 381,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[1] = 0;\n\tte[2] = 0;\n\tte[3] = 0;\n\tte[4] = 0;\n\tte[5] = y;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e26b4af35ca9df9fe2d94fccae7b5fc5d8c98b674767465d9a33c3d3d38f5482"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 385,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 383,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[3] = 0;\n\tte[4] = 0;\n\tte[5] = y;\n\tte[6] = 0;\n\tte[7] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "43250201a8937202913a22fadd631022155ea9714c6ef796347669393467fccb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 385,
          "offset": 5,
          "length": 1,
          "code": {
            "startLine": 383,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tte[3] = 0;\n\tte[4] = 0;\n\tte[5] = y;\n\tte[6] = 0;\n\tte[7] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8f6f43e3a00c781cb3eafa329ba0de0371b61e22a878bb30e2be9b17ad05ad4f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 386,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 384,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[4] = 0;\n\tte[5] = y;\n\tte[6] = 0;\n\tte[7] = 0;\n\tte[8] = a;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1de5e60d5f159d0252dc0562f9f207eaa4b1e0683b0fc3c050e501e00fa9afbd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 386,
          "offset": 5,
          "length": 1,
          "code": {
            "startLine": 384,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tte[4] = 0;\n\tte[5] = y;\n\tte[6] = 0;\n\tte[7] = 0;\n\tte[8] = a;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "691ff915e7f6fe7660318867cc0e56d08b621d3ae8a1af3cd1de36202f90bb73"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 387,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 385,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[5] = y;\n\tte[6] = 0;\n\tte[7] = 0;\n\tte[8] = a;\n\tte[9] = b;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8417ed955e5e6ad4e0b69bd67ea23c5a16a68f0219f80a1562d3f98802928d6a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 387,
          "offset": 5,
          "length": 1,
          "code": {
            "startLine": 385,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tte[5] = y;\n\tte[6] = 0;\n\tte[7] = 0;\n\tte[8] = a;\n\tte[9] = b;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0238cb39d4174b58428bcabdb6d23651b55c519a332c67e5e91f1bda75e15267"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 388,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 386,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[6] = 0;\n\tte[7] = 0;\n\tte[8] = a;\n\tte[9] = b;\n\tte[10] = c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "2c409cbb6d449fa013d3a7407384271a3d0fe1680ce4975effcba15ffdedac62"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 388,
          "offset": 5,
          "length": 1,
          "code": {
            "startLine": 386,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tte[6] = 0;\n\tte[7] = 0;\n\tte[8] = a;\n\tte[9] = b;\n\tte[10] = c;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "1f91c79144a741b9165b1743044d132b13097f6aa974aee18abecfb758900eba"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 389,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 387,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[7] = 0;\n\tte[8] = a;\n\tte[9] = b;\n\tte[10] = c;\n\tte[11] = -1;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9840ca8812f0feea1ad98cc25c9ff55533924842db471055864f1d38f8e4a7fc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 389,
          "offset": 5,
          "length": 1,
          "code": {
            "startLine": 387,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tte[7] = 0;\n\tte[8] = a;\n\tte[9] = b;\n\tte[10] = c;\n\tte[11] = -1;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "198036a5ad4fd780578fc4fefc53160eb866fa4867e71f49a39da539669e8000"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 390,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 388,
            "length": 2,
            "offset": 25,
            "surroundingCode": "\tte[8] = a;\n\tte[9] = b;\n\tte[10] = c;\n\tte[11] = -1;\n\tte[12] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "06acb0a88c0f5703c09e8e210a28aaec32f0729478467594b0dbef4455d4e6e3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 390,
          "offset": 5,
          "length": 2,
          "code": {
            "startLine": 388,
            "length": 2,
            "offset": 28,
            "surroundingCode": "\tte[8] = a;\n\tte[9] = b;\n\tte[10] = c;\n\tte[11] = -1;\n\tte[12] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "cc8dea0d5bf2918b58a4e520f5a6d635d604f0eb188f74be0ac95638647ee6e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 391,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 389,
            "length": 2,
            "offset": 26,
            "surroundingCode": "\tte[9] = b;\n\tte[10] = c;\n\tte[11] = -1;\n\tte[12] = 0;\n\tte[13] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7a066acdb37aa35e65ddda84ad6286bcb975085fc2cd96ab61b1d0d7bfdd348e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 391,
          "offset": 5,
          "length": 2,
          "code": {
            "startLine": 389,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\tte[9] = b;\n\tte[10] = c;\n\tte[11] = -1;\n\tte[12] = 0;\n\tte[13] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6c805745043ef3d4b53b5a4178cf5b273e73ca0d362191fbffc38ba99b82a55d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 392,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 390,
            "length": 2,
            "offset": 28,
            "surroundingCode": "\tte[10] = c;\n\tte[11] = -1;\n\tte[12] = 0;\n\tte[13] = 0;\n\tte[14] = d;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "42b594de5af529fab940c6db8d44ececf90c24a4ba9abbcd3eaed6f613dd6da9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 392,
          "offset": 5,
          "length": 2,
          "code": {
            "startLine": 390,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tte[10] = c;\n\tte[11] = -1;\n\tte[12] = 0;\n\tte[13] = 0;\n\tte[14] = d;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "092d5094913c2ba814077ee637737f863d50363152f996b352c160bff691ec27"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 393,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 391,
            "length": 2,
            "offset": 28,
            "surroundingCode": "\tte[11] = -1;\n\tte[12] = 0;\n\tte[13] = 0;\n\tte[14] = d;\n\tte[15] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a99944900098ae7dcbe6e5c25f4c885897614965770148eaf9d117a8ce698c7a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 393,
          "offset": 5,
          "length": 2,
          "code": {
            "startLine": 391,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tte[11] = -1;\n\tte[12] = 0;\n\tte[13] = 0;\n\tte[14] = d;\n\tte[15] = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "313bb3b6f63c06515d7cd0f645ab994d9f128e40c8d5c9ae63efc7e675062a02"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 394,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 392,
            "length": 2,
            "offset": 27,
            "surroundingCode": "\tte[12] = 0;\n\tte[13] = 0;\n\tte[14] = d;\n\tte[15] = 0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "999b3faa92aca3fb0a19df0bf48b0a1b945628df39656919dac66734038e5980"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 394,
          "offset": 5,
          "length": 2,
          "code": {
            "startLine": 392,
            "length": 2,
            "offset": 30,
            "surroundingCode": "\tte[12] = 0;\n\tte[13] = 0;\n\tte[14] = d;\n\tte[15] = 0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "06f0ca9bd5b9d1a392751a57627b305ad11aafe0fc9639ca0b94f21801e0931e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 395,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 393,
            "length": 2,
            "offset": 27,
            "surroundingCode": "\tte[13] = 0;\n\tte[14] = d;\n\tte[15] = 0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "6e54f08b63c2013d5b45fae4a1b1b18e3711faa59a226187ca476fe02e617928"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 395,
          "offset": 5,
          "length": 2,
          "code": {
            "startLine": 393,
            "length": 2,
            "offset": 30,
            "surroundingCode": "\tte[13] = 0;\n\tte[14] = d;\n\tte[15] = 0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9a3cb2a3b02cba59329bdbdbcb57a38ed5aa81ec8bb619ca71791a0a4c7b9211"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'/' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 403,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 401,
            "length": 1,
            "offset": 17,
            "surroundingCode": "\t}\n\n\tset_frustum(-p_size / 2 + p_offset.x, +p_size / 2 + p_offset.x, -p_size / p_aspect / 2 + p_offset.y, +p_size / p_aspect / 2 + p_offset.y, p_near, p_far);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "43966feb2906bb4fc1c0c462476e0381a360e204452b9f968a760003a2ce4f2d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'/' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 403,
          "offset": 40,
          "length": 1,
          "code": {
            "startLine": 401,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\t}\n\n\tset_frustum(-p_size / 2 + p_offset.x, +p_size / 2 + p_offset.x, -p_size / p_aspect / 2 + p_offset.y, +p_size / p_aspect / 2 + p_offset.y, p_near, p_far);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "59416b4f21c56b6fd64f9c0e833d19b63f498963d1322e6e8dbee3e5e3f9b883"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'/' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 403,
          "offset": 66,
          "length": 1,
          "code": {
            "startLine": 401,
            "length": 1,
            "offset": 69,
            "surroundingCode": "\t}\n\n\tset_frustum(-p_size / 2 + p_offset.x, +p_size / 2 + p_offset.x, -p_size / p_aspect / 2 + p_offset.y, +p_size / p_aspect / 2 + p_offset.y, p_near, p_far);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f54dd0aed702bebca40e81fc83b0d82f0d7f6b5e890b9c7dca31b1baa4a8f3ed"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'/' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 403,
          "offset": 103,
          "length": 1,
          "code": {
            "startLine": 401,
            "length": 1,
            "offset": 106,
            "surroundingCode": "\t}\n\n\tset_frustum(-p_size / 2 + p_offset.x, +p_size / 2 + p_offset.x, -p_size / p_aspect / 2 + p_offset.y, +p_size / p_aspect / 2 + p_offset.y, p_near, p_far);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1e5bc1b79a3cfce589d62b2da4f002f0205b21d145e2a5afb15433f8bb0dafdd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 407,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 405,
            "length": 1,
            "offset": 64,
            "surroundingCode": "\nreal_t Projection::get_z_far() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ab3a95676f470ab2c1c296ea913e007e5fff4c5bd3a6e6b4d36564a0ea177670"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 408,
          "offset": 26,
          "length": 6,
          "code": {
            "startLine": 406,
            "length": 6,
            "offset": 119,
            "surroundingCode": "real_t Projection::get_z_far() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a99521884a5e3dcdbe7c1dd06fccb157c6facc0dbd5821287c576db06951454b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 408,
          "offset": 38,
          "length": 6,
          "code": {
            "startLine": 406,
            "length": 6,
            "offset": 131,
            "surroundingCode": "real_t Projection::get_z_far() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "fb2bd6959ff2163239533dc40b433f6441f265534a9c9d5c1f982e3b37418e27"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 409,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 407,
            "length": 6,
            "offset": 106,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "bc62ecea1438674f37ca1eb2dc7a08b2f9a51ecefd602b3384fffab3ef64d828"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 409,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 407,
            "length": 1,
            "offset": 113,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "87e1e04eb29405eaba1ec55de4345ff84b4fcca9327b24acbccd301b74f963f8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 409,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 407,
            "length": 6,
            "offset": 118,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "ea7bc745431ba4d645a479c32756714fe2538d6b3e71838469542b3fd68073db"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 409,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 407,
            "length": 1,
            "offset": 125,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e20ee9051c14d74f5336401a7ad6023a79773588229029b7da94f64c4606131d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 410,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 408,
            "length": 6,
            "offset": 77,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "92ae3c862798c0ee747a162be7f2b8740dc2f8d0b6f3da3762fd678ad6874167"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 410,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 408,
            "length": 2,
            "offset": 84,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "176e2326f6b3d0bf2aa2a8ba53e597a4021eb98aea53cf8df1953cbf7e1da575"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 410,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 408,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "5f9d8928aceae3983b2a591ad13ac1abcc47844ad33dd883470848df78a08818"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 410,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 408,
            "length": 2,
            "offset": 97,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "44805258a3a1dce57383ad658a3f33b7c8bdc76fd071a9566932ccdf649e57ec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 411,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 409,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "46a80bd78e194388543c2fa88c132d69fd9fdce1922d3907196ffbf536cb958f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 411,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 409,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b5ddb72b6a4e432a36eac38e1fa86399070293b9118236661d682551a6a46d68"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 411,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 409,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d74ed2ea49dc83ebfc5b9a034f38dc2456fd1fea812c546e9eda4ffa523bb32e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 420,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 418,
            "length": 1,
            "offset": 65,
            "surroundingCode": "\nreal_t Projection::get_z_near() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "2429dee06694227b69c09543c71d7f2668fc21af521e7250e8a840e434b90cec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 421,
          "offset": 26,
          "length": 6,
          "code": {
            "startLine": 419,
            "length": 6,
            "offset": 120,
            "surroundingCode": "real_t Projection::get_z_near() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4082b1489609e596dbb22bc6f74d95797784e3cbf97a0ec97edca217b67c15ab"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 421,
          "offset": 38,
          "length": 6,
          "code": {
            "startLine": 419,
            "length": 6,
            "offset": 132,
            "surroundingCode": "real_t Projection::get_z_near() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "679c3faaf56ec5a078dd4f8fa99704b8e78f1a5ef91d7db92b43bc4f60f3f34f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 422,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 420,
            "length": 1,
            "offset": 113,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e3b1173f2e6107d64f6a12a8660dea93ccd1e01cec6aa4c1cc24a541f2585fb5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 422,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 420,
            "length": 1,
            "offset": 125,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c3898d841c293622e3943f750044b6e6baf4047d6ec1c35097de87e134c68f46"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 423,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 421,
            "length": 6,
            "offset": 77,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "23937c4394a153497e87ba88bce6d6414abcf99dedb24c45602568c665341cc2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 423,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 421,
            "length": 2,
            "offset": 84,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "bf86c970fb7a5bc351eb6dc181b5b4817d195369fc2aeb8795375f007fdbf8a7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 423,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 421,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "bf9a55749409f0665ab9af816a5f27d507a3f3413249becc88f518acd6a5f336"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 423,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 421,
            "length": 2,
            "offset": 97,
            "surroundingCode": "\tPlane new_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "dc644d6f47991dd2083e827e7804dace43f8edf28f1779af7a26d64cb330dfa1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 424,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 422,
            "length": 6,
            "offset": 58,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\n\tnew_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "78d368cefa5e4bbdefd97f92cb754eaf6f6ca91df4297572cd7d8e7c316dd63a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 424,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 422,
            "length": 2,
            "offset": 65,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\n\tnew_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c17c389c52893e52c3d923027eef32ecc64190755cf294a5c58b03a73b477b40"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 424,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 422,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\n\tnew_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "35112970f61af5676d175de43e9c72285354c03229b6c464dc826a4a06312ab1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 431,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 429,
            "length": 1,
            "offset": 81,
            "surroundingCode": "\nVector2 Projection::get_viewport_half_extents() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c4276ec5729b171a4173a35be4e66b2335a873ebbb722372d4471bf414931678"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 433,
          "offset": 27,
          "length": 6,
          "code": {
            "startLine": 431,
            "length": 6,
            "offset": 115,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "14407e7a3533450f476a52171129d2b4943ef25cd1fbe705762a3328050c4976"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 433,
          "offset": 39,
          "length": 6,
          "code": {
            "startLine": 431,
            "length": 6,
            "offset": 127,
            "surroundingCode": "\tconst real_t *matrix = (const real_t *)this->columns;\n\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "29799e1bd065693e0b25f18f28d6b6d350b7cad562ebcd242e3aad7564c00956"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 434,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 432,
            "length": 6,
            "offset": 86,
            "surroundingCode": "\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "092e45f0ed3ff1203c560db331945fda5b72813e714a237b2abc7e21e575c78f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 434,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 432,
            "length": 1,
            "offset": 93,
            "surroundingCode": "\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "82a99211d694a1c8fe8241d0624598c6dabb18e911bb7052f4ac997efa9077ae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 434,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 432,
            "length": 6,
            "offset": 98,
            "surroundingCode": "\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "79b672851c7816ddae5da94b81270f97bfc954ebfc34bef0030fe07cae12b07b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 434,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 432,
            "length": 1,
            "offset": 105,
            "surroundingCode": "\t///////--- Near Plane ---///////\n\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "592ed59ce40b0ba112672a07d0f080364924889a7feeebc44f058bee51c043cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 435,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 433,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "598608bf9011289c5b17ca2003d57c92577c497210e40576c4061a77533f06bf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 435,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 433,
            "length": 2,
            "offset": 85,
            "surroundingCode": "\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "76ffa30b22132eafc879fadbb381956b727d0e150c5bba9782b357c63a493f37"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 435,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 433,
            "length": 6,
            "offset": 91,
            "surroundingCode": "\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7e80b615e61319ac5be9241f97e7e60f7fd86a1e993f77d924cd57bc3e0eee62"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 435,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 433,
            "length": 2,
            "offset": 98,
            "surroundingCode": "\tPlane near_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fabd52d6636b99f22a2ca2d215f5ae4c64f6e10e3e3bd36282ae201dc239420d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 436,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 434,
            "length": 6,
            "offset": 58,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "5c1e2561cd53b4e167985ed26d0c52590607b3fe2b0b10fed0fcfa6bd7ec44a1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 436,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 434,
            "length": 2,
            "offset": 65,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e08cbca99840f1a904a03582a7b16298eca1ab051420bf77a0cfc316ee32dd4d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 436,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 434,
            "length": 6,
            "offset": 71,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d99bcfa2f80973543f10f3589ef14fbcafd4ec23840ca7891b73f46777734e40"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 436,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 434,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\t-matrix[15] - matrix[14]);\n\tnear_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c069334dbc979c3677ba331b1129018df2b182e760dc3928b47dd209ebeb6563"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 440,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 438,
            "length": 6,
            "offset": 63,
            "surroundingCode": "\n\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "5458d392ca8cd4ce19e46df2a386df9b367eccd17460bb2377ef14dc0ea39ef0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 440,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 438,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\n\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b4d62ed9e5f7951e0e88278778567d97704e7e1103e8a8bcaa9bd2475ae2a112"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 441,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 439,
            "length": 6,
            "offset": 88,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4ec7a7093884770852ac11e9291cd649985fdf2d02d69ff40129928b4742cd6b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 441,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 439,
            "length": 1,
            "offset": 95,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "32f9d58e5facb6d178e1d08ae4b672e6ded3c06a9876a8ff801a7d5a53a801d7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 441,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 439,
            "length": 6,
            "offset": 100,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "5a8fd676b8b69789679825e15be539e654c3960d6b38dfdab87a05126fa30ae5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 442,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 440,
            "length": 6,
            "offset": 79,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "dc9a3290babfd4eb80d896ef5753f2933e6d1e55dac476fd324ab4417695e604"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 442,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 440,
            "length": 2,
            "offset": 86,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f03e4dd3923c6f8cd4054bb30a4ec0d62e727cad3cc9199e1cda268e3d97391f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 442,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 440,
            "length": 6,
            "offset": 92,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9cd834d28221ef20c1de5353f9b09ab3a75220db33c1411bc4ea3ae2e5935439"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 442,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 440,
            "length": 1,
            "offset": 99,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "04ae3a5a72bbfd3979ed6cc7dd508be58517b6d97a5c8cd4ec032acfb4b806aa"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 443,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 441,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9f1e1070e0e6f48ed0a6e3ef74479d3bb54781d5eca450f928755a47be569a72"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 443,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 441,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9d6f33a14f10ce1823e1c0e5f9990c26ac8404d410530a6326b27064e63d9f95"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 446,
          "offset": 26,
          "length": 6,
          "code": {
            "startLine": 444,
            "length": 6,
            "offset": 52,
            "surroundingCode": "\tright_plane.normalize();\n\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d54d092478330968615cfb7e3479d57e86cbb150045b5da6d3822fd1b9e3dd30"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 446,
          "offset": 38,
          "length": 6,
          "code": {
            "startLine": 444,
            "length": 6,
            "offset": 64,
            "surroundingCode": "\tright_plane.normalize();\n\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "63b75d9bc7306aa9c1303859cf5f9d732d87a7ee713c1a0761616d854054b13c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 447,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 445,
            "length": 6,
            "offset": 52,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7bc5f45cb52ad2e87cf4b03a60e34405870b5da9289572148e3769994946acac"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 447,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 445,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ac1b9e390adcb8b8e5498d4f69a956bd1b751fd87d2456aacbc200b6617fb2e7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 447,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 445,
            "length": 6,
            "offset": 64,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "25c59721b58ced5fb254976260ae753b1d73950e8350db34f73729bf06e8e26f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 447,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 445,
            "length": 1,
            "offset": 71,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ac2baa037347bf02915e31941cf1789975985326dda33a588be84048888a4659"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 448,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 446,
            "length": 6,
            "offset": 77,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f42f37b3e5799ab65ff29bd4b17878235ef8685567cf63b7a8d07f7a3f55a2ac"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 448,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 446,
            "length": 2,
            "offset": 84,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d4248ea20ffcf86c31c3cd36062bd670c5356b3f1e71c6c3ee8741fb9fe055b3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 448,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 446,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "482b37b079ec1afe42f109183bd232ee379d968e25e749306df1b8cfbcd85db8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 448,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 446,
            "length": 1,
            "offset": 97,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ce06b523a2540bb6515e643d62f867b0cf519446c3e5c78c880a2c47abb9c9ac"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 449,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 447,
            "length": 6,
            "offset": 57,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d32d070268af7a460bc1be4b41d58b2d37ab12de15f5a1b0e1f71d6b285d4a3d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 449,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 447,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "76b61c402e7789834d4b1afc7f988c3c4b902287df694520453d45e7a1b87ca6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 449,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 447,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e489efdff475636989ba3c9074593b502c21448b0574bb845e28e5efc278f899"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 449,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 447,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b5b8cc9ab4aa6d1dff6459fa0d81de9d7f874ad0eaf4fdc6cb903b58e6f3e24c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 459,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 457,
            "length": 1,
            "offset": 82,
            "surroundingCode": "\nVector2 Projection::get_far_plane_half_extents() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\t///////--- Far Plane ---///////\n\tPlane far_plane = Plane(matrix[3] - matrix[2],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "cfd510e2a72c12c4be87fa853c560df630253feabe57ea1770f1d9cccf5c3a7f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 462,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 460,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\t///////--- Far Plane ---///////\n\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ecea68ed0ac00c2ec6ea7fe5cc42d45306c95bec363070988ea3e48231c93f89"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 462,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 460,
            "length": 6,
            "offset": 96,
            "surroundingCode": "\t///////--- Far Plane ---///////\n\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4223bad59a9f3254b9de5b17b9be838d5acef6abd6c8fde0a0970120d51700e7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 462,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 460,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\t///////--- Far Plane ---///////\n\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "2ac7dadef01837c449ae9b900f3e77d911753a7f46ce07c1e4ddf26a9b7d7e74"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 463,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 461,
            "length": 6,
            "offset": 77,
            "surroundingCode": "\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "80dc66a06da3be7010a9245f0c600ff4c24bd2e10ee1ba741d888bd1592a2de4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 463,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 461,
            "length": 2,
            "offset": 84,
            "surroundingCode": "\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "996c0746e8511c29a40e319b4e792f4a281f70cb996d75499368afd1494b61df"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 463,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 461,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a273cc4da0decc76dc0f1e1d378942fab4766da7f98c202b4040f36106502a00"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 463,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 461,
            "length": 2,
            "offset": 97,
            "surroundingCode": "\tPlane far_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "236d4af34ba78e217b1d6f7db4a4df0efe3545d8184f5defc534dfc4883b41ea"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 464,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 462,
            "length": 2,
            "offset": 65,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "213176328b89d85fb9445b3e28e7f4f107b5f73e88f04e7508628e71c69765e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 464,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 462,
            "length": 6,
            "offset": 71,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "77e765a8aed7505a351391c2aa12bf3a42a84ac250620fcbc01f2e2caf6397f9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 464,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 462,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\t-matrix[15] + matrix[14]);\n\tfar_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d0a0cd2ebef7120e13f6af7860097b735813c7737959f5fae1db1603ed6475a4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 468,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 466,
            "length": 6,
            "offset": 63,
            "surroundingCode": "\n\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8f3ef19141b1ce8755d72f867374fd35054b1b3775db23ac85f5dd83d08918eb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 468,
          "offset": 40,
          "length": 6,
          "code": {
            "startLine": 466,
            "length": 6,
            "offset": 75,
            "surroundingCode": "\n\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "58725a2d7e288b2554d031f7de5ac91f2dca4a2c09ed5c669581af79762ba1f1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 469,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 467,
            "length": 6,
            "offset": 88,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "944598597b88ec43f393859953e531d630531f75985c695c216e8423224fad6d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 469,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 467,
            "length": 1,
            "offset": 95,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "112550e615257e39afe731e1cba9f41d2bca3681ad4a33fb52729e7e55903fca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 469,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 467,
            "length": 6,
            "offset": 100,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f7d4b307fa3088fcb12e1b316cd24e121ff34e510ab2e1888db16846456983af"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 470,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 468,
            "length": 6,
            "offset": 79,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "593f303830708eeb2f3ad05bf4321bd647a01a7ad2016feb9e79c053487ce538"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 470,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 468,
            "length": 2,
            "offset": 86,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f6e12529978e546ddb07b984620ea0d7c0b057207d2201032d373499e9230028"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 470,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 468,
            "length": 6,
            "offset": 92,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9226d6a543ed2de28f7a7c7871bb6cd42838b0cd14982d7878df76b00164fd67"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 470,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 468,
            "length": 1,
            "offset": 99,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "59332ea04e87fa499f6be26a769a2a8d8d9fbe457f36c4df04b6878a1b5c78dc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 471,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 469,
            "length": 6,
            "offset": 57,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "ff0c3637941998a2b55ac68922c75c6262f981c40d605d65b89ef901bf21a931"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 471,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 469,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8fb28f62120c0982891f0519f62ecdc1560b3a3275c69ea1f8afd9eeebb8085b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 471,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 469,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e93e5ed4f73acf683d5a792684167aa3e77fd166ff9cc28adfa5f7c538346b08"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 471,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 469,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5aeb3dcb9b45a0a741355cb36b539021e1299852d3d0f20f19720cfc6112b027"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 474,
          "offset": 26,
          "length": 6,
          "code": {
            "startLine": 472,
            "length": 6,
            "offset": 52,
            "surroundingCode": "\tright_plane.normalize();\n\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c7d6233a4bf868aff3240590e897e62bcaefdb97bf8b876fa7c7f45da3c3868a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 474,
          "offset": 38,
          "length": 6,
          "code": {
            "startLine": 472,
            "length": 6,
            "offset": 64,
            "surroundingCode": "\tright_plane.normalize();\n\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d6a650dd8245f3864edad59c7a567230c6c840d7dd21668de906392449e07149"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 475,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 473,
            "length": 6,
            "offset": 52,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a3b1b05b7aafb6234cf7505edce57719d2f8ecc5e78bbcadebef4a7fffe8b0b7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 475,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 473,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "38c405e635a03df30bc4594d7d1e27df11199686239371d58c7130fb601e4041"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 475,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 473,
            "length": 6,
            "offset": 64,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "ed94753b013a7dc6a4dda59d4c49a11ad58f12a90384689d21e7a403b8edfba9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 475,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 473,
            "length": 1,
            "offset": 71,
            "surroundingCode": "\n\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fd8ffa73de0ceb0ccdb6f5af89ba0bbe580704a3a0262d427f11392146ffcc98"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 476,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 474,
            "length": 2,
            "offset": 84,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e7985026507f7b29eacd34240ab3ad60a7a3f777aa9f82cce2742ed6c8fc5d1f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 476,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 474,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c8d1dd70c21de3499012332382e7e6bd194c1f8def451acfbc87452295027cf2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 476,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 474,
            "length": 1,
            "offset": 97,
            "surroundingCode": "\tPlane top_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "69ad221272fc6733d1e15d5f690c1a561c6dd77be71d90c7d1510f73767e4989"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 477,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 475,
            "length": 6,
            "offset": 57,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "51859a27242ec634c234d214c389868fe063a0caeef539c13a3cc70ac23c31e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 477,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 475,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "31ad583db8d1b447f9a5686b9ff23c485fce2eb13bf4d60b4fe257d17ed36c82"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 477,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 475,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "35d3215191616912b228c82a63b07335b222ddcaa89a25af8af89c35ccc4c452"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 477,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 475,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\t-matrix[15] + matrix[13]);\n\ttop_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f5be16b7170afa0a19398248d0b52d0a581765a49a5b7f016a42220a7079023f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'get_endpoints' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 486,
          "offset": 18,
          "length": 13,
          "code": {
            "startLine": 484,
            "length": 13,
            "offset": 20,
            "surroundingCode": "}\n\nbool Projection::get_endpoints(const Transform3D &p_transform, Vector3 *p_8points) const {\n\tArray planes = get_projection_planes(Transform3D());\n\tconst Planes intersections[8][3] = {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "4d2bb2a7f0e56216f2884cc817016da3edaf3836a7adfdb307f2b769c2b5a6e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 488,
          "offset": 8,
          "length": 6,
          "code": {
            "startLine": 486,
            "length": 6,
            "offset": 152,
            "surroundingCode": "bool Projection::get_endpoints(const Transform3D &p_transform, Vector3 *p_8points) const {\n\tArray planes = get_projection_planes(Transform3D());\n\tconst Planes intersections[8][3] = {\n\t\t{ PLANE_FAR, PLANE_LEFT, PLANE_TOP },\n\t\t{ PLANE_FAR, PLANE_LEFT, PLANE_BOTTOM },"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "8d723b2d6f1bb8034ac166fdee44e9915064c8f01358f88e9a6cb85f4957c70d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 499,
          "offset": 22,
          "length": 1,
          "code": {
            "startLine": 497,
            "length": 1,
            "offset": 26,
            "surroundingCode": "\t};\n\n\tfor (int i = 0; i < 8; i++) {\n\t\tVector3 point;\n\t\tPlane a = planes[intersections[i][0]];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fff7a4a376618062c60c3b77145f052cca00d146db7b27e1789f64bf2ebd4702"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 501,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 499,
            "length": 1,
            "offset": 56,
            "surroundingCode": "\tfor (int i = 0; i < 8; i++) {\n\t\tVector3 point;\n\t\tPlane a = planes[intersections[i][0]];\n\t\tPlane b = planes[intersections[i][1]];\n\t\tPlane c = planes[intersections[i][2]];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "86e77c8aa26f3b7157f862ebfb9e21c56d530841aab9f0e6ef4fc25186e3cec3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 501,
          "offset": 20,
          "length": 13,
          "code": {
            "startLine": 499,
            "length": 13,
            "offset": 67,
            "surroundingCode": "\tfor (int i = 0; i < 8; i++) {\n\t\tVector3 point;\n\t\tPlane a = planes[intersections[i][0]];\n\t\tPlane b = planes[intersections[i][1]];\n\t\tPlane c = planes[intersections[i][2]];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "f7e8223bbfc4084d27280dddeba496d2f69398e8e42c128d505f7340b7f29a86"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 502,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 500,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\t\tVector3 point;\n\t\tPlane a = planes[intersections[i][0]];\n\t\tPlane b = planes[intersections[i][1]];\n\t\tPlane c = planes[intersections[i][2]];\n\t\tbool res = a.intersect_3(b, c, &point);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f8060cc84dfc4aecfd8ca6df608271e3d980b7d9584dbc596c36632d9629707b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 502,
          "offset": 20,
          "length": 13,
          "code": {
            "startLine": 500,
            "length": 13,
            "offset": 77,
            "surroundingCode": "\t\tVector3 point;\n\t\tPlane a = planes[intersections[i][0]];\n\t\tPlane b = planes[intersections[i][1]];\n\t\tPlane c = planes[intersections[i][2]];\n\t\tbool res = a.intersect_3(b, c, &point);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "11509c5a40f012ce76be6a59f1e4285cd61ba1c5e3a81a562d9568bf1c772153"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'c' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 503,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 501,
            "length": 1,
            "offset": 90,
            "surroundingCode": "\t\tPlane a = planes[intersections[i][0]];\n\t\tPlane b = planes[intersections[i][1]];\n\t\tPlane c = planes[intersections[i][2]];\n\t\tbool res = a.intersect_3(b, c, &point);\n\t\tERR_FAIL_COND_V(!res, false);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "69cb815f7093b8991084c3c12100df1167d3bb888d1e7039835e940c454d2fb3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 503,
          "offset": 20,
          "length": 13,
          "code": {
            "startLine": 501,
            "length": 13,
            "offset": 101,
            "surroundingCode": "\t\tPlane a = planes[intersections[i][0]];\n\t\tPlane b = planes[intersections[i][1]];\n\t\tPlane c = planes[intersections[i][2]];\n\t\tbool res = a.intersect_3(b, c, &point);\n\t\tERR_FAIL_COND_V(!res, false);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a3f85207bb968e5af04a3cd89e565ae09aa218f7153e938022f6b94a422de9ed"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 520,
          "offset": 16,
          "length": 1,
          "code": {
            "startLine": 518,
            "length": 1,
            "offset": 31,
            "surroundingCode": "\n\tArray planes;\n\tplanes.resize(6);\n\n\tconst real_t *matrix = (const real_t *)this->columns;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d6962978e964d1ca16a46aa56604b15ef59ac0bf8097f6b6f1ff2eecef6a5527"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 522,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 520,
            "length": 1,
            "offset": 44,
            "surroundingCode": "\tplanes.resize(6);\n\n\tconst real_t *matrix = (const real_t *)this->columns;\n\n\tPlane new_plane;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "be92f17d88bf297649b52dec5c9707069caaddad02dbda72521d97192d27bcdd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 527,
          "offset": 20,
          "length": 6,
          "code": {
            "startLine": 525,
            "length": 6,
            "offset": 54,
            "surroundingCode": "\n\t///////--- Near Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1438f40b2e2c27218b826d04376299043f8d9cb557f3f61ad51e29e39c45cea0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 527,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 525,
            "length": 6,
            "offset": 66,
            "surroundingCode": "\n\t///////--- Near Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8a3365a5d29dc1938dd911818606c79b878d005682766b5a44a3e0832afd4fb1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 528,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 526,
            "length": 1,
            "offset": 86,
            "surroundingCode": "\t///////--- Near Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\tmatrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f9bffe799217c38542f82e9e506ab4204f28466fdf7a57d607e8ef1c237d2633"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 528,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 526,
            "length": 1,
            "offset": 98,
            "surroundingCode": "\t///////--- Near Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\tmatrix[15] + matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ae7e5499f3509423e818d175a8c78f1afa13d3456a4c459da215ca0c727c6738"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 529,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 527,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\tmatrix[15] + matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "cd620d7901eb8ec6e3320ea2ca8b0a23b3a631622d5bbe04e14da0c361481683"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 529,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 527,
            "length": 2,
            "offset": 91,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[2],\n\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\tmatrix[15] + matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d25fb2a4bce9c031961ffcf784307aa2176b2cf1c54db270b7d07f4818098ae8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 530,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 528,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\tmatrix[15] + matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c3d289a1429d52b779d59a054d0be861861a50ace18716ec2654f9f3e9a5be11"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 530,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 528,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[6],\n\t\t\tmatrix[11] + matrix[10],\n\t\t\tmatrix[15] + matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6946a0fdb156a7893af8e968629fa8b6d5b1744d875f60ba22d72d26d7097202"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 538,
          "offset": 20,
          "length": 6,
          "code": {
            "startLine": 536,
            "length": 6,
            "offset": 53,
            "surroundingCode": "\n\t///////--- Far Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "83028604dc974f3e5da9fb463a853f2ef8ce459e15a986c728bcef1c7c8620ba"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 538,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 536,
            "length": 6,
            "offset": 65,
            "surroundingCode": "\n\t///////--- Far Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "222fb605f6f0a27ab8b93ed1634161432255d95207af2980d4cf8c8215f624a4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 539,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 537,
            "length": 1,
            "offset": 85,
            "surroundingCode": "\t///////--- Far Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "982eb99f09ddee1983ef00b9b871d6f317d7bae0cfe97d6bad7fb03d7c3b472d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 539,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 537,
            "length": 1,
            "offset": 97,
            "surroundingCode": "\t///////--- Far Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4acd66face5d836f90c2d3539902907a4c56446aeecd5df6f45aa41c32c79dcb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 540,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 538,
            "length": 6,
            "offset": 71,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b08347ea26d21a0730ccd2f62b035e8d5bac1b39e29b843c77a5484dfdedb6f8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 540,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 538,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9d1119b70ec968cbf4efd7a513ce8fa787c6ba2dad54afeca3c7098e8043b01d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 540,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 538,
            "length": 6,
            "offset": 84,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1f90d94f78fcbacc25dcf14bbed720b5c4405daa5c1796a3ed0a348d698d47ec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 540,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 538,
            "length": 2,
            "offset": 91,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[2],\n\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "13e9e51c039a5db76665307aa3344b18914334291ca31464599c49ec40445e35"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 541,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 539,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "21ea53f12a9e6076f4197cce25fc5218570948eb9a663f4ed0b1db9cad6a9637"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 541,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 539,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "95b148cd2f21171e07d26f3a7c94fc8ebbc337985aed174a7bdd0d2d758a0e6e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 541,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 539,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[6],\n\t\t\tmatrix[11] - matrix[10],\n\t\t\tmatrix[15] - matrix[14]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "10307a4f8646ffca814cd367c63b00732dc44b3439f53799d647434f7b2004a9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 549,
          "offset": 32,
          "length": 6,
          "code": {
            "startLine": 547,
            "length": 6,
            "offset": 66,
            "surroundingCode": "\n\t///////--- Left Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[0],\n\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "2df60ed0103c0ca27e56942cc8f8fe8c194e28afe6e40b96bfc6c6ff55802eaa"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 550,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 548,
            "length": 1,
            "offset": 86,
            "surroundingCode": "\t///////--- Left Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[0],\n\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4d2dff2bb4eda164f5a24d2322260342b36fc1d0d924b761f05a659bb4856bbb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 551,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 549,
            "length": 6,
            "offset": 71,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[0],\n\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e0d7058c194fd58a9a078502d816fa8afbe78d6753c100919de41b318c86718a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 551,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 549,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[0],\n\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "8bf1d074c4b404344788ed7401e8f2bae7449d4e348f4c118b032504f722880a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 551,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 549,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[0],\n\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "aa74295572eddb67c7005beb49c7dd15ad5a280deca3976d30c6f734ea3106d4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 552,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 550,
            "length": 6,
            "offset": 56,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b40ffea943d261f3ca72e39c975a39277b9538d273bfd9b57f0f71f46eec9c9b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 552,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 550,
            "length": 2,
            "offset": 63,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0d33d20a145f1a0273e5b730e7fb4f9d17ed9fe4160622a5881b63804f74d53c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 552,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 550,
            "length": 2,
            "offset": 76,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[4],\n\t\t\tmatrix[11] + matrix[8],\n\t\t\tmatrix[15] + matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "da731c77c1cba9c1b9b4ea4415b4b877e6c3373a48e441741dc332283c479f9e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 560,
          "offset": 20,
          "length": 6,
          "code": {
            "startLine": 558,
            "length": 6,
            "offset": 53,
            "surroundingCode": "\n\t///////--- Top Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8737b929b0d18f032058c332139c923c561d528b55db91757018cf1f56e3e1e5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 561,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 559,
            "length": 6,
            "offset": 78,
            "surroundingCode": "\t///////--- Top Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "42f7d2371441ea39a85c24ee7e258050272db77ee7c1f16dabc2b5c07cd8fffc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 561,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 559,
            "length": 1,
            "offset": 85,
            "surroundingCode": "\t///////--- Top Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "446609dc6782a5941bba7c5b29ee04dd83de8794b9012948428561f54e740356"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 561,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 559,
            "length": 6,
            "offset": 90,
            "surroundingCode": "\t///////--- Top Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "738ceb3163e62d0c247de42e16c91c9bb167d8aa4866b6e0d7a87af3fc0a0e0a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 561,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 559,
            "length": 1,
            "offset": 97,
            "surroundingCode": "\t///////--- Top Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d209bf477e74fee96994cc99ad3df321e01f0b94a60e515d7ba2a5b89a5ca7d9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 562,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 560,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "db6acf230cfff0c609dd2bef9774efc9c65317e6fd55a094244d6fea512127ad"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 562,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 560,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[1],\n\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "03e201712c2c6c33e6aef74a0a51f52becfbba50717f1a5f1cf58b7013fd2eef"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 563,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 561,
            "length": 6,
            "offset": 56,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "39ccf62553d6d2b1812f039f1b2235bc2393dc9f8bec8e9e5c5fd143d3273643"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 563,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 561,
            "length": 2,
            "offset": 63,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6bce19cf01620636ca6a55bb6ad08f427301f636d113624ffd580e214ef11f9f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 563,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 561,
            "length": 2,
            "offset": 76,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[5],\n\t\t\tmatrix[11] - matrix[9],\n\t\t\tmatrix[15] - matrix[13]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "56d3fc5e71b6b7e594384ee7ff63f0926f24ea247a13d638df97a816e7dda4a3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 572,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 570,
            "length": 1,
            "offset": 87,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "46e23c946c006e86dce01b19672b7d68e1eb1228c868fb64122d63b7edd385b3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 572,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 570,
            "length": 6,
            "offset": 92,
            "surroundingCode": "\t///////--- Right Plane ---///////\n\tnew_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "35d4fb58ca03e64b8689885a0146aed9af717c376dd5a85ba3ba581798ee8843"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 573,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 571,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ae976a1db6332458947fcb43121e87471285def9c22c20f8752c81e700d49756"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 573,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 571,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "10176208a971c421c7396dd867ed25256e8742904b646890e2055a9419c592a8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 574,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 572,
            "length": 6,
            "offset": 56,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "55f24f8cc4bd3eb386034f7e6fd38996d0324555de924b143dc16d1a1321d088"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 574,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 572,
            "length": 2,
            "offset": 63,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "35409a022ebc662006251e3c3d37571dbacdc961ebea770fbf1f5216627fd487"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 574,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 572,
            "length": 6,
            "offset": 69,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "68a44d4b1714f9eecef04ff3a0ba8dfffaa664dc4668c82d33aca7b023985a32"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 574,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 572,
            "length": 2,
            "offset": 76,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\tmatrix[15] - matrix[12]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a62b02a291f296435f219ab854fe2dc4f0d6fa8bc197e71c0eb8fdd802c8fc4d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 582,
          "offset": 20,
          "length": 6,
          "code": {
            "startLine": 580,
            "length": 6,
            "offset": 56,
            "surroundingCode": "\n\t///////--- Bottom Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e9c7df2684c6edea4fbade5b0ac08e705ad49ed47c61c9beb4f0da071df36c79"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 583,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 581,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\t///////--- Bottom Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "616c72f36ba56f8a6e0e8885085c6e3c39e7d009e7551b4a94d28754136c1e03"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 583,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 581,
            "length": 1,
            "offset": 88,
            "surroundingCode": "\t///////--- Bottom Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7ce5a8476675e3e3c74fe3ee073ec7df201ed0ea29139a4f4192f5d48c8e7b05"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 583,
          "offset": 16,
          "length": 6,
          "code": {
            "startLine": 581,
            "length": 6,
            "offset": 93,
            "surroundingCode": "\t///////--- Bottom Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7d0d7fbfd0a986aeeca338ab9fc13c22074af818095f428d571d329680853f8a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 583,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 581,
            "length": 1,
            "offset": 100,
            "surroundingCode": "\t///////--- Bottom Plane ---///////\n\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d402b7996a3eabb7a4ebb8d6d38cb5ad18bd0cb840164a147607492016c1e132"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 584,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 582,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "de5b0e7a72f8b86990502a0494d79c544d6602026be6e4bd6c402159213c0063"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 584,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 582,
            "length": 6,
            "offset": 84,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e64e8fe7fce0a8403f4c758367670520a47f5e7ed144793d93b1b2ddd6d0c0c3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 584,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 582,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\tnew_plane = Plane(matrix[3] + matrix[1],\n\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e253a20f1477ee7f1a4b91d491b99a82c3ab09d751b8d2de3f9e4a220f300c7f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 585,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 583,
            "length": 2,
            "offset": 63,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b8b60c4382af8606cfb2a40dc9eb7d7249d7e02203ea4a01fff2b443e68cd7df"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 585,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 583,
            "length": 6,
            "offset": 69,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "f2b1cc892c51fbcedaf206016611025ad57779ec991c907326e1b1d8f8b08f77"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 585,
          "offset": 24,
          "length": 2,
          "code": {
            "startLine": 583,
            "length": 2,
            "offset": 76,
            "surroundingCode": "\t\t\tmatrix[7] + matrix[5],\n\t\t\tmatrix[11] + matrix[9],\n\t\t\tmatrix[15] + matrix[13]);\n\n\tnew_plane.normal = -new_plane.normal;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "67cb89db063056bab89b308e8a7c164c500dfec00b790ed5b34638f0fce6388d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 590,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 588,
            "length": 1,
            "offset": 33,
            "surroundingCode": "\tnew_plane.normalize();\n\n\tplanes[5] = p_transform.xform(new_plane);\n\n\treturn planes;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a0597df2042af2303d7b1f524f5fb6e78b9e63a0d7956115e1912c424567b1fe"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 596,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 594,
            "length": 2,
            "offset": 54,
            "surroundingCode": "\nProjection Projection::inverse() const {\n\tProjection cm = *this;\n\tcm.invert();\n\treturn cm;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6700507859ef40f4970aa0e184e347e1b20d3dcd4bc5887d56499065b5c41f4b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-cognitive-complexity",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'invert' has cognitive complexity of 53 (threshold 25)",
      "detailsInfo": "function-cognitive-complexity",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 601,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 599,
            "length": 6,
            "offset": 20,
            "surroundingCode": "}\n\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-cognitive-complexity"
      },
      "hash": "3e60c2e07f0f6d19d06b6db10a28c8564eb461ab44295f225ae96e847860380a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 2,
          "length": 3,
          "code": {
            "startLine": 600,
            "length": 3,
            "offset": 30,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "1c6d65e490cd116f3f99283cace319f7fadc022a6e394e38d4e0edceda0486c4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'i' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 600,
            "length": 1,
            "offset": 34,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "3a6940853ffec9b094c47fa1237e27689a7fb1e34c69cf5db592c1dae4001e3d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'i' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 6,
          "length": 1,
          "code": {
            "startLine": 600,
            "length": 1,
            "offset": 34,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "66dcf762626db3ced5a25655ac52137e698bbdbca4a1608c9000cbdc3289bc51"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'j' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 600,
            "length": 1,
            "offset": 37,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "9de89e6b846146d5ac1faa81db757342b7c2fa3cd6bafb7d94c39a043a7469e5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'j' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 600,
            "length": 1,
            "offset": 37,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3b55cd657c90f252050d378126ffc436187406ea6f1e346deb790568c4fb0cf4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'k' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 600,
            "length": 1,
            "offset": 40,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "0a8ab760fc2eb17558c21fc64eb14cf25f3edec702a95e158d4964e4045b4fd3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'k' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 602,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 600,
            "length": 1,
            "offset": 40,
            "surroundingCode": "\nvoid Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "11dfc6a1ab87c70b08166faa4125f93e61a7fcf99023de7434f5a2821a003077"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 603,
          "offset": 2,
          "length": 3,
          "code": {
            "startLine": 601,
            "length": 3,
            "offset": 43,
            "surroundingCode": "void Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */\n\treal_t hold; /* Temporary storage */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "eb26e7214eb11ba081055f5e51d284488121fb01503fedbec545bdd2b9113835"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 603,
          "offset": 2,
          "length": 3,
          "code": {
            "startLine": 601,
            "length": 3,
            "offset": 43,
            "surroundingCode": "void Projection::invert() {\n\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */\n\treal_t hold; /* Temporary storage */"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "2680d901e63d237a6aa4cce18402026181721099c42a684dece3020299ee8812"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'pvt_val' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 604,
          "offset": 9,
          "length": 7,
          "code": {
            "startLine": 602,
            "length": 7,
            "offset": 79,
            "surroundingCode": "\tint i, j, k;\n\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */\n\treal_t hold; /* Temporary storage */\n\treal_t determinant = 1.0f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "e31846132748b30ead1307d7e3a22aece6894a1952bd5cc2ffb9988b3a18480f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'hold' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 605,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 603,
            "length": 4,
            "offset": 119,
            "surroundingCode": "\tint pvt_i[4], pvt_j[4]; /* Locations of pivot matrix */\n\treal_t pvt_val; /* Value of current pivot element */\n\treal_t hold; /* Temporary storage */\n\treal_t determinant = 1.0f;\n\tfor (k = 0; k < 4; k++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "3db14ca034bb5c71f6274a6b66bd2614d791d918bd2d8e0b09ce160ed57c61dd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 606,
          "offset": 23,
          "length": 4,
          "code": {
            "startLine": 604,
            "length": 4,
            "offset": 114,
            "surroundingCode": "\treal_t pvt_val; /* Value of current pivot element */\n\treal_t hold; /* Temporary storage */\n\treal_t determinant = 1.0f;\n\tfor (k = 0; k < 4; k++) {\n\t\t/** Locate k'th pivot element **/"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "fec0303979a8582468ead36db14dd4c3ed933c5da731136df65c5af8376e65cb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 609,
          "offset": 13,
          "length": 7,
          "code": {
            "startLine": 607,
            "length": 7,
            "offset": 75,
            "surroundingCode": "\tfor (k = 0; k < 4; k++) {\n\t\t/** Locate k'th pivot element **/\n\t\tpvt_val = columns[k][k]; /** Initialize for search **/\n\t\tpvt_i[k] = k;\n\t\tpvt_j[k] = k;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "c0b3513c605140a8cff7e8c52ea27d72f17d821d7e23b8b75fa869e15f839800"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 610,
          "offset": 3,
          "length": 5,
          "code": {
            "startLine": 608,
            "length": 5,
            "offset": 95,
            "surroundingCode": "\t\t/** Locate k'th pivot element **/\n\t\tpvt_val = columns[k][k]; /** Initialize for search **/\n\t\tpvt_i[k] = k;\n\t\tpvt_j[k] = k;\n\t\tfor (i = k; i < 4; i++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "04b79d1a8ec4bd20aecc0cd0391076cd8bf7f2d5c8afd5cbffc44c59ebb2bcb8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 611,
          "offset": 3,
          "length": 5,
          "code": {
            "startLine": 609,
            "length": 5,
            "offset": 75,
            "surroundingCode": "\t\tpvt_val = columns[k][k]; /** Initialize for search **/\n\t\tpvt_i[k] = k;\n\t\tpvt_j[k] = k;\n\t\tfor (i = k; i < 4; i++) {\n\t\t\tfor (j = k; j < 4; j++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "3d21fd2141a7cc279ed838cbc0fbc0f5a57bfefaf16fb98bf988a34d8515b46e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 614,
          "offset": 19,
          "length": 7,
          "code": {
            "startLine": 612,
            "length": 7,
            "offset": 75,
            "surroundingCode": "\t\tfor (i = k; i < 4; i++) {\n\t\t\tfor (j = k; j < 4; j++) {\n\t\t\t\tif (Math::abs(columns[i][j]) > Math::abs(pvt_val)) {\n\t\t\t\t\tpvt_i[k] = i;\n\t\t\t\t\tpvt_j[k] = j;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "e52fed499835c61d0d95fbdc45938dbc07be955aa0890028dd3876435fdbbe9c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 616,
          "offset": 6,
          "length": 5,
          "code": {
            "startLine": 614,
            "length": 5,
            "offset": 81,
            "surroundingCode": "\t\t\t\tif (Math::abs(columns[i][j]) > Math::abs(pvt_val)) {\n\t\t\t\t\tpvt_i[k] = i;\n\t\t\t\t\tpvt_j[k] = j;\n\t\t\t\t\tpvt_val = columns[i][j];\n\t\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "829c7f511c9169a6bafe685c77ed232677f6465da41de2b483a9bc28dd06ee5a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 617,
          "offset": 16,
          "length": 7,
          "code": {
            "startLine": 615,
            "length": 7,
            "offset": 53,
            "surroundingCode": "\t\t\t\t\tpvt_i[k] = i;\n\t\t\t\t\tpvt_j[k] = j;\n\t\t\t\t\tpvt_val = columns[i][j];\n\t\t\t\t}\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "0ca98a018525075d838c3f9664d065442b6c592c83315e78386053c2f78f4fff"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 629,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 627,
            "length": 5,
            "offset": 61,
            "surroundingCode": "\n\t\t/** \"Interchange\" rows (with sign change stuff) **/\n\t\ti = pvt_i[k];\n\t\tif (i != k) { /** If rows are different **/\n\t\t\tfor (j = 0; j < 4; j++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a6db95bc92a8d833b9c37def35e0fce39b8302f484ea5734a2be390c5cf6dce7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 632,
          "offset": 13,
          "length": 7,
          "code": {
            "startLine": 630,
            "length": 7,
            "offset": 87,
            "surroundingCode": "\t\tif (i != k) { /** If rows are different **/\n\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\thold = -columns[k][j];\n\t\t\t\tcolumns[k][j] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "a8413dc51fbe0bb4f261cb52cd5f1c70868092a262c7ec9a76b13c4eab02632e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 633,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 631,
            "length": 7,
            "offset": 60,
            "surroundingCode": "\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\thold = -columns[k][j];\n\t\t\t\tcolumns[k][j] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "67218d05454a96c7229caa2cc420c650ce4b3e4f39bc60a266278da9a8b4f3c7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 633,
          "offset": 21,
          "length": 7,
          "code": {
            "startLine": 631,
            "length": 7,
            "offset": 76,
            "surroundingCode": "\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\thold = -columns[k][j];\n\t\t\t\tcolumns[k][j] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "3c0c5f9f9ed3c4228760fcd5777cb8c6ad34d010b3f20ba99e6040c8e12fd475"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 634,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 632,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\t\t\t\thold = -columns[k][j];\n\t\t\t\tcolumns[k][j] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "68853c64cba759d9e103c5f41d7dca69708f9b968d26c37ef86e6f1979946e12"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 639,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 637,
            "length": 5,
            "offset": 39,
            "surroundingCode": "\n\t\t/** \"Interchange\" columns **/\n\t\tj = pvt_j[k];\n\t\tif (j != k) { /** If columns are different **/\n\t\t\tfor (i = 0; i < 4; i++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "e80b06991ac79c65ef08f055531fc88f2f8424fb60111d0e3451cdf6effb96e7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 642,
          "offset": 13,
          "length": 7,
          "code": {
            "startLine": 640,
            "length": 7,
            "offset": 90,
            "surroundingCode": "\t\tif (j != k) { /** If columns are different **/\n\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\thold = -columns[i][k];\n\t\t\t\tcolumns[i][k] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "83c0ea01cd18bf18deac0a517fd4077e3bd05c3dbd0995660748ab45ff5f9c05"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 643,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 641,
            "length": 7,
            "offset": 60,
            "surroundingCode": "\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\thold = -columns[i][k];\n\t\t\t\tcolumns[i][k] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "47e4dd608d8ad731940717aa52d3772854096e51f18dea32618cfbd02de99020"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 643,
          "offset": 21,
          "length": 7,
          "code": {
            "startLine": 641,
            "length": 7,
            "offset": 76,
            "surroundingCode": "\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\thold = -columns[i][k];\n\t\t\t\tcolumns[i][k] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "c3456c60e2f33f5d2146ed19f83a99e97248a0659e0fa1f55d4c2b3ce264357f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 644,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 642,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\t\t\t\thold = -columns[i][k];\n\t\t\t\tcolumns[i][k] = columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "620c643b340d0209fd3b9eacf62b38cfd3948859b97d25bc15f5254b769a7fbc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 651,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 649,
            "length": 7,
            "offset": 49,
            "surroundingCode": "\t\tfor (i = 0; i < 4; i++) {\n\t\t\tif (i != k) {\n\t\t\t\tcolumns[i][k] /= (-pvt_val);\n\t\t\t}\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "22dfdb48841a23c1862d85342e51d12a686a751851c6c545c5eebbeb7c5dd73c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 657,
          "offset": 11,
          "length": 7,
          "code": {
            "startLine": 655,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\t\t/** Reduce the matrix **/\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\thold = columns[i][k];\n\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\tif (i != k && j != k) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "b91ff245051b715b4c70f4da78d5e80b9332ea2af54bd4ec645ce910f5bccd27"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 660,
          "offset": 6,
          "length": 7,
          "code": {
            "startLine": 658,
            "length": 7,
            "offset": 62,
            "surroundingCode": "\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\tif (i != k && j != k) {\n\t\t\t\t\tcolumns[i][j] += hold * columns[k][j];\n\t\t\t\t}\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "25894af5e478f45b73e28ec187da76379759760da4bee83fac64cfc52b16ab64"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 660,
          "offset": 30,
          "length": 7,
          "code": {
            "startLine": 658,
            "length": 7,
            "offset": 86,
            "surroundingCode": "\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\tif (i != k && j != k) {\n\t\t\t\t\tcolumns[i][j] += hold * columns[k][j];\n\t\t\t\t}\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "82d309a82152ef4bbf5a97be0dfc9022cc3b5a7992c69695500d8d87092dec2b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 668,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 666,
            "length": 7,
            "offset": 49,
            "surroundingCode": "\t\tfor (j = 0; j < 4; j++) {\n\t\t\tif (j != k) {\n\t\t\t\tcolumns[k][j] /= pvt_val;\n\t\t\t}\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "c6afceb0a2ac0de3e27eae4f08c29000fb9672202df0bc547557af7a532e5807"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 673,
          "offset": 3,
          "length": 7,
          "code": {
            "startLine": 671,
            "length": 7,
            "offset": 68,
            "surroundingCode": "\n\t\t/** Replace pivot by reciprocal (at last we can touch it). **/\n\t\tcolumns[k][k] = 1.0 / pvt_val;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "837fbadc6488e2a882777c4e8b25bab95cf776fb53f222b2f58ee318f3b42b99"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 673,
          "offset": 19,
          "length": 3,
          "code": {
            "startLine": 671,
            "length": 3,
            "offset": 84,
            "surroundingCode": "\n\t\t/** Replace pivot by reciprocal (at last we can touch it). **/\n\t\tcolumns[k][k] = 1.0 / pvt_val;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "090ec93cc1afd37204ec91690602b73f08db1b3a76b4cdedca935ce2d7a472bb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 679,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 677,
            "length": 5,
            "offset": 98,
            "surroundingCode": "\t/* to finish */\n\tfor (k = 4 - 2; k >= 0; k--) { /* Don't need to work with 1 by 1 corner*/\n\t\ti = pvt_j[k]; /* Rows to swap correspond to pivot COLUMN */\n\t\tif (i != k) { /* If rows are different */\n\t\t\tfor (j = 0; j < 4; j++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "7705cbf6385af478f9db222b940db1fb37cc514eaed9f45254c1eb0604b0beec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 682,
          "offset": 12,
          "length": 7,
          "code": {
            "startLine": 680,
            "length": 7,
            "offset": 84,
            "surroundingCode": "\t\tif (i != k) { /* If rows are different */\n\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\thold = columns[k][j];\n\t\t\t\tcolumns[k][j] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "e1850843652bd0c4049ef9826eb7532ee8c17b0a97355a57ca612792d2f41c00"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 683,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 681,
            "length": 7,
            "offset": 59,
            "surroundingCode": "\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\thold = columns[k][j];\n\t\t\t\tcolumns[k][j] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "85c895fc24e901c2fff08539ca9c9757bb6ea724a2cc4ff221870260d055b4b5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 683,
          "offset": 22,
          "length": 7,
          "code": {
            "startLine": 681,
            "length": 7,
            "offset": 76,
            "surroundingCode": "\t\t\tfor (j = 0; j < 4; j++) {\n\t\t\t\thold = columns[k][j];\n\t\t\t\tcolumns[k][j] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "07e3b976bda7ec74856f6603af7c0f5cca125cd9dc06b1dad89f021db431d728"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 684,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 682,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\t\t\t\thold = columns[k][j];\n\t\t\t\tcolumns[k][j] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "6980a9ae7c9540c4346fa6f823c715d7602dab4a24c43fd927f07ad24363c718"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 688,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 686,
            "length": 5,
            "offset": 11,
            "surroundingCode": "\t\t}\n\n\t\tj = pvt_i[k]; /* Columns to swap correspond to pivot ROW */\n\t\tif (j != k) { /* If columns are different */\n\t\t\tfor (i = 0; i < 4; i++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "4295e0a4b3c5758611877d297b0a94c26385ca05b10e9d143035a941b68d31ff"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 691,
          "offset": 12,
          "length": 7,
          "code": {
            "startLine": 689,
            "length": 7,
            "offset": 87,
            "surroundingCode": "\t\tif (j != k) { /* If columns are different */\n\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\thold = columns[i][k];\n\t\t\t\tcolumns[i][k] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "af20210f578f55ab6c4084f04c5584c3878055f0ec02ed8bbf9578ff3e98a18f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 692,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 690,
            "length": 7,
            "offset": 59,
            "surroundingCode": "\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\thold = columns[i][k];\n\t\t\t\tcolumns[i][k] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "67f926c1fcb2b9f8ef866bd51ecf672544affcb7f12d60a486b6a6d5ab1867de"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 692,
          "offset": 22,
          "length": 7,
          "code": {
            "startLine": 690,
            "length": 7,
            "offset": 76,
            "surroundingCode": "\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\thold = columns[i][k];\n\t\t\t\tcolumns[i][k] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "7c22969217e39690773ccba8712091c29d81e21ec25ce0cda8bd955c10957937"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 693,
          "offset": 5,
          "length": 7,
          "code": {
            "startLine": 691,
            "length": 7,
            "offset": 66,
            "surroundingCode": "\t\t\t\thold = columns[i][k];\n\t\t\t\tcolumns[i][k] = -columns[i][j];\n\t\t\t\tcolumns[i][j] = hold;\n\t\t\t}\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "b9541776ecaeefc477982b77b636ed89012e4d2277892dcf82bf3d3d0570d75f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'ab' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 714,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 712,
            "length": 2,
            "offset": 73,
            "surroundingCode": "\tfor (int j = 0; j < 4; j++) {\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\treal_t ab = 0;\n\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\tab += columns[k][i] * p_matrix.columns[j][k];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ef15fb7dcc2d2668d3b8c53cd52ed692ec5d412b75f0f992eb410877305577ba"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 716,
          "offset": 11,
          "length": 7,
          "code": {
            "startLine": 714,
            "length": 7,
            "offset": 61,
            "surroundingCode": "\t\t\treal_t ab = 0;\n\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\tab += columns[k][i] * p_matrix.columns[j][k];\n\t\t\t}\n\t\t\tnew_matrix.columns[j][i] = ab;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "d615afa1a84f0e2ce4a5866dff4d4f3b689293acd0f3ee98e8e7b8430ac4837d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 716,
          "offset": 27,
          "length": 8,
          "code": {
            "startLine": 714,
            "length": 8,
            "offset": 77,
            "surroundingCode": "\t\t\treal_t ab = 0;\n\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\tab += columns[k][i] * p_matrix.columns[j][k];\n\t\t\t}\n\t\t\tnew_matrix.columns[j][i] = ab;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "4b6a2d6870f497b2c00b36eeab274b700c34c908c82643d69503c9e85f319b9a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 718,
          "offset": 4,
          "length": 10,
          "code": {
            "startLine": 716,
            "length": 10,
            "offset": 58,
            "surroundingCode": "\t\t\t\tab += columns[k][i] * p_matrix.columns[j][k];\n\t\t\t}\n\t\t\tnew_matrix.columns[j][i] = ab;\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "50e997a30a7bc0668c40d05d7b90a5e4a860292d3eea59dd45ef7cf163aa7afb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 726,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 724,
            "length": 1,
            "offset": 65,
            "surroundingCode": "\nvoid Projection::set_depth_correction(bool p_flip_y) {\n\treal_t *m = &columns[0][0];\n\n\tm[0] = 1;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "9b3f47e62fb767a1269b1138bc76398d36369c9743d2e619de90c1d5f5b2b3ca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 733,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 731,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = p_flip_y ? -1 : 1;\n\tm[6] = 0.0;\n\tm[7] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9573550eee47c83e67744dc3de15482503d47a2acc314f8801fc7ba7ec0ed1a8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 734,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 732,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\tm[4] = 0.0;\n\tm[5] = p_flip_y ? -1 : 1;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "62fbb8e9122e35b199cfa1c3f1da31550ed2741d5f61f2c4cf3f82efd8130172"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 735,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 733,
            "length": 1,
            "offset": 41,
            "surroundingCode": "\tm[5] = p_flip_y ? -1 : 1;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9b6505a969c6df5fa26ee2555c9776332b03f2d2b8625b1aa7d364643505aebe"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 735,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 733,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\tm[5] = p_flip_y ? -1 : 1;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0ae5ac0f3b2c4e9bbb47f444e8c177f2f4c5e35e3a73de98eb01103838d29062"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 736,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 734,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "21d65b010bcdb2e349fd3aec73b9f986c599b2b0825925ee4d5330b7cfe0e8cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 736,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 734,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "62b8c9faca3557e9134ec903b4e4fffbc920746182d9f1d92a0874b6131b4624"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 737,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 735,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8b575a4d3df6fb0bf157f8e4d0d6f5281e953a9909141f4fd8262fd5498c0b1b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 737,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 735,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9616c2ad61d33a0136970ee5e2bef15d197fd8ae36a2ce1704426b2b51efdd03"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 738,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 736,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "324f9a7156a34e4a8b1459e8bd589e9820f9dc588e29d7bcebdfd5e6b48a7047"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 738,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 736,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7c081ebc6f3d883be41cf308e9c8c06630465de52d2bf38bfb7df5734ff9bc13"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 738,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 736,
            "length": 3,
            "offset": 35,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b8318fdcdfb643c6ad9b7bc485c8029cf3174e6b3749d55e5fd91de2ca713f60"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 739,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 737,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;\n\tm[13] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7ac32c180d8ed9bb57a93e8b687c286b96df638d247d53a60f1333b236439faf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 739,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 737,
            "length": 2,
            "offset": 30,
            "surroundingCode": "\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;\n\tm[13] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "863b41095477b2475fc0db2aedbe18348355217be710ff9ec4c191a662fbae8f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 740,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 738,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "65f8f898cee26c6f0db65972a6fb608705a9ea3c0c68a677c497e7980b4695e3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 740,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 738,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "349e46d7a787b19a269472b72692d2629d0a71adc9a3c987e27ac5ec8d23ab26"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 741,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 739,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "542d9950ad2b5a260c6e833eb72be9c38da35ac88fb1097fc6ee033d78561421"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 741,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 739,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "bb7cfcd624f6cf64f0c21c02a255a36043772dfa6a70bac3a07972231fa6b7d2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 742,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 740,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a99021f3f9d77d2312d5e659020ccc6a52bbaaed86633d818867a0b559090bcb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 742,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 740,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "254567ecd927d83a5feabccbecff6538ed7028eef66e321a5fa9089cc708af0c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 742,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 740,
            "length": 3,
            "offset": 37,
            "surroundingCode": "\tm[12] = 0.0;\n\tm[13] = 0.0;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ad72011167fb1611f7f6488f6d1975f05af146eaec6cb35ab650b0e5e5e992fc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 743,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 741,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[13] = 0.0;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "90f351360b596c489a16c80e6b88dbdee6c3a60cc43a3ffa9981c49c1d099986"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 747,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 745,
            "length": 1,
            "offset": 46,
            "surroundingCode": "\nvoid Projection::set_light_bias() {\n\treal_t *m = &columns[0][0];\n\n\tm[0] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "458b8d13da2b2ed4704099a3c53f48991be3a523fa47fdf7e8b9094301bd4ff2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 749,
          "offset": 9,
          "length": 3,
          "code": {
            "startLine": 747,
            "length": 3,
            "offset": 38,
            "surroundingCode": "\treal_t *m = &columns[0][0];\n\n\tm[0] = 0.5;\n\tm[1] = 0.0;\n\tm[2] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fcfc3161ee8fa81c5c438328164052c57ce8953a51ce326f402d8e5c87828e6a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 751,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 749,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[0] = 0.5;\n\tm[1] = 0.0;\n\tm[2] = 0.0;\n\tm[3] = 0.0;\n\tm[4] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a287da593f2a0cdc03bea3cd733b11f900ae1e9fa3260ae5a9cc48af44dc2af1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 753,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 751,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[2] = 0.0;\n\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = 0.5;\n\tm[6] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4cf15ab3700b4a53556f2204d7a02490c76edadd68ec37eafd30460b5f29963e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 754,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 752,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = 0.5;\n\tm[6] = 0.0;\n\tm[7] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "66b42cf5b2359b5ba2314a0668a0e97a606819be3e99b0b78cc6c3f639e82c81"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 754,
          "offset": 9,
          "length": 3,
          "code": {
            "startLine": 752,
            "length": 3,
            "offset": 34,
            "surroundingCode": "\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = 0.5;\n\tm[6] = 0.0;\n\tm[7] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "48b32eda0b5894fcf15ac472697c4f2ae554d6d1228cbef0eadd8840ed2b5aca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 755,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 753,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[4] = 0.0;\n\tm[5] = 0.5;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "072aade80a91705c30a6778c102f0a3c4e0a3367ca021e5db8105e078bafa5d9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 756,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 754,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[5] = 0.5;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "fbee2be38c640eb4c43397ede0b78650fb576a40bd74a83f5e5efecf147e00ed"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 756,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 754,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[5] = 0.5;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "81dcb75fbf6dd6a18897eb42bbe8d122bacec4b394c87741f93d76e97adb7a0f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 757,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 755,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "56adfdfa09066f37ccdeec66478cf92ffe8ef83792c32c6a251c70f44514a2d1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 757,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 755,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "01623742f1131d0fa113682885061c01c673ca150d3238d0e94d3e620b8d215e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 758,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 756,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "85bcaa75645fb6ef9f3fc3cd37f6e8a7aabdcce69f4f9525d69bbb34aab5857a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 759,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 757,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "93ae5c3e397a15746988ff18cb9bb6c368e0136e5d94cc501f34800b91f69a7f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 759,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 757,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "376bf83d4746fd6f856759046763d974f9cc6d3c8e400f0f7562f962bc6a6227"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 760,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 758,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7b1c74b8ae39bd7809c95c85292723316c1911f2e46427779bf5fa47a94af768"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 760,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 758,
            "length": 2,
            "offset": 30,
            "surroundingCode": "\tm[9] = 0.0;\n\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d2ae6648154b441107b25314125b2db791d91d250c39073248f9ddd35519bcd1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 761,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 759,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "703dea7377a63b812a2b0f644e8b362e79108ccf65a30ba44c19c661ec3df17b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 761,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 759,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "dfbabe902357e230b2de05ff79df50653ce52055aea3725da6a1c2f7154b92fd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 761,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 759,
            "length": 3,
            "offset": 37,
            "surroundingCode": "\tm[10] = 0.5;\n\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "04870918a1ab793ad3db02768d1740634dbb9e409ef5a0fd2621aa1d5be6efe1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 762,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 760,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "568d2bac2dac5dcdd0a164b78dd5c1a5a4ed13c1c37add357a3f7916dd5c4927"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 762,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 760,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0456b515948c8dcbd65d20a573ae3ba5f707d67124e9ce05676eafc8390ceb43"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 762,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 760,
            "length": 3,
            "offset": 37,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b9d66a704545b63777e926263cb3a1b0a8448dfa2ac97b23605a2fb0d3039526"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 763,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 761,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3443a78e02dba12c8200ed4e5103af479e941f07737d4855532188212990af47"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 763,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 761,
            "length": 3,
            "offset": 37,
            "surroundingCode": "\tm[12] = 0.5;\n\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "80588a9087e4492a86a0c2f8caf3f18ccffec993913e1245cca4008817f782d1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 764,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 762,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "d81568aa10789cf4743ba10614409816071cdeb225a1372dd3207171d0c4b6e4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 764,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 762,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[13] = 0.5;\n\tm[14] = 0.5;\n\tm[15] = 1.0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7454c93e27e5d1970c353f38bb2dae52851e95de2351d05cbb220d6083c70c18"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 768,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 766,
            "length": 1,
            "offset": 71,
            "surroundingCode": "\nvoid Projection::set_light_atlas_rect(const Rect2 &p_rect) {\n\treal_t *m = &columns[0][0];\n\n\tm[0] = p_rect.size.width;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "adc1666480bca4db24e9c6700e3228cf175b584c50957551c02309b7d165370d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 771,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 769,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\n\tm[0] = p_rect.size.width;\n\tm[1] = 0.0;\n\tm[2] = 0.0;\n\tm[3] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "259d2a446d3e200e31b9e7562c9f535396ec0049943a1e741795dc06b5935365"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 772,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 770,
            "length": 1,
            "offset": 41,
            "surroundingCode": "\tm[0] = p_rect.size.width;\n\tm[1] = 0.0;\n\tm[2] = 0.0;\n\tm[3] = 0.0;\n\tm[4] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "0aba6d7ba8a7b8725c9ab00d08bda583d58684e04d8e5ca49f3f3a97683d6089"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 773,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 771,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[1] = 0.0;\n\tm[2] = 0.0;\n\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = p_rect.size.height;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "687612fc09ea7467580811679cddf006f5baa9da1c23f7fe5abe133e1840e353"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 774,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 772,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[2] = 0.0;\n\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = p_rect.size.height;\n\tm[6] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "51546548a248a37fb10d9f23c82eff6b52f54b936f614d9808610e3bb5220ce2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 775,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 773,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[3] = 0.0;\n\tm[4] = 0.0;\n\tm[5] = p_rect.size.height;\n\tm[6] = 0.0;\n\tm[7] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b8ba97f609944768162b829d6cdce2b88512fd978bb3a414402d6c15afbc4856"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 776,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 774,
            "length": 1,
            "offset": 44,
            "surroundingCode": "\tm[4] = 0.0;\n\tm[5] = p_rect.size.height;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "17235c93c49f24914bdef00fb4edea2e3263313f5c64a3132b4c7a827f0d1c81"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 777,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 775,
            "length": 1,
            "offset": 44,
            "surroundingCode": "\tm[5] = p_rect.size.height;\n\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "bc2eef2d8f62cf445a17b3c23d7fda8d407dff48701c9e68a0da4b9f578b8c47"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 778,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 776,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7da299afbdee5483967bea29f0aed014d756c4f303eaf332f01137c29f118290"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 778,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 776,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[6] = 0.0;\n\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "944e5b602bde68deec408e585e0c1d43c304d21ad9984a363ded6e9143f0e740"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 779,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 777,
            "length": 1,
            "offset": 29,
            "surroundingCode": "\tm[7] = 0.0;\n\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 1.0;\n\tm[11] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "6cc8c2105c42a232416646fa9cb8f444f71626984464106e1a779a9c6149efe4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 780,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 778,
            "length": 1,
            "offset": 27,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 1.0;\n\tm[11] = 0.0;\n\tm[12] = p_rect.position.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "64b626e5f06c21c8fcb772ba2cccb2b56c11499b039b3049af9db949d7fe31a6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 780,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 778,
            "length": 2,
            "offset": 29,
            "surroundingCode": "\tm[8] = 0.0;\n\tm[9] = 0.0;\n\tm[10] = 1.0;\n\tm[11] = 0.0;\n\tm[12] = p_rect.position.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d01080dc5d86be7791156b45430e33ed8d1619e0caed7a0c9ca9652784fbb484"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 781,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 779,
            "length": 1,
            "offset": 28,
            "surroundingCode": "\tm[9] = 0.0;\n\tm[10] = 1.0;\n\tm[11] = 0.0;\n\tm[12] = p_rect.position.x;\n\tm[13] = p_rect.position.y;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "6f756d540195cc0588aa1a651928db1b9ba3093c14d0223655a80b414a13d6d6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 781,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 779,
            "length": 2,
            "offset": 30,
            "surroundingCode": "\tm[9] = 0.0;\n\tm[10] = 1.0;\n\tm[11] = 0.0;\n\tm[12] = p_rect.position.x;\n\tm[13] = p_rect.position.y;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "19e1e7a906213014d13b11c729b64e89fdae8cd75f96a15834b51680c93ab9ae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 782,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 780,
            "length": 2,
            "offset": 31,
            "surroundingCode": "\tm[10] = 1.0;\n\tm[11] = 0.0;\n\tm[12] = p_rect.position.x;\n\tm[13] = p_rect.position.y;\n\tm[14] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b282c4bbc64a59e6cacd742a2305af3719716f5ca114d10f752ba62e55194fbc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 783,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 781,
            "length": 2,
            "offset": 45,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = p_rect.position.x;\n\tm[13] = p_rect.position.y;\n\tm[14] = 0.0;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "22be9fced0fc7fda95b3e08c7aef04075110338d49290ce5e7269b67b180b8d5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 784,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 782,
            "length": 2,
            "offset": 59,
            "surroundingCode": "\tm[12] = p_rect.position.x;\n\tm[13] = p_rect.position.y;\n\tm[14] = 0.0;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7d8d1829abdc82f76fb5867ab4d8140e71732767f532386a8cedef6c198b1f87"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 792,
          "offset": 53,
          "length": 7,
          "code": {
            "startLine": 790,
            "length": 7,
            "offset": 115,
            "surroundingCode": "\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tstr = str + String((j > 0) ? \", \" : \"\\n\") + rtos(columns[i][j]);\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "d17a0946d4529cfb661ac97a515e5db6b198ff6996b9b2331084e735806516ca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 807,
          "offset": 25,
          "length": 3,
          "code": {
            "startLine": 805,
            "length": 3,
            "offset": 69,
            "surroundingCode": "\tVector3 result = xform(Vector3(1, 0, -1));\n\n\treturn int((result.x * 0.5 + 0.5) * p_for_pixel_width);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "f4c56117342d96e46214fc7b653ac9c158584311d950695b041a18b6695857f1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 807,
          "offset": 31,
          "length": 3,
          "code": {
            "startLine": 805,
            "length": 3,
            "offset": 75,
            "surroundingCode": "\tVector3 result = xform(Vector3(1, 0, -1));\n\n\treturn int((result.x * 0.5 + 0.5) * p_for_pixel_width);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5490a4d64aee2391b6b100e23301e0244d3d55f46a6b48284faa968ff2dcc117"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 815,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 813,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\nreal_t Projection::get_fov() const {\n\tconst real_t *matrix = (const real_t *)this->columns;\n\n\tPlane right_plane = Plane(matrix[3] - matrix[0],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9e9c6c2c83e5868e257b62d8f443ff8e55e9bafb41a85266bc49cc0db0379576"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 818,
          "offset": 11,
          "length": 1,
          "code": {
            "startLine": 816,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\n\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "deff0f3af396dc4cea98436dc014291fc854d916fa654a4b8a33b45fe591304c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 819,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 817,
            "length": 6,
            "offset": 79,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "9d3cb0814a064ff0e6fcd0148b192c9cc0770c4425abd94d0aacfdcf98d40770"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 819,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 817,
            "length": 2,
            "offset": 86,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "68238fdf97281610a8dc52262c0377c2d425193f6e9aa8fdd9000d22a1c82083"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 819,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 817,
            "length": 1,
            "offset": 99,
            "surroundingCode": "\tPlane right_plane = Plane(matrix[3] - matrix[0],\n\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "71de165e957c61997a65be6e121efd548b44c34d39b015fa5375f246c0aa17a7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 820,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 818,
            "length": 2,
            "offset": 64,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c7a87d0ff47610bca243634711328d3ce07479a3cb6828a81e097a246ac69273"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 820,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 818,
            "length": 6,
            "offset": 70,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "646fb251d86f8f072ffe2bcb0bdff62f531fc2ce972b04e1ea458fc7cb6612d8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 820,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 818,
            "length": 2,
            "offset": 77,
            "surroundingCode": "\t\t\tmatrix[7] - matrix[4],\n\t\t\tmatrix[11] - matrix[8],\n\t\t\t-matrix[15] + matrix[12]);\n\tright_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "267619c4794a01ced68673923c887d30ac3e021bbb947e878b784c1b2897678a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 823,
          "offset": 7,
          "length": 6,
          "code": {
            "startLine": 821,
            "length": 6,
            "offset": 33,
            "surroundingCode": "\tright_plane.normalize();\n\n\tif ((matrix[8] == 0) && (matrix[9] == 0)) {\n\t\treturn Math::rad_to_deg(Math::acos(Math::abs(right_plane.normal.x))) * 2.0;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "7a082cd938c0c0d0c1ff9dc9f2768f70a934ad0e8ad53e7bda432647bacf8195"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 823,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 821,
            "length": 1,
            "offset": 40,
            "surroundingCode": "\tright_plane.normalize();\n\n\tif ((matrix[8] == 0) && (matrix[9] == 0)) {\n\t\treturn Math::rad_to_deg(Math::acos(Math::abs(right_plane.normal.x))) * 2.0;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "576d8d4860ec3da0a92ec63eb5604a6d72b7adb8bc3aaca91d9e612d2388b133"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 823,
          "offset": 27,
          "length": 6,
          "code": {
            "startLine": 821,
            "length": 6,
            "offset": 53,
            "surroundingCode": "\tright_plane.normalize();\n\n\tif ((matrix[8] == 0) && (matrix[9] == 0)) {\n\t\treturn Math::rad_to_deg(Math::acos(Math::abs(right_plane.normal.x))) * 2.0;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "3b851e56f534732c77440523cdb29e6898749f29b366b111cfe59a1dd7bc12b0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 823,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 821,
            "length": 1,
            "offset": 60,
            "surroundingCode": "\tright_plane.normalize();\n\n\tif ((matrix[8] == 0) && (matrix[9] == 0)) {\n\t\treturn Math::rad_to_deg(Math::acos(Math::abs(right_plane.normal.x))) * 2.0;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "1ba49b7ec639ce16f720e60c50c21e66cc932bd60e6b0a3306b2b44a7e85e35d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 824,
          "offset": 74,
          "length": 3,
          "code": {
            "startLine": 822,
            "length": 3,
            "offset": 119,
            "surroundingCode": "\n\tif ((matrix[8] == 0) && (matrix[9] == 0)) {\n\t\treturn Math::rad_to_deg(Math::acos(Math::abs(right_plane.normal.x))) * 2.0;\n\t} else {\n\t\t// our frustum is asymmetrical need to calculate the left planes angle separately.."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "768869903d2e0c153144d3c28e7f0550971e36936dca4484c6efd712dd32205d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 825,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 823,
            "length": 4,
            "offset": 126,
            "surroundingCode": "\tif ((matrix[8] == 0) && (matrix[9] == 0)) {\n\t\treturn Math::rad_to_deg(Math::acos(Math::abs(right_plane.normal.x))) * 2.0;\n\t} else {\n\t\t// our frustum is asymmetrical need to calculate the left planes angle separately..\n\t\tPlane left_plane = Plane(matrix[3] + matrix[0],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "b05b82a55fc74900d4502f4ee65e0dad2a90406ae7231ce6e17585bb094f1dbf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 827,
          "offset": 28,
          "length": 6,
          "code": {
            "startLine": 825,
            "length": 6,
            "offset": 123,
            "surroundingCode": "\t} else {\n\t\t// our frustum is asymmetrical need to calculate the left planes angle separately..\n\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a74c0630d06cc1a2b1dd18a6cf8431484b048c51d462cebc5a611ea67a7f1bfb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 828,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 826,
            "length": 6,
            "offset": 140,
            "surroundingCode": "\t\t// our frustum is asymmetrical need to calculate the left planes angle separately..\n\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "cae736ece04c09d8e6fd9b260e8538f40500eddb4714020479f20f72f5895e2d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "7 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 828,
          "offset": 12,
          "length": 1,
          "code": {
            "startLine": 826,
            "length": 1,
            "offset": 147,
            "surroundingCode": "\t\t// our frustum is asymmetrical need to calculate the left planes angle separately..\n\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a7df19f7cf60261d09d6874ca7033b76fbc5f843c4bfa0683853754d6a6837a5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 828,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 826,
            "length": 6,
            "offset": 152,
            "surroundingCode": "\t\t// our frustum is asymmetrical need to calculate the left planes angle separately..\n\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8f0714bb6cd8f178a1898d7c57f3781024e3d8cc261f8622bf5d883bc0fa1433"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 829,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 827,
            "length": 6,
            "offset": 81,
            "surroundingCode": "\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);\n\t\tleft_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a0be4d43f4d33470cd09819e18823340aba3e9cf8239ed7e7972257d57100a55"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 829,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 827,
            "length": 2,
            "offset": 88,
            "surroundingCode": "\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);\n\t\tleft_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0fc895c232ddda919d5a63667922a61e868fa659874235838304eade5162b6c9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 829,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 827,
            "length": 6,
            "offset": 94,
            "surroundingCode": "\t\tPlane left_plane = Plane(matrix[3] + matrix[0],\n\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);\n\t\tleft_plane.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "ebb2253262f685876dffc322984d49ce3437622f8fd143eb7c10185bb7ce0127"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 830,
          "offset": 5,
          "length": 6,
          "code": {
            "startLine": 828,
            "length": 6,
            "offset": 59,
            "surroundingCode": "\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);\n\t\tleft_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "6576852b177aaa3d3e563ff5a05d49aa925997870cfda3a16e09fe041428f704"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 830,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 828,
            "length": 2,
            "offset": 79,
            "surroundingCode": "\t\t\t\tmatrix[7] + matrix[4],\n\t\t\t\tmatrix[11] + matrix[8],\n\t\t\t\tmatrix[15] + matrix[12]);\n\t\tleft_plane.normalize();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5c5a2acf34794fce90cf6cd567beb44c7c442f347b7f8fde94dadeb045949a2d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 840,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 838,
            "length": 4,
            "offset": 67,
            "surroundingCode": "\tif (is_orthogonal()) {\n\t\treturn get_viewport_half_extents().x;\n\t} else {\n\t\tfloat zn = get_z_near();\n\t\tfloat width = get_viewport_half_extents().x * 2.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "b715f5926ec0925e6a834db93be51dc857f91898b8ef2a0cc8cdeec9c5f04e8a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'zn' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 841,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 839,
            "length": 2,
            "offset": 58,
            "surroundingCode": "\t\treturn get_viewport_half_extents().x;\n\t} else {\n\t\tfloat zn = get_z_near();\n\t\tfloat width = get_viewport_half_extents().x * 2.0;\n\t\treturn 1.0 / (zn / width);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d3af85a56209b57a5d501c9c9d6800175c4a437398709dd0ffba00f36d0fd15d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 842,
          "offset": 17,
          "length": 25,
          "code": {
            "startLine": 840,
            "length": 25,
            "offset": 53,
            "surroundingCode": "\t} else {\n\t\tfloat zn = get_z_near();\n\t\tfloat width = get_viewport_half_extents().x * 2.0;\n\t\treturn 1.0 / (zn / width);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "380b2d7449a22204eb78db0bd23c7afacce10c8ebe8e2bdf65bf1e9789d1701a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 842,
          "offset": 49,
          "length": 3,
          "code": {
            "startLine": 840,
            "length": 3,
            "offset": 85,
            "surroundingCode": "\t} else {\n\t\tfloat zn = get_z_near();\n\t\tfloat width = get_viewport_half_extents().x * 2.0;\n\t\treturn 1.0 / (zn / width);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "0c98dd10e818f944e864fc87517dd7d39039e130632a0c6292f68a5f77fe12d6"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'float'",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 843,
          "offset": 10,
          "length": 3,
          "code": {
            "startLine": 841,
            "length": 3,
            "offset": 89,
            "surroundingCode": "\t\tfloat zn = get_z_near();\n\t\tfloat width = get_viewport_half_extents().x * 2.0;\n\t\treturn 1.0 / (zn / width);\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "a8dc8b64ee6caa8084f680898c4e9ecaf5f7fb8f04b951802117ea2278c78169"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'tr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 887,
          "offset": 14,
          "length": 2,
          "code": {
            "startLine": 885,
            "length": 2,
            "offset": 57,
            "surroundingCode": "\nProjection::operator Transform3D() const {\n\tTransform3D tr;\n\tconst real_t *m = &columns[0][0];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "3723b162f31a5ebf2ab95e109ae7b2238b4b0270da9705e4471388a273132e62"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 888,
          "offset": 16,
          "length": 1,
          "code": {
            "startLine": 886,
            "length": 1,
            "offset": 75,
            "surroundingCode": "Projection::operator Transform3D() const {\n\tTransform3D tr;\n\tconst real_t *m = &columns[0][0];\n\n\ttr.basis.rows[0][0] = m[0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b6a64422f6c93d6d27560dbf29e58b639f9952d6114000416f4fb719885a578a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 890,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 888,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\tconst real_t *m = &columns[0][0];\n\n\ttr.basis.rows[0][0] = m[0];\n\ttr.basis.rows[1][0] = m[1];\n\ttr.basis.rows[2][0] = m[2];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "a495101e3c9ef8af7d1040cd5ee0ae50c85544afaf8d9efa8e839c754ca011c4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 895,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 893,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\n\ttr.basis.rows[0][1] = m[4];\n\ttr.basis.rows[1][1] = m[5];\n\ttr.basis.rows[2][1] = m[6];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ee229367d2ab434314b45f38e31c55e24748fe9a4652563f9bbf427f8247e982"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 896,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 894,
            "length": 1,
            "offset": 83,
            "surroundingCode": "\ttr.basis.rows[0][1] = m[4];\n\ttr.basis.rows[1][1] = m[5];\n\ttr.basis.rows[2][1] = m[6];\n\n\ttr.basis.rows[0][2] = m[8];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a9559cd4fbbcc73c327f65e4a8f8a4fca54eded738d208aebcf52873c1c49885"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 898,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 896,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\ttr.basis.rows[2][1] = m[6];\n\n\ttr.basis.rows[0][2] = m[8];\n\ttr.basis.rows[1][2] = m[9];\n\ttr.basis.rows[2][2] = m[10];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3ad3acc13b2664ba9aa12bf53923ddfa9a6047dd883684f97551b77ef7772edb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 899,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 897,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\n\ttr.basis.rows[0][2] = m[8];\n\ttr.basis.rows[1][2] = m[9];\n\ttr.basis.rows[2][2] = m[10];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "a88888bd884a24d3209163c26ccad4e8259f428d361d2baf8b2e6846eda61238"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 900,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 898,
            "length": 1,
            "offset": 81,
            "surroundingCode": "\ttr.basis.rows[0][2] = m[8];\n\ttr.basis.rows[1][2] = m[9];\n\ttr.basis.rows[2][2] = m[10];\n\n\ttr.origin.x = m[12];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8781d5d8b7af674cb5278f37c986d62e0ace6f3f6950b01547fb1163174a1c3b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 900,
          "offset": 26,
          "length": 2,
          "code": {
            "startLine": 898,
            "length": 2,
            "offset": 83,
            "surroundingCode": "\ttr.basis.rows[0][2] = m[8];\n\ttr.basis.rows[1][2] = m[9];\n\ttr.basis.rows[2][2] = m[10];\n\n\ttr.origin.x = m[12];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "aca0544d3e2d710cf005a7647b2a52156c66f5929be5ce9488fd73e822d2d67a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "12 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 902,
          "offset": 18,
          "length": 2,
          "code": {
            "startLine": 900,
            "length": 2,
            "offset": 48,
            "surroundingCode": "\ttr.basis.rows[2][2] = m[10];\n\n\ttr.origin.x = m[12];\n\ttr.origin.y = m[13];\n\ttr.origin.z = m[14];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "fa06d89cc0c2ae178ca7ef76b47d2cbbc4242989bcd224525a2b8a1cb1efe490"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 903,
          "offset": 16,
          "length": 1,
          "code": {
            "startLine": 901,
            "length": 1,
            "offset": 38,
            "surroundingCode": "\n\ttr.origin.x = m[12];\n\ttr.origin.y = m[13];\n\ttr.origin.z = m[14];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1ccdbc0832234ce212d91c91adb48f8e4fae56e508b39a5c9aa8296f0ed3caf3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 903,
          "offset": 18,
          "length": 2,
          "code": {
            "startLine": 901,
            "length": 2,
            "offset": 40,
            "surroundingCode": "\n\ttr.origin.x = m[12];\n\ttr.origin.y = m[13];\n\ttr.origin.z = m[14];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "902a3d6c240305fc61663ba9fca7e7aa25268cbd1a6c4e87fe2a581e24f3ede3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 904,
          "offset": 16,
          "length": 1,
          "code": {
            "startLine": 902,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\ttr.origin.x = m[12];\n\ttr.origin.y = m[13];\n\ttr.origin.z = m[14];\n\n\treturn tr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c1a1e06d241b3ff2262fec29f9e9f6f13672d76e874ceebcf139827066729d3c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 904,
          "offset": 18,
          "length": 2,
          "code": {
            "startLine": 902,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\ttr.origin.x = m[12];\n\ttr.origin.y = m[13];\n\ttr.origin.z = m[14];\n\n\treturn tr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b47cd34ad07c96a489880e0c0df1e12cd3bd373e28bea9f1636dd6a35d5cb75c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'tr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 917,
          "offset": 21,
          "length": 2,
          "code": {
            "startLine": 915,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\nProjection::Projection(const Transform3D &p_transform) {\n\tconst Transform3D &tr = p_transform;\n\treal_t *m = &columns[0][0];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "31e5a5bb7118a9a3d340b8e08881656014b6249ef9303e5ae02d734960d97fdd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 918,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 916,
            "length": 1,
            "offset": 104,
            "surroundingCode": "Projection::Projection(const Transform3D &p_transform) {\n\tconst Transform3D &tr = p_transform;\n\treal_t *m = &columns[0][0];\n\n\tm[0] = tr.basis.rows[0][0];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4f25316a61c15667e499fca9de87d1b92b1a869a42a6d844fd263f1922c80aee"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 921,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 919,
            "length": 1,
            "offset": 31,
            "surroundingCode": "\n\tm[0] = tr.basis.rows[0][0];\n\tm[1] = tr.basis.rows[1][0];\n\tm[2] = tr.basis.rows[2][0];\n\tm[3] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4e636f8a504f4a71e3c6acded8aab6338bfc1aad7de98089f2b2f76b0370f633"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 922,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 920,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\tm[0] = tr.basis.rows[0][0];\n\tm[1] = tr.basis.rows[1][0];\n\tm[2] = tr.basis.rows[2][0];\n\tm[3] = 0.0;\n\tm[4] = tr.basis.rows[0][1];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "e17bcdf054635e0f4a70f753a23daccf69d8e6ae78940cc03bfbcc75eb7867f3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 924,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 922,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\tm[2] = tr.basis.rows[2][0];\n\tm[3] = 0.0;\n\tm[4] = tr.basis.rows[0][1];\n\tm[5] = tr.basis.rows[1][1];\n\tm[6] = tr.basis.rows[2][1];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "cd278db2ef3c21d6b33e8fd63344b8fd43f4a6f9f958a83ebe5cdbfe4eb55588"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 925,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 923,
            "length": 1,
            "offset": 43,
            "surroundingCode": "\tm[3] = 0.0;\n\tm[4] = tr.basis.rows[0][1];\n\tm[5] = tr.basis.rows[1][1];\n\tm[6] = tr.basis.rows[2][1];\n\tm[7] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "592ef0d072e896f7fb22e72dea36b552b16cc1cd8898221afbf0a13c83c3f752"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "5 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 925,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 923,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tm[3] = 0.0;\n\tm[4] = tr.basis.rows[0][1];\n\tm[5] = tr.basis.rows[1][1];\n\tm[6] = tr.basis.rows[2][1];\n\tm[7] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "52f5315a803c40f3194196418a83d377502ea9f39f5c2167d5829e82f7ab0e23"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "6 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 926,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 924,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\tm[4] = tr.basis.rows[0][1];\n\tm[5] = tr.basis.rows[1][1];\n\tm[6] = tr.basis.rows[2][1];\n\tm[7] = 0.0;\n\tm[8] = tr.basis.rows[0][2];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "73d6f2a0e437898110155c156c2a149d83ef61c7885e78494cc13025c73113d5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 927,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 925,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\tm[5] = tr.basis.rows[1][1];\n\tm[6] = tr.basis.rows[2][1];\n\tm[7] = 0.0;\n\tm[8] = tr.basis.rows[0][2];\n\tm[9] = tr.basis.rows[1][2];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "57f4b773d4274e81b4f3a2ba6fb02b55da26c8cb08acad95a5ff8f7e03d236be"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "8 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 928,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 926,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tm[6] = tr.basis.rows[2][1];\n\tm[7] = 0.0;\n\tm[8] = tr.basis.rows[0][2];\n\tm[9] = tr.basis.rows[1][2];\n\tm[10] = tr.basis.rows[2][2];"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "aac5d8c861367bfcb6bead09412eaff6496915b5f89d107eee27dbebfdf22501"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "9 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 929,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 927,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tm[7] = 0.0;\n\tm[8] = tr.basis.rows[0][2];\n\tm[9] = tr.basis.rows[1][2];\n\tm[10] = tr.basis.rows[2][2];\n\tm[11] = 0.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "eec6aff683ba959255b2ea85db61a075331f5cc95c6ea0729763acab44460770"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "10 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 930,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 928,
            "length": 2,
            "offset": 61,
            "surroundingCode": "\tm[8] = tr.basis.rows[0][2];\n\tm[9] = tr.basis.rows[1][2];\n\tm[10] = tr.basis.rows[2][2];\n\tm[11] = 0.0;\n\tm[12] = tr.origin.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ad1fcfe30ab2cec2d43a8776f7da0302c1f4675218bbe0e1827a3f747a7da6dc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "11 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 931,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 929,
            "length": 2,
            "offset": 62,
            "surroundingCode": "\tm[9] = tr.basis.rows[1][2];\n\tm[10] = tr.basis.rows[2][2];\n\tm[11] = 0.0;\n\tm[12] = tr.origin.x;\n\tm[13] = tr.origin.y;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "ccd994ef1f90b8ce2d747b4d80ed13944144cf1664a8c785ccfd82bc848a1b2e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 932,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 930,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tm[10] = tr.basis.rows[2][2];\n\tm[11] = 0.0;\n\tm[12] = tr.origin.x;\n\tm[13] = tr.origin.y;\n\tm[14] = tr.origin.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "256622b21d1b8a643ee11a8748a240133a3d95bcdc54f47c04e6e826c787b14d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "13 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 933,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 931,
            "length": 2,
            "offset": 39,
            "surroundingCode": "\tm[11] = 0.0;\n\tm[12] = tr.origin.x;\n\tm[13] = tr.origin.y;\n\tm[14] = tr.origin.z;\n\tm[15] = 1.0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "16a14fbe24761b15dcf611a659a25c9fae3e31962b393f74b30c5358699ec097"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 934,
          "offset": 2,
          "length": 1,
          "code": {
            "startLine": 932,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tm[12] = tr.origin.x;\n\tm[13] = tr.origin.y;\n\tm[14] = tr.origin.z;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "8bd28d64ca2b31e7f60049fbbb7b9b704a1a995420ae3ab0aa30c7b93bb6d0ce"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "14 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 934,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 932,
            "length": 2,
            "offset": 47,
            "surroundingCode": "\tm[12] = tr.origin.x;\n\tm[13] = tr.origin.y;\n\tm[14] = tr.origin.z;\n\tm[15] = 1.0;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "3a1f4109dfd1e8534cb8ab4b3ada35ad3d0456783958fd3f33ddd29e70870e82"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "15 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/projection.cpp",
          "line": 935,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 933,
            "length": 2,
            "offset": 47,
            "surroundingCode": "\tm[13] = tr.origin.y;\n\tm[14] = tr.origin.z;\n\tm[15] = 1.0;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "5b70ba29c4d3b528be594183f56b8c8e8b330afd917dca53afecad409a6f5a6e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 39,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 37,
            "length": 1,
            "offset": 69,
            "surroundingCode": "\nreal_t Quaternion::angle_to(const Quaternion &p_to) const {\n\treal_t d = dot(p_to);\n\treturn Math::acos(CLAMP(d * d * 2 - 1, -1, 1));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "0ef1d4eb100e14d2cacf70e5592f4b5d553843cee39eca06c9524520414c88d2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 40,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 38,
            "length": 1,
            "offset": 108,
            "surroundingCode": "real_t Quaternion::angle_to(const Quaternion &p_to) const {\n\treal_t d = dot(p_to);\n\treturn Math::acos(CLAMP(d * d * 2 - 1, -1, 1));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "e754fb466cf999eb68cb7cf1ffc3e74aea0d78000385b687b132ba2bee5ca81f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 48,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 46,
            "length": 1,
            "offset": 121,
            "surroundingCode": "// This implementation uses XYZ convention (Z is the first rotation).\nVector3 Quaternion::get_euler_xyz() const {\n\tBasis m(*this);\n\treturn m.get_euler(EULER_ORDER_XYZ);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4cccf4a9012e534fcd7abfbc07045ba4fb62a0e4f874c6ffe6d2eb54f2246bf3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'm' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 60,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 58,
            "length": 1,
            "offset": 110,
            "surroundingCode": "\tERR_FAIL_COND_V_MSG(!is_normalized(), Vector3(0, 0, 0), \"The quaternion must be normalized.\");\n#endif\n\tBasis m(*this);\n\treturn m.get_euler(EULER_ORDER_YXZ);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c443ef41c496842b0850dfd723dfeb11361e37b605e06bacc909b52c9ae0e967"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'xx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 65,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 63,
            "length": 2,
            "offset": 62,
            "surroundingCode": "\nvoid Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2703be4c6d60f8bea629a4c5638fbed8a6dcbff52cf782e1125e8e3b06468ce6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 65,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 63,
            "length": 1,
            "offset": 67,
            "surroundingCode": "\nvoid Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "4fe7642765edb2e1e10b9a79f34ea340e323e1c4bf588ed4600f0d00ca990147"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 65,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 63,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\nvoid Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "fa12104c6b4cf8f94d4d18d313502be5b532ded1c97489a99658914eab0e9bf5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 65,
          "offset": 38,
          "length": 1,
          "code": {
            "startLine": 63,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\nvoid Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "77bca9ed6a40fe50b631f42921812d6d246b29684736eb6eebdbbb48a626bb36"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 65,
          "offset": 50,
          "length": 1,
          "code": {
            "startLine": 63,
            "length": 1,
            "offset": 103,
            "surroundingCode": "\nvoid Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "dc05c706d54ca0db7e60bd8bb95fc75d380d4e0c3d9c271dc8aeb25b24e1c7e3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'yy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 66,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 64,
            "length": 2,
            "offset": 121,
            "surroundingCode": "void Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8a635409cbdddfd38ca9c2479a41f042e464da4d4f9899597702f3809b8caa73"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 66,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 64,
            "length": 1,
            "offset": 126,
            "surroundingCode": "void Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "09fd5ac9c66308424f9b0c2b21409adfc6dfe95ab8e48c2afc3757f68c33ab33"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 66,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 64,
            "length": 1,
            "offset": 138,
            "surroundingCode": "void Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "e180064de04b741bc58e71710ee7293c070519286d4c5c948c5c84a5b1883832"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 66,
          "offset": 38,
          "length": 1,
          "code": {
            "startLine": 64,
            "length": 1,
            "offset": 150,
            "surroundingCode": "void Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "8fa3d65dc0cf62799d92b19147c3ef4b676f9858952c982b57a0c036c7f1ae49"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 66,
          "offset": 50,
          "length": 1,
          "code": {
            "startLine": 64,
            "length": 1,
            "offset": 162,
            "surroundingCode": "void Quaternion::operator*=(const Quaternion &p_q) {\n\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "3775eaa4f03430ab1d19a16052af9e08774574471e1b8e0d609b337557fe0661"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'zz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 67,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 65,
            "length": 2,
            "offset": 128,
            "surroundingCode": "\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;\n\tx = xx;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "66cb10aeebd0bbd950b5f22d087b49c7b654518a1fe7b27199f6e9780790bbfd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 67,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 65,
            "length": 1,
            "offset": 133,
            "surroundingCode": "\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;\n\tx = xx;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "c07e5942308f88125c77718b02e05659d82d54e326152927723a933c6c41900f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 67,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 65,
            "length": 1,
            "offset": 145,
            "surroundingCode": "\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;\n\tx = xx;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "a3497d4745dc0fbf446a69fbbd4dbf28c2c3b027147f4a010e6393bbdaa30602"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 67,
          "offset": 38,
          "length": 1,
          "code": {
            "startLine": 65,
            "length": 1,
            "offset": 157,
            "surroundingCode": "\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;\n\tx = xx;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "6a02716722e5c0068278bf8409b9dd2e248950c3644de29bd08f2dc256730477"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 67,
          "offset": 50,
          "length": 1,
          "code": {
            "startLine": 65,
            "length": 1,
            "offset": 169,
            "surroundingCode": "\treal_t xx = w * p_q.x + x * p_q.w + y * p_q.z - z * p_q.y;\n\treal_t yy = w * p_q.y + y * p_q.w + z * p_q.x - x * p_q.z;\n\treal_t zz = w * p_q.z + z * p_q.w + x * p_q.y - y * p_q.x;\n\tw = w * p_q.w - x * p_q.x - y * p_q.y - z * p_q.z;\n\tx = xx;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "967966d6fc63dd89823c31db723de6058f672c0fccacc34fa6bad0985b1c6e74"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 75,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 73,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\nQuaternion Quaternion::operator*(const Quaternion &p_q) const {\n\tQuaternion r = *this;\n\tr *= p_q;\n\treturn r;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1b899d3821d68bc325bf7346a08bf92bdef4d846de4fd2de4285a10ac3541454"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 134,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 132,
            "length": 6,
            "offset": 25,
            "surroundingCode": "#endif\n\tQuaternion to1;\n\treal_t omega, cosom, sinom, scale0, scale1;\n\n\t// calc cosine"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "de387f206ee8605b1c45757600a52e6a293425b3c1264961b0fba8ee6357fb58"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'omega' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 134,
          "offset": 9,
          "length": 5,
          "code": {
            "startLine": 132,
            "length": 5,
            "offset": 32,
            "surroundingCode": "#endif\n\tQuaternion to1;\n\treal_t omega, cosom, sinom, scale0, scale1;\n\n\t// calc cosine"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "876e12ca3cc2bbd084cf0347ebf39415d3a40fe313f3e31319c2bffc627ff767"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'cosom' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 134,
          "offset": 16,
          "length": 5,
          "code": {
            "startLine": 132,
            "length": 5,
            "offset": 39,
            "surroundingCode": "#endif\n\tQuaternion to1;\n\treal_t omega, cosom, sinom, scale0, scale1;\n\n\t// calc cosine"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "2f72df9d13eeb5e3faeb6797353b91096eb48c3e1353e26d006633193a7701a3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'sinom' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 134,
          "offset": 23,
          "length": 5,
          "code": {
            "startLine": 132,
            "length": 5,
            "offset": 46,
            "surroundingCode": "#endif\n\tQuaternion to1;\n\treal_t omega, cosom, sinom, scale0, scale1;\n\n\t// calc cosine"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "6b6286e45568c8615bf946e52bed1fcb6086912eca7058eca771758b5b8691b1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'scale0' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 134,
          "offset": 30,
          "length": 6,
          "code": {
            "startLine": 132,
            "length": 6,
            "offset": 53,
            "surroundingCode": "#endif\n\tQuaternion to1;\n\treal_t omega, cosom, sinom, scale0, scale1;\n\n\t// calc cosine"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "b164170d76d2640d481998ef8b725581e4c787e1c951e7b45b23d10f271795ae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'scale1' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 134,
          "offset": 38,
          "length": 6,
          "code": {
            "startLine": 132,
            "length": 6,
            "offset": 61,
            "surroundingCode": "#endif\n\tQuaternion to1;\n\treal_t omega, cosom, sinom, scale0, scale1;\n\n\t// calc cosine"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "fd5ac0b991d86a6cf323e1ec4debc30693e961e94af87a5a35bb75d0c9f50bfd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 140,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 138,
            "length": 4,
            "offset": 46,
            "surroundingCode": "\n\t// adjust signs (if necessary)\n\tif (cosom < 0.0f) {\n\t\tcosom = -cosom;\n\t\tto1 = -p_to;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "75f67c0e39ef507badd7615cc01acfc22836f87f7d130c5c80ebfe2e256b20c9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 149,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 147,
            "length": 4,
            "offset": 34,
            "surroundingCode": "\t// calculate coefficients\n\n\tif ((1.0f - cosom) > (real_t)CMP_EPSILON) {\n\t\t// standard case (slerp)\n\t\tomega = Math::acos(cosom);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "624445e44e6a7d0977e2006ff303b73171787deb2f9646441ac84ef17cee2855"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 153,
          "offset": 12,
          "length": 4,
          "code": {
            "startLine": 151,
            "length": 4,
            "offset": 68,
            "surroundingCode": "\t\tomega = Math::acos(cosom);\n\t\tsinom = Math::sin(omega);\n\t\tscale0 = Math::sin((1.0 - p_weight) * omega) / sinom;\n\t\tscale1 = Math::sin(p_weight * omega) / sinom;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "4ab9a13bbe68f661f75e02a7d3e45fb98a72271eecab67eeaf42e1c06ec76f28"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 158,
          "offset": 12,
          "length": 4,
          "code": {
            "startLine": 156,
            "length": 4,
            "offset": 105,
            "surroundingCode": "\t\t// \"from\" and \"to\" quaternions are very close\n\t\t//  ... so we can do a linear interpolation\n\t\tscale0 = 1.0f - p_weight;\n\t\tscale1 = p_weight;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "09201abfe2613e375500450a65eb2f528ffc1cb04fabcd49b3e4f88e6b823c1b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 163,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 161,
            "length": 6,
            "offset": 50,
            "surroundingCode": "\t// calculate final values\n\treturn Quaternion(\n\t\t\tscale0 * x + scale1 * to1.x,\n\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "d83b974b5f08f2620cb6ceba4d3c0d90d8ebb0341448b34bf949542bf18cd024"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 163,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 161,
            "length": 6,
            "offset": 63,
            "surroundingCode": "\t// calculate final values\n\treturn Quaternion(\n\t\t\tscale0 * x + scale1 * to1.x,\n\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "76b4501697f74e496009cd5438deb5ca5bd2fe3680d145c63887340f93896bbb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 164,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 162,
            "length": 6,
            "offset": 55,
            "surroundingCode": "\treturn Quaternion(\n\t\t\tscale0 * x + scale1 * to1.x,\n\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,\n\t\t\tscale0 * w + scale1 * to1.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "5f719672d52aee76f30cce5df110856fd2c9e05d99e0a2c9a862df3d3756bfc1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 164,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 162,
            "length": 6,
            "offset": 68,
            "surroundingCode": "\treturn Quaternion(\n\t\t\tscale0 * x + scale1 * to1.x,\n\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,\n\t\t\tscale0 * w + scale1 * to1.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "5bb17f37e1cba4b66097391014b6477092a1d1de59bf3a6fbffe92ecc1ed53e0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 165,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 163,
            "length": 6,
            "offset": 67,
            "surroundingCode": "\t\t\tscale0 * x + scale1 * to1.x,\n\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,\n\t\t\tscale0 * w + scale1 * to1.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "aaa4ead2230293bfd7c3e43392bcf166c0831d4c7d745bf0e2604e1b26f45403"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 165,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 163,
            "length": 6,
            "offset": 80,
            "surroundingCode": "\t\t\tscale0 * x + scale1 * to1.x,\n\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,\n\t\t\tscale0 * w + scale1 * to1.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "577780f315914c1ef222bdb678c5cf6f4a418f42eef5f0b0aff736bd1387dab1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 166,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 164,
            "length": 6,
            "offset": 67,
            "surroundingCode": "\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,\n\t\t\tscale0 * w + scale1 * to1.w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "f468d86b9f8a2f35b15629c2010650775f5e3b07d73962133c54a6201ff232b7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 166,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 164,
            "length": 6,
            "offset": 80,
            "surroundingCode": "\t\t\tscale0 * y + scale1 * to1.y,\n\t\t\tscale0 * z + scale1 * to1.z,\n\t\t\tscale0 * w + scale1 * to1.w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "8ca1f88d01d750eba5e42ca0842d7446dd7eb6304e704efd0b8fd57bc984f924"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.9999f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 178,
          "offset": 24,
          "length": 7,
          "code": {
            "startLine": 176,
            "length": 7,
            "offset": 54,
            "surroundingCode": "\treal_t dot = from.dot(p_to);\n\n\tif (Math::absf(dot) > 0.9999f) {\n\t\treturn from;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "c198c1bf97e4283d8b99fdec24fbcf81a531c3c7a6689d900d7ca4af154a2fe4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 178,
          "offset": 24,
          "length": 7,
          "code": {
            "startLine": 176,
            "length": 7,
            "offset": 54,
            "surroundingCode": "\treal_t dot = from.dot(p_to);\n\n\tif (Math::absf(dot) > 0.9999f) {\n\t\treturn from;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a57d6acb83b7fb872fd0ea900225d1d6777bcae7d41af791d5b1123f5519041e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 182,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 180,
            "length": 6,
            "offset": 5,
            "surroundingCode": "\t}\n\n\treal_t theta = Math::acos(dot),\n\t\t   sinT = 1.0f / Math::sin(theta),\n\t\t   newFactor = Math::sin(p_weight * theta) * sinT,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "5425a0eedadfce7b1017c1a98aa3a1e21cf763dc61c1fcd0a9c9735aa14734cc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 183,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 181,
            "length": 4,
            "offset": 46,
            "surroundingCode": "\n\treal_t theta = Math::acos(dot),\n\t\t   sinT = 1.0f / Math::sin(theta),\n\t\t   newFactor = Math::sin(p_weight * theta) * sinT,\n\t\t   invFactor = Math::sin((1.0f - p_weight) * theta) * sinT;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "59c07bcf5564fa2f591abdc7becee30a7748a2ee9e7d57d2fac4db34749082b2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 185,
          "offset": 29,
          "length": 4,
          "code": {
            "startLine": 183,
            "length": 4,
            "offset": 118,
            "surroundingCode": "\t\t   sinT = 1.0f / Math::sin(theta),\n\t\t   newFactor = Math::sin(p_weight * theta) * sinT,\n\t\t   invFactor = Math::sin((1.0f - p_weight) * theta) * sinT;\n\n\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c4841fc3c5ada39106c9b62fa170a484b40b6821e245c28dc778a3cc1ff6326a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 187,
          "offset": 20,
          "length": 9,
          "code": {
            "startLine": 185,
            "length": 9,
            "offset": 82,
            "surroundingCode": "\t\t   invFactor = Math::sin((1.0f - p_weight) * theta) * sinT;\n\n\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,\n\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1d549a51303b9b126e27af7ac87c7943efdce4d23df9851a04030a2c8f51db84"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 187,
          "offset": 41,
          "length": 9,
          "code": {
            "startLine": 185,
            "length": 9,
            "offset": 103,
            "surroundingCode": "\t\t   invFactor = Math::sin((1.0f - p_weight) * theta) * sinT;\n\n\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,\n\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "bf062ea6814bf6f7740e4d3d19249dc96ee929eff17297a99b90b4f1a2c21e7d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 188,
          "offset": 4,
          "length": 9,
          "code": {
            "startLine": 186,
            "length": 9,
            "offset": 64,
            "surroundingCode": "\n\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,\n\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,\n\t\t\tinvFactor * from.w + newFactor * p_to.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "570993697d0aac6280d9fb96dfe733b1aec6863b1162c463b1ca09a354a87bd4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 188,
          "offset": 25,
          "length": 9,
          "code": {
            "startLine": 186,
            "length": 9,
            "offset": 85,
            "surroundingCode": "\n\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,\n\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,\n\t\t\tinvFactor * from.w + newFactor * p_to.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "6221c30c31b4a4bcf45a1e42136963d667daa39c4fe54ff0ba2b1675783b927b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 189,
          "offset": 4,
          "length": 9,
          "code": {
            "startLine": 187,
            "length": 9,
            "offset": 107,
            "surroundingCode": "\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,\n\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,\n\t\t\tinvFactor * from.w + newFactor * p_to.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "9c0637a72355a2fb728b7f023193602570e982a52e9c30dca5ea7144116baa24"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 189,
          "offset": 25,
          "length": 9,
          "code": {
            "startLine": 187,
            "length": 9,
            "offset": 128,
            "surroundingCode": "\treturn Quaternion(invFactor * from.x + newFactor * p_to.x,\n\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,\n\t\t\tinvFactor * from.w + newFactor * p_to.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "fc426d03a0606dc461525ad96d2f5b48e0a64612da941d8fd1a597c621aa73ce"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 190,
          "offset": 4,
          "length": 9,
          "code": {
            "startLine": 188,
            "length": 9,
            "offset": 91,
            "surroundingCode": "\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,\n\t\t\tinvFactor * from.w + newFactor * p_to.w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "fa66e0031ffa22dba3a94f1be0f7593a1cfa9cbb0fdbb55388ce11e5132f44a4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 190,
          "offset": 25,
          "length": 9,
          "code": {
            "startLine": 188,
            "length": 9,
            "offset": 112,
            "surroundingCode": "\t\t\tinvFactor * from.y + newFactor * p_to.y,\n\t\t\tinvFactor * from.z + newFactor * p_to.z,\n\t\t\tinvFactor * from.w + newFactor * p_to.w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1fceed7bf9913448ac9ac9ddf3b8cf425b6e4b8b4c09770b409037c82f861f96"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of 'spherical_cubic_interpolate' of similar type ('const Quaternion &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 193,
          "offset": 52,
          "length": 5,
          "code": {
            "startLine": 191,
            "length": 5,
            "offset": 54,
            "surroundingCode": "}\n\nQuaternion Quaternion::spherical_cubic_interpolate(const Quaternion &p_b, const Quaternion &p_pre_a, const Quaternion &p_post_b, const real_t &p_weight) const {\n#ifdef MATH_CHECKS\n\tERR_FAIL_COND_V_MSG(!is_normalized(), Quaternion(), \"The start quaternion must be normalized.\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "ddc80c2a81a51d57ad287c7ffafee84b15da15e35705ff9a205079d8e2430fd6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'ln' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 222,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 220,
            "length": 2,
            "offset": 124,
            "surroundingCode": "\tQuaternion ln_pre = (from_q.inverse() * pre_q).log();\n\tQuaternion ln_post = (from_q.inverse() * post_q).log();\n\tQuaternion ln = Quaternion(0, 0, 0, 0);\n\tln.x = Math::cubic_interpolate(ln_from.x, ln_to.x, ln_pre.x, ln_post.x, p_weight);\n\tln.y = Math::cubic_interpolate(ln_from.y, ln_to.y, ln_pre.y, ln_post.y, p_weight);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cbca1982e012db1ddac30cdeb232df4b19c608174e6895f0d937c660c0dfb21e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'q1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 226,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 224,
            "length": 2,
            "offset": 180,
            "surroundingCode": "\tln.y = Math::cubic_interpolate(ln_from.y, ln_to.y, ln_pre.y, ln_post.y, p_weight);\n\tln.z = Math::cubic_interpolate(ln_from.z, ln_to.z, ln_pre.z, ln_post.z, p_weight);\n\tQuaternion q1 = from_q * ln.exp();\n\n\t// Calc by Expmap in to_q space."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f2f4fa70349ac8a8eb930eea47739afad50ef9d8405adeb7e670ed9e2b08e0d4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'q2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 237,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 235,
            "length": 2,
            "offset": 180,
            "surroundingCode": "\tln.y = Math::cubic_interpolate(ln_from.y, ln_to.y, ln_pre.y, ln_post.y, p_weight);\n\tln.z = Math::cubic_interpolate(ln_from.z, ln_to.z, ln_pre.z, ln_post.z, p_weight);\n\tQuaternion q2 = to_q * ln.exp();\n\n\t// To cancel error made by Expmap ambiguity, do blends."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "da9de489cad6bbbc476080daad41c5d618953da78a86236d8af1936802ca1cc0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of 'spherical_cubic_interpolate_in_time' of similar type ('const Quaternion &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 243,
          "offset": 60,
          "length": 5,
          "code": {
            "startLine": 241,
            "length": 5,
            "offset": 62,
            "surroundingCode": "}\n\nQuaternion Quaternion::spherical_cubic_interpolate_in_time(const Quaternion &p_b, const Quaternion &p_pre_a, const Quaternion &p_post_b, const real_t &p_weight,\n\t\tconst real_t &p_b_t, const real_t &p_pre_a_t, const real_t &p_post_b_t) const {\n#ifdef MATH_CHECKS"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "7e4cf753255091b2daab1fad30708474b1f716821709066d236d1710078d9c76"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'ln' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 273,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 271,
            "length": 2,
            "offset": 124,
            "surroundingCode": "\tQuaternion ln_pre = (from_q.inverse() * pre_q).log();\n\tQuaternion ln_post = (from_q.inverse() * post_q).log();\n\tQuaternion ln = Quaternion(0, 0, 0, 0);\n\tln.x = Math::cubic_interpolate_in_time(ln_from.x, ln_to.x, ln_pre.x, ln_post.x, p_weight, p_b_t, p_pre_a_t, p_post_b_t);\n\tln.y = Math::cubic_interpolate_in_time(ln_from.y, ln_to.y, ln_pre.y, ln_post.y, p_weight, p_b_t, p_pre_a_t, p_post_b_t);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "59bddb5ae2f665608d2f2aa4b7a74644e0cb700e7a8575b86134644acac0b7cf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'q1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 277,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 275,
            "length": 2,
            "offset": 256,
            "surroundingCode": "\tln.y = Math::cubic_interpolate_in_time(ln_from.y, ln_to.y, ln_pre.y, ln_post.y, p_weight, p_b_t, p_pre_a_t, p_post_b_t);\n\tln.z = Math::cubic_interpolate_in_time(ln_from.z, ln_to.z, ln_pre.z, ln_post.z, p_weight, p_b_t, p_pre_a_t, p_post_b_t);\n\tQuaternion q1 = from_q * ln.exp();\n\n\t// Calc by Expmap in to_q space."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "74820b569f9d635e6aa4034122a45fa85dad63ebf4d0e2cbfc979b6b7d24c19a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'q2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 288,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 286,
            "length": 2,
            "offset": 256,
            "surroundingCode": "\tln.y = Math::cubic_interpolate_in_time(ln_from.y, ln_to.y, ln_pre.y, ln_post.y, p_weight, p_b_t, p_pre_a_t, p_post_b_t);\n\tln.z = Math::cubic_interpolate_in_time(ln_from.z, ln_to.z, ln_pre.z, ln_post.z, p_weight, p_b_t, p_pre_a_t, p_post_b_t);\n\tQuaternion q2 = to_q * ln.exp();\n\n\t// To cancel error made by Expmap ambiguity, do blends."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "724ef39f1aa96b4207d038e4dac0e4f2deaa3ca5b175bf8d89055f7f07546063"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 302,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 300,
            "length": 1,
            "offset": 38,
            "surroundingCode": "\t\treturn Vector3(x, y, z);\n\t}\n\treal_t r = ((real_t)1) / Math::sqrt(1 - w * w);\n\treturn Vector3(x * r, y * r, z * r);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f22ec198bebbf91186af2905df9fd24d830a27aac739bc459e3e0cf15903f6ed"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 302,
          "offset": 42,
          "length": 1,
          "code": {
            "startLine": 300,
            "length": 1,
            "offset": 71,
            "surroundingCode": "\t\treturn Vector3(x, y, z);\n\t}\n\treal_t r = ((real_t)1) / Math::sqrt(1 - w * w);\n\treturn Vector3(x * r, y * r, z * r);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "374cb1f792f99f5343bc8f0d02ce5438e0e329ab281b4a6b08c9029ce906829c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 314,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 312,
            "length": 1,
            "offset": 100,
            "surroundingCode": "\tERR_FAIL_COND_MSG(!p_axis.is_normalized(), \"The axis Vector3 must be normalized.\");\n#endif\n\treal_t d = p_axis.length();\n\tif (d == 0) {\n\t\tx = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d6e2d6850af604f11bf137476a29493b9efa58938b432770700830992f8108e8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 321,
          "offset": 42,
          "length": 4,
          "code": {
            "startLine": 319,
            "length": 4,
            "offset": 60,
            "surroundingCode": "\t\tw = 0;\n\t} else {\n\t\treal_t sin_angle = Math::sin(p_angle * 0.5f);\n\t\treal_t cos_angle = Math::cos(p_angle * 0.5f);\n\t\treal_t s = sin_angle / d;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "487fa1fa44cd17ed5d4524e2e0a885dfd6faf88af09abe3a95cbd3e6615c1ab4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 321,
          "offset": 42,
          "length": 4,
          "code": {
            "startLine": 319,
            "length": 4,
            "offset": 60,
            "surroundingCode": "\t\tw = 0;\n\t} else {\n\t\treal_t sin_angle = Math::sin(p_angle * 0.5f);\n\t\treal_t cos_angle = Math::cos(p_angle * 0.5f);\n\t\treal_t s = sin_angle / d;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "ef56f253b3fa1fc3914779ccb2d333fd49236d634829f81f05c8792262cdfc98"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 322,
          "offset": 42,
          "length": 4,
          "code": {
            "startLine": 320,
            "length": 4,
            "offset": 99,
            "surroundingCode": "\t} else {\n\t\treal_t sin_angle = Math::sin(p_angle * 0.5f);\n\t\treal_t cos_angle = Math::cos(p_angle * 0.5f);\n\t\treal_t s = sin_angle / d;\n\t\tx = p_axis.x * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "30b513152222d24a19f34b98e914e16a717b4d21c959487c219861b92fd65f98"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 322,
          "offset": 42,
          "length": 4,
          "code": {
            "startLine": 320,
            "length": 4,
            "offset": 99,
            "surroundingCode": "\t} else {\n\t\treal_t sin_angle = Math::sin(p_angle * 0.5f);\n\t\treal_t cos_angle = Math::cos(p_angle * 0.5f);\n\t\treal_t s = sin_angle / d;\n\t\tx = p_axis.x * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "48ecb3c034c2af895025d76fa1a1b306eebcae2ecf7b4ba66097783e406c6659"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 323,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 321,
            "length": 1,
            "offset": 105,
            "surroundingCode": "\t\treal_t sin_angle = Math::sin(p_angle * 0.5f);\n\t\treal_t cos_angle = Math::cos(p_angle * 0.5f);\n\t\treal_t s = sin_angle / d;\n\t\tx = p_axis.x * s;\n\t\ty = p_axis.y * s;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d1989e5a06d397bfa78b15c043a344b1bf91092ecfa270f72adea0cf4949f993"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 336,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 334,
            "length": 4,
            "offset": 149,
            "surroundingCode": "// This implementation uses YXZ convention (Z is the first rotation).\nQuaternion::Quaternion(const Vector3 &p_euler) {\n\treal_t half_a1 = p_euler.y * 0.5f;\n\treal_t half_a2 = p_euler.x * 0.5f;\n\treal_t half_a3 = p_euler.z * 0.5f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "b780468a213aa891e265a8aff66c20226f2eeb2dfbfd5a4548049696c549764a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 336,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 334,
            "length": 4,
            "offset": 149,
            "surroundingCode": "// This implementation uses YXZ convention (Z is the first rotation).\nQuaternion::Quaternion(const Vector3 &p_euler) {\n\treal_t half_a1 = p_euler.y * 0.5f;\n\treal_t half_a2 = p_euler.x * 0.5f;\n\treal_t half_a3 = p_euler.z * 0.5f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "d2457509a0b5cb2b524f6a2f9b25529e43c1309d82df7e59240c57fbed31fb79"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 337,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 335,
            "length": 4,
            "offset": 115,
            "surroundingCode": "Quaternion::Quaternion(const Vector3 &p_euler) {\n\treal_t half_a1 = p_euler.y * 0.5f;\n\treal_t half_a2 = p_euler.x * 0.5f;\n\treal_t half_a3 = p_euler.z * 0.5f;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "cf87e28c797d0c403671582e6ef6dfec4b25366c7bd85d7d9de2d2d06926533e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 337,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 335,
            "length": 4,
            "offset": 115,
            "surroundingCode": "Quaternion::Quaternion(const Vector3 &p_euler) {\n\treal_t half_a1 = p_euler.y * 0.5f;\n\treal_t half_a2 = p_euler.x * 0.5f;\n\treal_t half_a3 = p_euler.z * 0.5f;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c7ecde53b696ed3731f12ebacd48320b7f288156818531dec07c2b4222a9469a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 338,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 336,
            "length": 4,
            "offset": 102,
            "surroundingCode": "\treal_t half_a1 = p_euler.y * 0.5f;\n\treal_t half_a2 = p_euler.x * 0.5f;\n\treal_t half_a3 = p_euler.z * 0.5f;\n\n\t// R = Y(a1).X(a2).Z(a3) convention for Euler angles."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "87a57d8906d5d038076a15bca2442ec9819379bbe15d5ac6700da0448bafa097"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/quaternion.cpp",
          "line": 338,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 336,
            "length": 4,
            "offset": 102,
            "surroundingCode": "\treal_t half_a1 = p_euler.y * 0.5f;\n\treal_t half_a2 = p_euler.x * 0.5f;\n\treal_t half_a3 = p_euler.z * 0.5f;\n\n\t// R = Y(a1).X(a2).Z(a3) convention for Euler angles."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "7257b7ecb1fd54d0e4c652dd6bd6db89098503e02870a5b84f7e62a5581bd13d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-cognitive-complexity",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'intersects_segment' has cognitive complexity of 32 (threshold 25)",
      "detailsInfo": "function-cognitive-complexity",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 47,
          "offset": 13,
          "length": 18,
          "code": {
            "startLine": 45,
            "length": 18,
            "offset": 15,
            "surroundingCode": "}\n\nbool Rect2::intersects_segment(const Point2 &p_from, const Point2 &p_to, Point2 *r_pos, Point2 *r_normal) const {\n#ifdef MATH_CHECKS\n\tif (unlikely(size.x < 0 || size.y < 0)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-cognitive-complexity"
      },
      "hash": "4da90efa0a6623f235fe6aba16d1e94b691fc7b08de009e5acbb2111f783d2de"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'intersects_segment' of similar type ('Point2 *') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 47,
          "offset": 74,
          "length": 6,
          "code": {
            "startLine": 45,
            "length": 6,
            "offset": 76,
            "surroundingCode": "}\n\nbool Rect2::intersects_segment(const Point2 &p_from, const Point2 &p_to, Point2 *r_pos, Point2 *r_normal) const {\n#ifdef MATH_CHECKS\n\tif (unlikely(size.x < 0 || size.y < 0)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "0a9e4e34240360c496802f7413786e8004d051b399428600990c4dfb5a8acc97"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 53,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 51,
            "length": 6,
            "offset": 11,
            "surroundingCode": "\t}\n#endif\n\treal_t min = 0, max = 1;\n\tint axis = 0;\n\treal_t sign = 0;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "bc48d0e91fd5d5b5f942bbe1c15e5a02cd07011dff1f21cffe2673f2f066a1b6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 62,
          "offset": 3,
          "length": 6,
          "code": {
            "startLine": 60,
            "length": 6,
            "offset": 76,
            "surroundingCode": "\t\treal_t box_begin = position[i];\n\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "c125d5f7769f42ae4f803fa1a6c89e81c29f2ba17f680d0dbe35a4af16485ecd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'cmin' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 62,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 60,
            "length": 4,
            "offset": 83,
            "surroundingCode": "\t\treal_t box_begin = position[i];\n\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "8ec9414dd9c51a159a0d3946bddeb980e2bdbe5b71a1308023027b6d0e0df058"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'cmax' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 62,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 60,
            "length": 4,
            "offset": 89,
            "surroundingCode": "\t\treal_t box_begin = position[i];\n\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "d02ad5726bb8916dd49696a96af5f1c6535dff1d752d9980bca28a30d81e733e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'csign' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 63,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 61,
            "length": 5,
            "offset": 70,
            "surroundingCode": "\t\treal_t box_end = box_begin + size[i];\n\t\treal_t cmin, cmax;\n\t\treal_t csign;\n\n\t\tif (seg_from < seg_to) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "35c33bd9d422553f1c7b48c97580fa2252de5137922dda9bae7b941e179d25dd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "use-std-min-max",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "use `std::min` instead of `<`",
      "detailsInfo": "use-std-min-max",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 89,
          "offset": 3,
          "length": 2,
          "code": {
            "startLine": 87,
            "length": 2,
            "offset": 23,
            "surroundingCode": "\t\t\tsign = csign;\n\t\t}\n\t\tif (cmax < max) {\n\t\t\tmax = cmax;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-use-std-min-max"
      },
      "hash": "3c8a7035a5a4e68c60d200c5180661bd66625209510b6f7b8ecd4ee5454c5a6b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Point2 *' (aka 'godot::Vector2 *') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 99,
          "offset": 6,
          "length": 8,
          "code": {
            "startLine": 97,
            "length": 8,
            "offset": 36,
            "surroundingCode": "\tVector2 rel = p_to - p_from;\n\n\tif (r_normal) {\n\t\tVector2 normal;\n\t\tnormal[axis] = sign;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "8eb3aa192e398b5b401dec3dd8fc6db78d3adabfa9be38eea36ced053a2ae3b1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Point2 *' (aka 'godot::Vector2 *') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 105,
          "offset": 6,
          "length": 5,
          "code": {
            "startLine": 103,
            "length": 5,
            "offset": 9,
            "surroundingCode": "\t}\n\n\tif (r_pos) {\n\t\t*r_pos = p_from + rel * min;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "2e56a0482770794cc4b59aed8f74b586526a61ce1ab6551231f3ed0fd744df45"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-cognitive-complexity",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'intersects_transformed' has cognitive complexity of 36 (threshold 25)",
      "detailsInfo": "function-cognitive-complexity",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 112,
          "offset": 13,
          "length": 22,
          "code": {
            "startLine": 110,
            "length": 22,
            "offset": 15,
            "surroundingCode": "}\n\nbool Rect2::intersects_transformed(const Transform2D &p_xform, const Rect2 &p_rect) const {\n#ifdef MATH_CHECKS\n\tif (unlikely(size.x < 0 || size.y < 0 || p_rect.size.x < 0 || p_rect.size.y < 0)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-cognitive-complexity"
      },
      "hash": "64c1f8ae76cf9502a1475dce0ab88b2f5736e5264f5bfc5f1f14b02ed3b6b426"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 120,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 118,
            "length": 7,
            "offset": 58,
            "surroundingCode": "\t//SAT intersection between local and transformed rect2\n\n\tVector2 xf_points[4] = {\n\t\tp_xform.xform(p_rect.position),\n\t\tp_xform.xform(Vector2(p_rect.position.x + p_rect.size.x, p_rect.position.y)),"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "1da6ab3814ec9729844c8a598922395866556a67d51b7d738c585138e8184ef0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'low_limit' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 127,
          "offset": 9,
          "length": 9,
          "code": {
            "startLine": 125,
            "length": 9,
            "offset": 13,
            "surroundingCode": "\t};\n\n\treal_t low_limit;\n\n\t//base rect2 first (faster)"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "82b8af506a84b2e9b63686c8bd83c610663d7d9a8a250da217726c0946f17420"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 132,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 130,
            "length": 4,
            "offset": 39,
            "surroundingCode": "\n\tif (xf_points[0].y > position.y) {\n\t\tgoto next1;\n\t}\n\tif (xf_points[1].y > position.y) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "ce73aa00c427ba8894c044e35d31f4ce4a39ef31b4c12b09fad2a2578f1d5e0b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 135,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 133,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\t}\n\tif (xf_points[1].y > position.y) {\n\t\tgoto next1;\n\t}\n\tif (xf_points[2].y > position.y) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "bd653de47158f63afc87a3d6ded955f1ae6eebeb908d9c6adcd6ecbe3ddb59dd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 138,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 136,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\t}\n\tif (xf_points[2].y > position.y) {\n\t\tgoto next1;\n\t}\n\tif (xf_points[3].y > position.y) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "e7df362fbaf00b4a86efcaa14b093503be32d6eb4f3affeb1c433aa896061ef6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 141,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 139,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\t}\n\tif (xf_points[3].y > position.y) {\n\t\tgoto next1;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "99bbc7468c1d40053132a2be2a8bf0df2841beeb98a0616dea7840b9009995f8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 151,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 149,
            "length": 4,
            "offset": 38,
            "surroundingCode": "\n\tif (xf_points[0].y < low_limit) {\n\t\tgoto next2;\n\t}\n\tif (xf_points[1].y < low_limit) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "d9093353070b2d49944aad3d5800534a9af2eb62096968838ccfcee45e4b4d41"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 154,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 152,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\t}\n\tif (xf_points[1].y < low_limit) {\n\t\tgoto next2;\n\t}\n\tif (xf_points[2].y < low_limit) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "f114a6fe84856e2b8e49741626ada7ffdf44ec8e8d97c2fa29b18f3c97f6c813"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 157,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 155,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\t}\n\tif (xf_points[2].y < low_limit) {\n\t\tgoto next2;\n\t}\n\tif (xf_points[3].y < low_limit) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "08cc3ceff5746fa798bac38355514db0272809670dc296fe72c6e53e35842b28"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 160,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 158,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\t}\n\tif (xf_points[3].y < low_limit) {\n\t\tgoto next2;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "057203aac1687496974ee4e5c5043900ed1347d813ea3ec7b1ecece5f9370ebb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 168,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 166,
            "length": 4,
            "offset": 39,
            "surroundingCode": "\n\tif (xf_points[0].x > position.x) {\n\t\tgoto next3;\n\t}\n\tif (xf_points[1].x > position.x) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "7d7a877abaa860d1b173c405af7f55f7409159091e0bac903d7983cf23285266"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 171,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 169,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\t}\n\tif (xf_points[1].x > position.x) {\n\t\tgoto next3;\n\t}\n\tif (xf_points[2].x > position.x) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "f63dd3b92cd2d72f82291cedafd91616ed317b324ec2d8de1fb19e2d5ae120a7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 174,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 172,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\t}\n\tif (xf_points[2].x > position.x) {\n\t\tgoto next3;\n\t}\n\tif (xf_points[3].x > position.x) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "5f2f141e3eb61303bbd3b62611aae04c897aef02e7ed84b95bce3bb235b48ad0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 177,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 175,
            "length": 4,
            "offset": 41,
            "surroundingCode": "\t}\n\tif (xf_points[3].x > position.x) {\n\t\tgoto next3;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "3ecf486eee1779ad21fb532972e53c925faa9c88a18f20025f776c8e6539d15f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 187,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 185,
            "length": 4,
            "offset": 38,
            "surroundingCode": "\n\tif (xf_points[0].x < low_limit) {\n\t\tgoto next4;\n\t}\n\tif (xf_points[1].x < low_limit) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "589096a4fbc672cc99d35bed10eac369d6a607600f036b9ec52ac761d5746d4e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 190,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 188,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\t}\n\tif (xf_points[1].x < low_limit) {\n\t\tgoto next4;\n\t}\n\tif (xf_points[2].x < low_limit) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "814da6924f434e141aec6b469d723f98007dd485baf042a06d1d2ac7024b5872"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 193,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 191,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\t}\n\tif (xf_points[2].x < low_limit) {\n\t\tgoto next4;\n\t}\n\tif (xf_points[3].x < low_limit) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "52207f71bbe8a4e827845883c41fe60c4aee8bf1895eadb9046e170f40d18543"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-goto",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid using 'goto' for flow control",
      "detailsInfo": "avoid-goto",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 196,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 194,
            "length": 4,
            "offset": 40,
            "surroundingCode": "\t}\n\tif (xf_points[3].x < low_limit) {\n\t\tgoto next4;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-goto"
      },
      "hash": "464ed0261320222119819641ec256a60be87b7456d2a19128a5b9c1f977fc754"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 203,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 201,
            "length": 7,
            "offset": 9,
            "surroundingCode": "next4:\n\n\tVector2 xf_points2[4] = {\n\t\tposition,\n\t\tVector2(position.x + size.x, position.y),"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "97156de24178e9c0912b58977b447acd4c97d44914e58d7189df8bf6bc985904"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'dp' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/rect2.cpp",
          "line": 213,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 211,
            "length": 2,
            "offset": 30,
            "surroundingCode": "\treal_t mina = maxa;\n\n\treal_t dp = p_xform.columns[0].dot(xf_points2[1]);\n\tmaxa = Math::max(dp, maxa);\n\tmina = Math::min(dp, mina);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "259af2fe12d83ab3c08b2a437b0b9a101984142101c261da1757cb3b0505183b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 55,
          "offset": 16,
          "length": 4,
          "code": {
            "startLine": 53,
            "length": 4,
            "offset": 48,
            "surroundingCode": "\tERR_FAIL_COND(det == 0);\n#endif\n\treal_t idet = 1.0f / det;\n\n\tSWAP(columns[0][0], columns[1][1]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "5476dc844ad550758e6abe3e4cf1407eace64874e28feaee0cd6018ae8c4f3b7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 76,
          "offset": 88,
          "length": 1,
          "code": {
            "startLine": 74,
            "length": 1,
            "offset": 161,
            "surroundingCode": "real_t Transform2D::get_skew() const {\n\treal_t det = basis_determinant();\n\treturn Math::acos(columns[0].normalized().dot(SIGN(det) * columns[1].normalized())) - (real_t)Math_PI * 0.5f;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "fb153003f8eecd027421a67852739611d17e851a0d5ce3d3f27b4a06c57e1009"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 76,
          "offset": 106,
          "length": 4,
          "code": {
            "startLine": 74,
            "length": 4,
            "offset": 179,
            "surroundingCode": "real_t Transform2D::get_skew() const {\n\treal_t det = basis_determinant();\n\treturn Math::acos(columns[0].normalized().dot(SIGN(det) * columns[1].normalized())) - (real_t)Math_PI * 0.5f;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "68592fe1a4a089fa9898dd66d971cae4764812a571652b5cb203695ce961b554"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 76,
          "offset": 106,
          "length": 4,
          "code": {
            "startLine": 74,
            "length": 4,
            "offset": 179,
            "surroundingCode": "real_t Transform2D::get_skew() const {\n\treal_t det = basis_determinant();\n\treturn Math::acos(columns[0].normalized().dot(SIGN(det) * columns[1].normalized())) - (real_t)Math_PI * 0.5f;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c960027bbf0f60a590d2452ede196bc993ea763b5c1bc618c1b884286e80c8d0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 81,
          "offset": 47,
          "length": 1,
          "code": {
            "startLine": 79,
            "length": 1,
            "offset": 132,
            "surroundingCode": "void Transform2D::set_skew(const real_t p_angle) {\n\treal_t det = basis_determinant();\n\tcolumns[1] = SIGN(det) * columns[0].rotated(((real_t)Math_PI * 0.5f + p_angle)).normalized() * columns[1].length();\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "9a2e69a17227855abf4d817f5b17a80d0589028e382d1be4e299fb1430e469fd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 81,
          "offset": 65,
          "length": 4,
          "code": {
            "startLine": 79,
            "length": 4,
            "offset": 150,
            "surroundingCode": "void Transform2D::set_skew(const real_t p_angle) {\n\treal_t det = basis_determinant();\n\tcolumns[1] = SIGN(det) * columns[0].rotated(((real_t)Math_PI * 0.5f + p_angle)).normalized() * columns[1].length();\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4af64cb77a98749dda6c068cc795545f0fc2f8a73968516e965a4ce50250868f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 81,
          "offset": 65,
          "length": 4,
          "code": {
            "startLine": 79,
            "length": 4,
            "offset": 150,
            "surroundingCode": "void Transform2D::set_skew(const real_t p_angle) {\n\treal_t det = basis_determinant();\n\tcolumns[1] = SIGN(det) * columns[0].rotated(((real_t)Math_PI * 0.5f + p_angle)).normalized() * columns[1].length();\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "8fe20a43d9db622689b8538d7244502935c11a661d86b56d1b8dda1c409e47eb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 90,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 88,
            "length": 2,
            "offset": 89,
            "surroundingCode": "void Transform2D::set_rotation(const real_t p_rot) {\n\tSize2 scale = get_scale();\n\treal_t cr = Math::cos(p_rot);\n\treal_t sr = Math::sin(p_rot);\n\tcolumns[0][0] = cr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "42f31a73769a46d5742ca43fab98feafb7b8cad75bbbd6a66ee2d08576f83b4e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 91,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 89,
            "length": 2,
            "offset": 67,
            "surroundingCode": "\tSize2 scale = get_scale();\n\treal_t cr = Math::cos(p_rot);\n\treal_t sr = Math::sin(p_rot);\n\tcolumns[0][0] = cr;\n\tcolumns[0][1] = sr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d779bd9e62f14944b0a15dc25b5a610a55bc5ec4436702485de18f3958c9efb6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 100,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 98,
            "length": 2,
            "offset": 78,
            "surroundingCode": "\nTransform2D::Transform2D(const real_t p_rot, const Vector2 &p_pos) {\n\treal_t cr = Math::cos(p_rot);\n\treal_t sr = Math::sin(p_rot);\n\tcolumns[0][0] = cr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a21e9b1365e000e9bb5e855f4a45ae71acb8d5d11a2f9a8448e178c7d13602b4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'sr' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 101,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 99,
            "length": 2,
            "offset": 108,
            "surroundingCode": "Transform2D::Transform2D(const real_t p_rot, const Vector2 &p_pos) {\n\treal_t cr = Math::cos(p_rot);\n\treal_t sr = Math::sin(p_rot);\n\tcolumns[0][0] = cr;\n\tcolumns[0][1] = sr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b092d6fb975d0a0f05f18cd7a0b3e4960f9f46995eeafb522fe09c73f327d801"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'x' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 152,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 150,
            "length": 1,
            "offset": 35,
            "surroundingCode": "\t// Gram-Schmidt Process\n\n\tVector2 x = columns[0];\n\tVector2 y = columns[1];\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "44bb3a813c950cc4603d0a1d757d8f7dbff3b4f91462ef506bbc83c3f4fb5b5a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'y' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 153,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 151,
            "length": 1,
            "offset": 35,
            "surroundingCode": "\n\tVector2 x = columns[0];\n\tVector2 y = columns[1];\n\n\tx.normalize();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d200f336182b6607a98f6c0b678dee53562ed4789c0f8ba84b70f961fed36e6a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'on' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 164,
          "offset": 14,
          "length": 2,
          "code": {
            "startLine": 162,
            "length": 2,
            "offset": 65,
            "surroundingCode": "\nTransform2D Transform2D::orthonormalized() const {\n\tTransform2D on = *this;\n\ton.orthonormalize();\n\treturn on;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c92eac0926da3f8f0109201e97933cd7f09b0257a0219f709f194ff6b2059f6f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 186,
          "offset": 7,
          "length": 7,
          "code": {
            "startLine": 184,
            "length": 7,
            "offset": 106,
            "surroundingCode": "bool Transform2D::operator==(const Transform2D &p_transform) const {\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (columns[i] != p_transform.columns[i]) {\n\t\t\treturn false;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "3e0800716c61371437147b3a25ab2b86963e98ec787ffd83978c3a55292b4208"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 186,
          "offset": 21,
          "length": 11,
          "code": {
            "startLine": 184,
            "length": 11,
            "offset": 120,
            "surroundingCode": "bool Transform2D::operator==(const Transform2D &p_transform) const {\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (columns[i] != p_transform.columns[i]) {\n\t\t\treturn false;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "7650df45ebd57750a7db96810dc44dc81e757470ece669a2763cd34429d126bc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 196,
          "offset": 7,
          "length": 7,
          "code": {
            "startLine": 194,
            "length": 7,
            "offset": 106,
            "surroundingCode": "bool Transform2D::operator!=(const Transform2D &p_transform) const {\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (columns[i] != p_transform.columns[i]) {\n\t\t\treturn true;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "9895884d5a4fd83c713084b98c5832c9d6db2b002f20e8a375ac0de18a347c81"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 196,
          "offset": 21,
          "length": 11,
          "code": {
            "startLine": 194,
            "length": 11,
            "offset": 120,
            "surroundingCode": "bool Transform2D::operator!=(const Transform2D &p_transform) const {\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (columns[i] != p_transform.columns[i]) {\n\t\t\treturn true;\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "b1bb7be0e2120afd51c976098ea27304c0fca63fd7444c77be0c069d6d45379d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 205,
            "length": 6,
            "offset": 47,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "1ce81e47d8d2a9fda92fc4667403ab7272d76420f4f6663c75df8148f450fe44"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'x0' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 54,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "217e8242624bc35df205bdb59c604b9b1c2c9c7dfee12e8ea102b4e984b9a7bd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'x0' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 54,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2c5854156ad36cc69cfacdafee78b3c504e30f58faa4b77fc3e3e2afd6fcdaae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'x1' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 58,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "a4347792f02efb1a3fcb76c9e61e9f4f2c312cdbf5e1fa70d9704982cd2dfb1e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'x1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 58,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a25c9ee211d02ebdab7d6c3739d958dac727acc1eb67dd9ad92279de85cc0482"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'y0' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 17,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 62,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "bff1a1d737e900955b0e6cf4e0a419039b36ddab900390dc5de1102cd8c8b36c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'y0' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 17,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 62,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "83cdeaf10f4841f39e6faa0fde8e7383e97a4d6741776e7bd9b874e9e7f27e56"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'y1' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 21,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 66,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "a8478ecf86243427b7f40854aaf703bce2e3860870a7d125c0915a03620c9c15"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'y1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 207,
          "offset": 21,
          "length": 2,
          "code": {
            "startLine": 205,
            "length": 2,
            "offset": 66,
            "surroundingCode": "\tcolumns[2] = xform(p_transform.columns[2]);\n\n\treal_t x0, x1, y0, y1;\n\n\tx0 = tdotx(p_transform.columns[0]);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f2c485be0e2de6eb6604b0d78bfbed71d45dffe45a3162508cd12509f26c45cc"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 't' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 221,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 219,
            "length": 1,
            "offset": 89,
            "surroundingCode": "\nTransform2D Transform2D::operator*(const Transform2D &p_transform) const {\n\tTransform2D t = *this;\n\tt *= p_transform;\n\treturn t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a0c52e9dd57dd1d5248ab437e76f04c07f53a512a06b54d755c24be841e8109a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 271,
          "offset": 9,
          "length": 7,
          "code": {
            "startLine": 269,
            "length": 7,
            "offset": 57,
            "surroundingCode": "\nreal_t Transform2D::basis_determinant() const {\n\treturn columns[0].x * columns[1].y - columns[0].y * columns[1].x;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ff04572f4a09a2b1011c5d32b197db8a762890e0c27e9d287960d51cd6b06ea4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 271,
          "offset": 39,
          "length": 7,
          "code": {
            "startLine": 269,
            "length": 7,
            "offset": 87,
            "surroundingCode": "\nreal_t Transform2D::basis_determinant() const {\n\treturn columns[0].x * columns[1].y - columns[0].y * columns[1].x;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "725c40d6898a3dd483ba8f171fe064964e33523fe1b030e19410cff18b8e54c4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 276,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 274,
            "length": 2,
            "offset": 131,
            "surroundingCode": "Transform2D Transform2D::interpolate_with(const Transform2D &p_transform, const real_t p_c) const {\n\t//extract parameters\n\tVector2 p1 = get_origin();\n\tVector2 p2 = p_transform.get_origin();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "7b3f711915bab13b302003ef2dde3017ef35f807304cc72efd4eff00a85415df"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'p2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 277,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 275,
            "length": 2,
            "offset": 59,
            "surroundingCode": "\t//extract parameters\n\tVector2 p1 = get_origin();\n\tVector2 p2 = p_transform.get_origin();\n\n\treal_t r1 = get_rotation();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "730dc490d0f28daf0c61adb690c4d2be47684942fcd650e3069299d704a61ee0"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 279,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 277,
            "length": 2,
            "offset": 49,
            "surroundingCode": "\tVector2 p2 = p_transform.get_origin();\n\n\treal_t r1 = get_rotation();\n\treal_t r2 = p_transform.get_rotation();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1a9318e30d797c1abb2d94175423736eb961fdfa2b26eb4d18fb0b9a69750daf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 280,
          "offset": 9,
          "length": 2,
          "code": {
            "startLine": 278,
            "length": 2,
            "offset": 38,
            "surroundingCode": "\n\treal_t r1 = get_rotation();\n\treal_t r2 = p_transform.get_rotation();\n\n\tSize2 s1 = get_scale();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "bbfd480e978f452a1e2a1fb38366e00efd5ad64790aba025b0f96911719d45f2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 282,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 280,
            "length": 2,
            "offset": 49,
            "surroundingCode": "\treal_t r2 = p_transform.get_rotation();\n\n\tSize2 s1 = get_scale();\n\tSize2 s2 = p_transform.get_scale();\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e03655ebfccc484b183d159f5d606dcfa023928dc10f9bef5cb130a0b450c953"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 283,
          "offset": 8,
          "length": 2,
          "code": {
            "startLine": 281,
            "length": 2,
            "offset": 33,
            "surroundingCode": "\n\tSize2 s1 = get_scale();\n\tSize2 s2 = p_transform.get_scale();\n\n\t//slerp rotation"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5ca14e165c8eebe4dad9633b56f68a7826e41321b7ffda917ec1a7c43c1dd4f3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v1' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 286,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 284,
            "length": 2,
            "offset": 28,
            "surroundingCode": "\n\t//slerp rotation\n\tVector2 v1(Math::cos(r1), Math::sin(r1));\n\tVector2 v2(Math::cos(r2), Math::sin(r2));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "447a05f023cb03442c953146b12e7dfb8d23728e33de450cf7eea7bdb0ae98f1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v2' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 287,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 285,
            "length": 2,
            "offset": 70,
            "surroundingCode": "\t//slerp rotation\n\tVector2 v1(Math::cos(r1), Math::sin(r1));\n\tVector2 v2(Math::cos(r2), Math::sin(r2));\n\n\treal_t dot = v1.dot(v2);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f4859b4a32e70bb9b243354f866d35a3445e7e98802d50ec4e9c16e5f778132f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 293,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 291,
            "length": 1,
            "offset": 62,
            "surroundingCode": "\tdot = Math::clamp(dot, (real_t)-1.0, (real_t)1.0);\n\n\tVector2 v;\n\n\tif (dot > 0.9995f) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c5965d6c80fb009fbee2521a4ba8c9328184c1245f85adcc5be2dae51643ab72"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.9995f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 295,
          "offset": 12,
          "length": 7,
          "code": {
            "startLine": 293,
            "length": 7,
            "offset": 24,
            "surroundingCode": "\tVector2 v;\n\n\tif (dot > 0.9995f) {\n\t\tv = v1.lerp(v2, p_c).normalized(); //linearly interpolate to avoid numerical precision issues\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "041ee5a84da343e5163cfec864440584c139d462b523b57ece3d9cfda3feb83b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 295,
          "offset": 12,
          "length": 7,
          "code": {
            "startLine": 293,
            "length": 7,
            "offset": 24,
            "surroundingCode": "\tVector2 v;\n\n\tif (dot > 0.9995f) {\n\t\tv = v1.lerp(v2, p_c).normalized(); //linearly interpolate to avoid numerical precision issues\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "23a49aeff37112f53d3f24a2add8eb3f26f3324e26e2d33d9388398945de2e92"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v3' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform2d.cpp",
          "line": 299,
          "offset": 11,
          "length": 2,
          "code": {
            "startLine": 297,
            "length": 2,
            "offset": 60,
            "surroundingCode": "\t} else {\n\t\treal_t angle = p_c * Math::acos(dot);\n\t\tVector2 v3 = (v2 - v1 * dot).normalized();\n\t\tv = v1 * Math::cos(angle) + v3 * Math::sin(angle);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f39ffa1423f2a5cdc104440a96bb0698cc2841409fddeca3ea3a3e072d0cc647"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 't' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 85,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 83,
            "length": 1,
            "offset": 144,
            "surroundingCode": "\tERR_FAIL_COND_V_MSG(origin.is_equal_approx(p_target), Transform3D(), \"The transform's origin and target can't be equal.\");\n#endif\n\tTransform3D t = *this;\n\tt.basis = Basis::looking_at(p_target - origin, p_up);\n\treturn t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6dace43d38d3a560066dafc4d82a694b0dc8f643fc6dc80272cc5f949efd4b1b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 't' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 196,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 194,
            "length": 1,
            "offset": 89,
            "surroundingCode": "\nTransform3D Transform3D::operator*(const Transform3D &p_transform) const {\n\tTransform3D t = *this;\n\tt *= p_transform;\n\treturn t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "2d49a3c5a188c7002bab19f8d2d51e02d50cc6ddf95e49913c724493e4d72f44"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'Transform3D' of similar type ('const Vector3 &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 224,
          "offset": 66,
          "length": 5,
          "code": {
            "startLine": 222,
            "length": 5,
            "offset": 68,
            "surroundingCode": "}\n\nTransform3D::Transform3D(const Vector3 &p_x, const Vector3 &p_y, const Vector3 &p_z, const Vector3 &p_origin) :\n\t\torigin(p_origin) {\n\tbasis.set_column(0, p_x);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "5497b2b7e36469136655f52ad1b9b68ae8355c89b9f1669392aa16f8be65bf99"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'xx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 33,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 35,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "5140b6bc67e067deff97fd77e71f9dc07227423dd25b2972e1eb447ef253018a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'xy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 44,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 46,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ed54dfc5c7fab711eaa91fcb4194f4dbeba30055d1a477e99953d4fc9d3efb6a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'xz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 55,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 57,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6ee95d497415bcfe15742ebe92f9c2d1c6c4de36ce84bed96a80d8729b98c1ce"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'yx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 66,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 68,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ca2bbb984d8c4ea8aec9c30319b02a943a10bbdc7c6001f0fadadaa1875e0568"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'yy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 77,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 79,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "16c0378f0fea1acf957e15cb09f580c41705316aed3405a75518a0ccf5ca5291"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'yz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 88,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 90,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "9de2c2357823d375757bcfde68eababee71e43f5083973a752fb9937af292bd6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'zx' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 99,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 101,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "08cae06d220faaa45a3083f61a72c834eaf80114e293e69494ad5b234f0adb6b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'zy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 110,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 112,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d50518af68da659ea09f99b6e48141fa6687f5177d66c455e8a5814d2878322e"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'Transform3D' of similar type ('real_t') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 114,
          "length": 6,
          "code": {
            "startLine": 229,
            "length": 6,
            "offset": 116,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "31ef40431cff1751822de95ef7ede59289866faba4e1dc66d5c3b29e0e873ac3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'zz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 121,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 123,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "7f2ada379225bc534a72ecff862f0ef1d783dc6ee04b3230b25d83ba0c6d6017"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'ox' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 132,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 134,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "72b98cd54d5132a4a6376850284c9cc86de7a7d3fff05aa74287199478cf9f10"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'oy' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 143,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 145,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b6d5ae7cb034e904d0fd711210c092e4aec6533da6a3e72a7c8c6af39330ffef"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'oz' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/transform3d.cpp",
          "line": 231,
          "offset": 154,
          "length": 2,
          "code": {
            "startLine": 229,
            "length": 2,
            "offset": 156,
            "surroundingCode": "}\n\nTransform3D::Transform3D(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {\n\tbasis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);\n\torigin = Vector3(ox, oy, oz);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "899798cca5e89a5c52c73ba490e02e1e4e3201cef055bfc01faa9f0bf454f131"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Variant::Variant' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/variant.hpp",
          "line": 201,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 199,
            "length": 7,
            "offset": 61,
            "surroundingCode": "\tVariant(const NodePath &v);\n\tVariant(const godot::RID &v);\n\tVariant(const ObjectID &v);\n\tVariant(const Object *v);\n\tVariant(const Callable &v);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "6a0447aeaf2f7dace9339089da08411d80ba1f3fa4c3c93fb9ea69776674db4a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 43,
          "offset": 1,
          "length": 41,
          "code": {
            "startLine": 41,
            "length": 41,
            "offset": 19,
            "surroundingCode": "namespace godot {\n\nGDExtensionVariantFromTypeConstructorFunc Variant::from_type_constructor[Variant::VARIANT_MAX]{};\nGDExtensionTypeFromVariantConstructorFunc Variant::to_type_constructor[Variant::VARIANT_MAX]{};\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "4f894a2051a88186d71cb130129e2e97079bd423a9416bca105f4cab7c295638"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 44,
          "offset": 1,
          "length": 41,
          "code": {
            "startLine": 42,
            "length": 41,
            "offset": 99,
            "surroundingCode": "\nGDExtensionVariantFromTypeConstructorFunc Variant::from_type_constructor[Variant::VARIANT_MAX]{};\nGDExtensionTypeFromVariantConstructorFunc Variant::to_type_constructor[Variant::VARIANT_MAX]{};\n\nvoid Variant::init_bindings() {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "953fc977365b8ec559125ebd1271004d4d2937ae7bfd137fc9dde743864b480a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 49,
          "offset": 3,
          "length": 21,
          "code": {
            "startLine": 47,
            "length": 21,
            "offset": 73,
            "surroundingCode": "\t// Start from 1 to skip NIL.\n\tfor (int i = 1; i < VARIANT_MAX; i++) {\n\t\tfrom_type_constructor[i] = internal::gdextension_interface_get_variant_from_type_constructor((GDExtensionVariantType)i);\n\t\tto_type_constructor[i] = internal::gdextension_interface_get_variant_to_type_constructor((GDExtensionVariantType)i);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "459d7305a638a3552437d1c25c3932abd583aaaa234c29fe26fce8df16ac35df"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 50,
          "offset": 3,
          "length": 19,
          "code": {
            "startLine": 48,
            "length": 19,
            "offset": 166,
            "surroundingCode": "\tfor (int i = 1; i < VARIANT_MAX; i++) {\n\t\tfrom_type_constructor[i] = internal::gdextension_interface_get_variant_from_type_constructor((GDExtensionVariantType)i);\n\t\tto_type_constructor[i] = internal::gdextension_interface_get_variant_to_type_constructor((GDExtensionVariantType)i);\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "191296d883ea13f1b8a8134d2ec4cb64d9b3423afe7be738fa50ad02af8a2a69"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "noexcept-move-operations",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "move constructors should be marked noexcept",
      "detailsInfo": "noexcept-move-operations",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 85,
          "offset": 10,
          "length": 7,
          "code": {
            "startLine": 83,
            "length": 7,
            "offset": 12,
            "surroundingCode": "}\n\nVariant::Variant(Variant &&other) {\n\tstd::swap(opaque, other.opaque);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-noexcept-move-operations"
      },
      "hash": "b0b4631f06ee499d72691bf2c52052f033e390332c67a60c56ad95f95575cf6e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 89,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 87,
            "length": 1,
            "offset": 25,
            "surroundingCode": "}\n\nVariant::Variant(bool v) {\n\tGDExtensionBool encoded;\n\tPtrToArg<bool>::encode(v, &encoded);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "bee752a3943e3439b754ea31d2908b06429a2e80bef14ca363e796f900e1bd72"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'encoded' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 90,
          "offset": 18,
          "length": 7,
          "code": {
            "startLine": 88,
            "length": 7,
            "offset": 45,
            "surroundingCode": "\nVariant::Variant(bool v) {\n\tGDExtensionBool encoded;\n\tPtrToArg<bool>::encode(v, &encoded);\n\tfrom_type_constructor[BOOL](_native_ptr(), &encoded);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "2d10ca510ca332a825bacb36c6a16f6024bf26e9ddb58c27ee37388dcc990a73"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 95,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 93,
            "length": 1,
            "offset": 28,
            "surroundingCode": "}\n\nVariant::Variant(int64_t v) {\n\tGDExtensionInt encoded;\n\tPtrToArg<int64_t>::encode(v, &encoded);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f6a79dd5fb6280418d0963beb2351367f659a62472af19e2afc1c011fab41ddf"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'encoded' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 96,
          "offset": 17,
          "length": 7,
          "code": {
            "startLine": 94,
            "length": 7,
            "offset": 47,
            "surroundingCode": "\nVariant::Variant(int64_t v) {\n\tGDExtensionInt encoded;\n\tPtrToArg<int64_t>::encode(v, &encoded);\n\tfrom_type_constructor[INT](_native_ptr(), &encoded);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "3a3fc3891c129cb8813a91bb88dfdc591a384cdfca4b73652f3a4965684e4785"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 101,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 99,
            "length": 1,
            "offset": 27,
            "surroundingCode": "}\n\nVariant::Variant(double v) {\n\tdouble encoded;\n\tPtrToArg<double>::encode(v, &encoded);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "24c2cf4aa7673f213ea2ca4cc8fe9f2602018686c01119f30072d04793ec8eb2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'encoded' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 102,
          "offset": 9,
          "length": 7,
          "code": {
            "startLine": 100,
            "length": 7,
            "offset": 38,
            "surroundingCode": "\nVariant::Variant(double v) {\n\tdouble encoded;\n\tPtrToArg<double>::encode(v, &encoded);\n\tfrom_type_constructor[FLOAT](_native_ptr(), &encoded);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "252e471d75992f9663ee1de0bdd68f5c3cd124828c7db658f35f9b5d237ca40c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 107,
          "offset": 32,
          "length": 1,
          "code": {
            "startLine": 105,
            "length": 1,
            "offset": 34,
            "surroundingCode": "}\n\nVariant::Variant(const String &v) {\n\tfrom_type_constructor[STRING](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "6fe3d1d8862c737a3086e624363380e8c9e63ec8dcc28d37673f260837f1c7f5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 115,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 113,
            "length": 1,
            "offset": 36,
            "surroundingCode": "}\n\nVariant::Variant(const Vector2i &v) {\n\tfrom_type_constructor[VECTOR2I](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "94b850718608e9223741aeca48f03f10946ead38f62da7696d9a05fed10ea304"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 119,
          "offset": 31,
          "length": 1,
          "code": {
            "startLine": 117,
            "length": 1,
            "offset": 33,
            "surroundingCode": "}\n\nVariant::Variant(const Rect2 &v) {\n\tfrom_type_constructor[RECT2](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4c4ecd53a84a36e40bc1114f3e17791548f6626484d6d86fe8414d88c62ab814"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 123,
          "offset": 32,
          "length": 1,
          "code": {
            "startLine": 121,
            "length": 1,
            "offset": 34,
            "surroundingCode": "}\n\nVariant::Variant(const Rect2i &v) {\n\tfrom_type_constructor[RECT2I](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ae21532c061eaae5614111cd4216258e108e8af546cb7436cdddde222fb75afb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 127,
          "offset": 33,
          "length": 1,
          "code": {
            "startLine": 125,
            "length": 1,
            "offset": 35,
            "surroundingCode": "}\n\nVariant::Variant(const Vector3 &v) {\n\tfrom_type_constructor[VECTOR3](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "02046da2f931333a2d0b1a5997a0b99c63fc1eb70491fa6a5cdcb129444d441b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 131,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 129,
            "length": 1,
            "offset": 36,
            "surroundingCode": "}\n\nVariant::Variant(const Vector3i &v) {\n\tfrom_type_constructor[VECTOR3I](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "fba4972a5618b7e840b34e09449e561b4d7c0beccefaaa6e6cdfc7be82d91a32"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 135,
          "offset": 37,
          "length": 1,
          "code": {
            "startLine": 133,
            "length": 1,
            "offset": 39,
            "surroundingCode": "}\n\nVariant::Variant(const Transform2D &v) {\n\tfrom_type_constructor[TRANSFORM2D](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "193c07f2313118289553aefd6d0ddc370ab408968b3eb4cfa8d6d39d54566dcd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 139,
          "offset": 33,
          "length": 1,
          "code": {
            "startLine": 137,
            "length": 1,
            "offset": 35,
            "surroundingCode": "}\n\nVariant::Variant(const Vector4 &v) {\n\tfrom_type_constructor[VECTOR4](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "436237093838220c0d672bb287e2b929dcb358bdce84983de729fdd681cee4d9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 143,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 141,
            "length": 1,
            "offset": 36,
            "surroundingCode": "}\n\nVariant::Variant(const Vector4i &v) {\n\tfrom_type_constructor[VECTOR4I](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1ba3dc86f796012769f94b7d41c27c33a2b1195d837193eb432945a064949329"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 147,
          "offset": 31,
          "length": 1,
          "code": {
            "startLine": 145,
            "length": 1,
            "offset": 33,
            "surroundingCode": "}\n\nVariant::Variant(const Plane &v) {\n\tfrom_type_constructor[PLANE](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "eaa367d8a1d86d56975c2aa5a1c0e80fd627a1a869fa4c8175271ec6350a8897"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 151,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 149,
            "length": 1,
            "offset": 38,
            "surroundingCode": "}\n\nVariant::Variant(const Quaternion &v) {\n\tfrom_type_constructor[QUATERNION](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "0e609b755b85e04e331cb55ecaf8a916ff1119049024c7d7945e305678f4094a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 155,
          "offset": 37,
          "length": 1,
          "code": {
            "startLine": 153,
            "length": 1,
            "offset": 39,
            "surroundingCode": "}\n\nVariant::Variant(const godot::AABB &v) {\n\tfrom_type_constructor[AABB](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cc9df0effc7ae0c7e1731097c079b1893c6d72079a36b4e6539f2dba4a57d101"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 159,
          "offset": 31,
          "length": 1,
          "code": {
            "startLine": 157,
            "length": 1,
            "offset": 33,
            "surroundingCode": "}\n\nVariant::Variant(const Basis &v) {\n\tfrom_type_constructor[BASIS](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "58a9f93d0252578e9470dc12cd780d74e80ffa94bf1792ce48a669749dab4a8e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 163,
          "offset": 37,
          "length": 1,
          "code": {
            "startLine": 161,
            "length": 1,
            "offset": 39,
            "surroundingCode": "}\n\nVariant::Variant(const Transform3D &v) {\n\tfrom_type_constructor[TRANSFORM3D](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "39ba967f04d618260814f8ae77c751d966e6858e55eee6f10b3058135f57cd10"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 167,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 165,
            "length": 1,
            "offset": 38,
            "surroundingCode": "}\n\nVariant::Variant(const Projection &v) {\n\tfrom_type_constructor[PROJECTION](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "fecdf419fced6da6a2fd002041f4e70f7a9db59fe17f4031e9df5834d0bf7508"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 171,
          "offset": 31,
          "length": 1,
          "code": {
            "startLine": 169,
            "length": 1,
            "offset": 33,
            "surroundingCode": "}\n\nVariant::Variant(const Color &v) {\n\tfrom_type_constructor[COLOR](_native_ptr(), (GDExtensionTypePtr)&v);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "61401c5db63dd12ffa7f4ff08e6c7005d7d0fcbf3988867e652ca592e367327c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 175,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 173,
            "length": 1,
            "offset": 38,
            "surroundingCode": "}\n\nVariant::Variant(const StringName &v) {\n\tfrom_type_constructor[STRING_NAME](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "58bef048fe6ac533184387d178f38f4a3dabd296bce559e56407ccf6e052e7a9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 179,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 177,
            "length": 1,
            "offset": 36,
            "surroundingCode": "}\n\nVariant::Variant(const NodePath &v) {\n\tfrom_type_constructor[NODE_PATH](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1095e920d16a41940a44eec4623a5a94849f70733d3123da032fe8375056e973"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 183,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 181,
            "length": 1,
            "offset": 38,
            "surroundingCode": "}\n\nVariant::Variant(const godot::RID &v) {\n\tfrom_type_constructor[RID](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ed571f6396db4090cd3d5a975caa76f6d38e27d4cb94846312118ac43822e9de"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 187,
          "offset": 32,
          "length": 1,
          "code": {
            "startLine": 185,
            "length": 1,
            "offset": 34,
            "surroundingCode": "}\n\nVariant::Variant(const Object *v) {\n\tif (v) {\n\t\tfrom_type_constructor[OBJECT](_native_ptr(), const_cast<GodotObject **>(&v->_owner));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4b0962cb5b8f4a0c22cba4e63c147fc9f238fe0d09cc519f7b5612a4e921568d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 200,
          "offset": 34,
          "length": 1,
          "code": {
            "startLine": 198,
            "length": 1,
            "offset": 36,
            "surroundingCode": "}\n\nVariant::Variant(const Callable &v) {\n\tfrom_type_constructor[CALLABLE](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "95c2a1bf8de1cf1eebf6dcb9ee8c23090e723a0ea10c8b3ab04f53f040c982a5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 204,
          "offset": 32,
          "length": 1,
          "code": {
            "startLine": 202,
            "length": 1,
            "offset": 34,
            "surroundingCode": "}\n\nVariant::Variant(const Signal &v) {\n\tfrom_type_constructor[SIGNAL](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "eb33f9b5e46b5274eb96fc4117df677adde81d170c3fbc5760172b43bae8ad2f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 208,
          "offset": 36,
          "length": 1,
          "code": {
            "startLine": 206,
            "length": 1,
            "offset": 38,
            "surroundingCode": "}\n\nVariant::Variant(const Dictionary &v) {\n\tfrom_type_constructor[DICTIONARY](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ba3b9caa1b3f4b0795f6c326e3b91e63e958994defc15b3320701de70ec567e7"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 220,
          "offset": 42,
          "length": 1,
          "code": {
            "startLine": 218,
            "length": 1,
            "offset": 44,
            "surroundingCode": "}\n\nVariant::Variant(const PackedInt32Array &v) {\n\tfrom_type_constructor[PACKED_INT32_ARRAY](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a8c661c0b289a82328c3eb4fe8e190acf9ca8a1baeed449e480f07bd9f383e96"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 224,
          "offset": 42,
          "length": 1,
          "code": {
            "startLine": 222,
            "length": 1,
            "offset": 44,
            "surroundingCode": "}\n\nVariant::Variant(const PackedInt64Array &v) {\n\tfrom_type_constructor[PACKED_INT64_ARRAY](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e77a1ef1f33f136d45b146cec7ca914bcfca54c7c459df38b2a78908b2884629"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 228,
          "offset": 44,
          "length": 1,
          "code": {
            "startLine": 226,
            "length": 1,
            "offset": 46,
            "surroundingCode": "}\n\nVariant::Variant(const PackedFloat32Array &v) {\n\tfrom_type_constructor[PACKED_FLOAT32_ARRAY](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "bfd63f7c90cff58707554673ee49372c81ad6f259462b08291a21a58309d7587"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 236,
          "offset": 43,
          "length": 1,
          "code": {
            "startLine": 234,
            "length": 1,
            "offset": 45,
            "surroundingCode": "}\n\nVariant::Variant(const PackedStringArray &v) {\n\tfrom_type_constructor[PACKED_STRING_ARRAY](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a454f8bd6f7a5ddb12741fb5da983b228fd0e9504fab6effa464c78210d28360"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 244,
          "offset": 44,
          "length": 1,
          "code": {
            "startLine": 242,
            "length": 1,
            "offset": 46,
            "surroundingCode": "}\n\nVariant::Variant(const PackedVector3Array &v) {\n\tfrom_type_constructor[PACKED_VECTOR3_ARRAY](_native_ptr(), v._native_ptr());\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c33a587e8ff6624a44df5c7dfde9b8ad2f578a99b2b119ca69d44bdbd59c6c35"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'result' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 261,
          "offset": 18,
          "length": 6,
          "code": {
            "startLine": 259,
            "length": 6,
            "offset": 51,
            "surroundingCode": "\nVariant::operator bool() const {\n\tGDExtensionBool result;\n\tto_type_constructor[BOOL](&result, _native_ptr());\n\treturn PtrToArg<bool>::convert(&result);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "201f67772a5392e5dd80d1e411ba6088b2eaa62022574c89aa7ffdd4f4b36713"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'result' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 267,
          "offset": 17,
          "length": 6,
          "code": {
            "startLine": 265,
            "length": 6,
            "offset": 53,
            "surroundingCode": "\nVariant::operator int64_t() const {\n\tGDExtensionInt result;\n\tto_type_constructor[INT](&result, _native_ptr());\n\treturn PtrToArg<int64_t>::convert(&result);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "ba1fa91e5fae6ef9806528fa94fd8880e3cc916467aaa03e5d619e0116121106"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'result' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 301,
          "offset": 9,
          "length": 6,
          "code": {
            "startLine": 299,
            "length": 6,
            "offset": 44,
            "surroundingCode": "\nVariant::operator double() const {\n\tdouble result;\n\tto_type_constructor[FLOAT](&result, _native_ptr());\n\treturn PtrToArg<double>::convert(&result);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "146c1e298d65e6ee7da8e3cc2ccc5d2c69c05121cbe39dcd66814b884ff4251a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 450,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 448,
            "length": 4,
            "offset": 75,
            "surroundingCode": "\tif (get_type() == Type::INT) {\n\t\treturn ObjectID(operator uint64_t());\n\t} else if (get_type() == Type::OBJECT) {\n\t\tObject *obj = operator Object *();\n\t\tif (obj != nullptr) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "4ae1ce99f3d8e25b60908a64cae095fd39d52781cf4823437d5139461c261ef6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 454,
          "offset": 5,
          "length": 4,
          "code": {
            "startLine": 452,
            "length": 4,
            "offset": 72,
            "surroundingCode": "\t\tif (obj != nullptr) {\n\t\t\treturn ObjectID(obj->get_instance_id());\n\t\t} else {\n\t\t\treturn ObjectID();\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "a9bedaf29d3452035cb13a1084da9922b548ca47bee55a8d3e4dff3d4c47366d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "noexcept-move-operations",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "move assignment operators should be marked noexcept",
      "detailsInfo": "noexcept-move-operations",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 524,
          "offset": 19,
          "length": 8,
          "code": {
            "startLine": 522,
            "length": 8,
            "offset": 21,
            "surroundingCode": "}\n\nVariant &Variant::operator=(Variant &&other) {\n\tstd::swap(opaque, other.opaque);\n\treturn *this;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-noexcept-move-operations"
      },
      "hash": "f1470267586dde0e94f9a2172f0144978dbacb0803d450fd497b3138cfa88430"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "make-member-function-const",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'callp' can be made const",
      "detailsInfo": "make-member-function-const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 559,
          "offset": 15,
          "length": 5,
          "code": {
            "startLine": 557,
            "length": 5,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::callp(const StringName &method, const Variant **args, int argcount, Variant &r_ret, GDExtensionCallError &r_error) {\n\tinternal::gdextension_interface_variant_call(_native_ptr(), method._native_ptr(), reinterpret_cast<GDExtensionConstVariantPtr *>(args), argcount, r_ret._native_ptr(), &r_error);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-make-member-function-const"
      },
      "hash": "60bfcac94b064588efc4dfd50132c84b3fe2287ca1d54715f9fe1f7b6eace794"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 560,
          "offset": 84,
          "length": 16,
          "code": {
            "startLine": 558,
            "length": 16,
            "offset": 215,
            "surroundingCode": "\nvoid Variant::callp(const StringName &method, const Variant **args, int argcount, Variant &r_ret, GDExtensionCallError &r_error) {\n\tinternal::gdextension_interface_variant_call(_native_ptr(), method._native_ptr(), reinterpret_cast<GDExtensionConstVariantPtr *>(args), argcount, r_ret._native_ptr(), &r_error);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "f78a957af8c06fd6c7ef003cd7f8866cb24ce1d67da8351eba13ddeba3b758fa"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'callp_static' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 563,
          "offset": 15,
          "length": 12,
          "code": {
            "startLine": 561,
            "length": 12,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::callp_static(Variant::Type type, const StringName &method, const Variant **args, int argcount, Variant &r_ret, GDExtensionCallError &r_error) {\n\tinternal::gdextension_interface_variant_call_static(static_cast<GDExtensionVariantType>(type), method._native_ptr(), reinterpret_cast<GDExtensionConstVariantPtr *>(args), argcount, r_ret._native_ptr(), &r_error);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "957b6369644494335e7813560f6a6dc57e1529d6c5594465da74d7969af281a9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 564,
          "offset": 119,
          "length": 16,
          "code": {
            "startLine": 562,
            "length": 16,
            "offset": 277,
            "surroundingCode": "\nvoid Variant::callp_static(Variant::Type type, const StringName &method, const Variant **args, int argcount, Variant &r_ret, GDExtensionCallError &r_error) {\n\tinternal::gdextension_interface_variant_call_static(static_cast<GDExtensionVariantType>(type), method._native_ptr(), reinterpret_cast<GDExtensionConstVariantPtr *>(args), argcount, r_ret._native_ptr(), &r_error);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "f71589b332a290706a10d30f749a0963233eddb9229dbcfc598b6807f6ae2820"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'op' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 567,
          "offset": 40,
          "length": 2,
          "code": {
            "startLine": 565,
            "length": 2,
            "offset": 42,
            "surroundingCode": "}\n\nvoid Variant::evaluate(const Operator &op, const Variant &a, const Variant &b, Variant &r_ret, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_evaluate(static_cast<GDExtensionVariantOperator>(op), a._native_ptr(), b._native_ptr(), r_ret._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "771d71f0df97a19f0cb9ee397fefa06f0b25061baed7734771fa702d725ade0c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'a' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 567,
          "offset": 59,
          "length": 1,
          "code": {
            "startLine": 565,
            "length": 1,
            "offset": 61,
            "surroundingCode": "}\n\nvoid Variant::evaluate(const Operator &op, const Variant &a, const Variant &b, Variant &r_ret, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_evaluate(static_cast<GDExtensionVariantOperator>(op), a._native_ptr(), b._native_ptr(), r_ret._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "fe8522f3795224be0cdbc1c429d9684b77e8934c5ff28f2ed9d40922a1e488d3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'b' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 567,
          "offset": 77,
          "length": 1,
          "code": {
            "startLine": 565,
            "length": 1,
            "offset": 79,
            "surroundingCode": "}\n\nvoid Variant::evaluate(const Operator &op, const Variant &a, const Variant &b, Variant &r_ret, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_evaluate(static_cast<GDExtensionVariantOperator>(op), a._native_ptr(), b._native_ptr(), r_ret._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f32d9bcc8b06e7dda20d4671cf723dcb839d638008ccd4d4b69edef9274f344b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'evaluate' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 567,
          "offset": 80,
          "length": 7,
          "code": {
            "startLine": 565,
            "length": 7,
            "offset": 82,
            "surroundingCode": "}\n\nvoid Variant::evaluate(const Operator &op, const Variant &a, const Variant &b, Variant &r_ret, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_evaluate(static_cast<GDExtensionVariantOperator>(op), a._native_ptr(), b._native_ptr(), r_ret._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "cf7aee2af82667ca944ea349bdb99d87fa8a552f21158a88d93420b65c8ebd79"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 568,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 566,
            "length": 5,
            "offset": 130,
            "surroundingCode": "\nvoid Variant::evaluate(const Operator &op, const Variant &a, const Variant &b, Variant &r_ret, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_evaluate(static_cast<GDExtensionVariantOperator>(op), a._native_ptr(), b._native_ptr(), r_ret._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "f643c4df94419a934dffa59c773aefb526ad33363ff27ba7238574a97e26ebdd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "make-member-function-const",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'set' can be made const",
      "detailsInfo": "make-member-function-const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 573,
          "offset": 15,
          "length": 3,
          "code": {
            "startLine": 571,
            "length": 3,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::set(const Variant &key, const Variant &value, bool *r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set(_native_ptr(), key._native_ptr(), value._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-make-member-function-const"
      },
      "hash": "cc0b1f24c506976537dd212891016a46039cd7da5ad30086ff55303e6535bcc0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 574,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 572,
            "length": 5,
            "offset": 95,
            "surroundingCode": "\nvoid Variant::set(const Variant &key, const Variant &value, bool *r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set(_native_ptr(), key._native_ptr(), value._native_ptr(), &valid);\n\tif (r_valid) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "be3dd9f2090f94843412b52a4a74d00acc4a8de5da2fc27de808dbaf35b2b0bf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 576,
          "offset": 6,
          "length": 7,
          "code": {
            "startLine": 574,
            "length": 7,
            "offset": 138,
            "surroundingCode": "\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set(_native_ptr(), key._native_ptr(), value._native_ptr(), &valid);\n\tif (r_valid) {\n\t\t*r_valid = PtrToArg<bool>::convert(&valid);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "3630c541e5ca7078d0c126dab22ffd5ae360d78c392ba07190c8bc791d08117c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "make-member-function-const",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'set_named' can be made const",
      "detailsInfo": "make-member-function-const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 581,
          "offset": 15,
          "length": 9,
          "code": {
            "startLine": 579,
            "length": 9,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::set_named(const StringName &name, const Variant &value, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set_named(_native_ptr(), name._native_ptr(), value._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-make-member-function-const"
      },
      "hash": "9ce9e71ec5422b333458fa0aab956a9dc996ed2924c6d788f4bc13a4f2c063c1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 582,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 580,
            "length": 5,
            "offset": 105,
            "surroundingCode": "\nvoid Variant::set_named(const StringName &name, const Variant &value, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set_named(_native_ptr(), name._native_ptr(), value._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "cfec5945b9323a358046c8a85a7ce86700f3934e89de8c4f94d332c70fb8feef"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "make-member-function-const",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'set_indexed' can be made const",
      "detailsInfo": "make-member-function-const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 587,
          "offset": 15,
          "length": 11,
          "code": {
            "startLine": 585,
            "length": 11,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::set_indexed(int64_t index, const Variant &value, bool &r_valid, bool &r_oob) {\n\tGDExtensionBool valid, oob;\n\tinternal::gdextension_interface_variant_set_indexed(_native_ptr(), index, value._native_ptr(), &valid, &oob);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-make-member-function-const"
      },
      "hash": "a67d8673c86091d1d36117919c869cd05ba54270eab23328d3685852050ec8be"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'set_indexed' of similar type ('bool &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 587,
          "offset": 64,
          "length": 4,
          "code": {
            "startLine": 585,
            "length": 4,
            "offset": 66,
            "surroundingCode": "}\n\nvoid Variant::set_indexed(int64_t index, const Variant &value, bool &r_valid, bool &r_oob) {\n\tGDExtensionBool valid, oob;\n\tinternal::gdextension_interface_variant_set_indexed(_native_ptr(), index, value._native_ptr(), &valid, &oob);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "16e2ca9fd3ae2365118cfb393917bac9053500a1f3b4efeccdc8d8e13930c52f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "isolate-declaration",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multiple declarations in a single statement reduces readability",
      "detailsInfo": "isolate-declaration",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 588,
          "offset": 2,
          "length": 15,
          "code": {
            "startLine": 586,
            "length": 15,
            "offset": 95,
            "surroundingCode": "\nvoid Variant::set_indexed(int64_t index, const Variant &value, bool &r_valid, bool &r_oob) {\n\tGDExtensionBool valid, oob;\n\tinternal::gdextension_interface_variant_set_indexed(_native_ptr(), index, value._native_ptr(), &valid, &oob);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-isolate-declaration"
      },
      "hash": "4f00bd303aff6d770959a41f2f3764bfba6ec392f8696b99aa5770a4989e0b71"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 588,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 586,
            "length": 5,
            "offset": 111,
            "surroundingCode": "\nvoid Variant::set_indexed(int64_t index, const Variant &value, bool &r_valid, bool &r_oob) {\n\tGDExtensionBool valid, oob;\n\tinternal::gdextension_interface_variant_set_indexed(_native_ptr(), index, value._native_ptr(), &valid, &oob);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "06a3bafdc9b711f7206b107dc9ecdd26359cb061a9beb746296493ead66e6fd5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'oob' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 588,
          "offset": 25,
          "length": 3,
          "code": {
            "startLine": 586,
            "length": 3,
            "offset": 118,
            "surroundingCode": "\nvoid Variant::set_indexed(int64_t index, const Variant &value, bool &r_valid, bool &r_oob) {\n\tGDExtensionBool valid, oob;\n\tinternal::gdextension_interface_variant_set_indexed(_native_ptr(), index, value._native_ptr(), &valid, &oob);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "ec17f499cfd0bb91e47bc83f0680bad2eec2c076ea64ce2a09e2b2af38839998"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "make-member-function-const",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'set_keyed' can be made const",
      "detailsInfo": "make-member-function-const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 594,
          "offset": 15,
          "length": 9,
          "code": {
            "startLine": 592,
            "length": 9,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::set_keyed(const Variant &key, const Variant &value, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set_keyed(_native_ptr(), key._native_ptr(), value._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-make-member-function-const"
      },
      "hash": "01732141b500afd543324c695e2effae2febb94782c363986e663f00ca4d7a4c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 595,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 593,
            "length": 5,
            "offset": 101,
            "surroundingCode": "\nvoid Variant::set_keyed(const Variant &key, const Variant &value, bool &r_valid) {\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_set_keyed(_native_ptr(), key._native_ptr(), value._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "7a202b5ae2aa2b38e2c527b48a3e10a0fe5eac419e4096fe6de630b02648cb95"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 602,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 600,
            "length": 5,
            "offset": 98,
            "surroundingCode": "Variant Variant::get(const Variant &key, bool *r_valid) const {\n\tVariant result;\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_get(_native_ptr(), key._native_ptr(), result._native_ptr(), &valid);\n\tif (r_valid) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "aacc48c4b3afd87f5206f3ec1dbd53e88f12a792b5ea1e2f2f2420b76df5eb63"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 604,
          "offset": 6,
          "length": 7,
          "code": {
            "startLine": 602,
            "length": 7,
            "offset": 139,
            "surroundingCode": "\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_get(_native_ptr(), key._native_ptr(), result._native_ptr(), &valid);\n\tif (r_valid) {\n\t\t*r_valid = PtrToArg<bool>::convert(&valid);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "9e7c3a0b0fa46cfb4ede8f4b6d6d125929efe50422611b5375d5acea637ac44d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 612,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 610,
            "length": 5,
            "offset": 108,
            "surroundingCode": "Variant Variant::get_named(const StringName &name, bool &r_valid) const {\n\tVariant result;\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_get_named(_native_ptr(), name._native_ptr(), result._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "d0d5a67959ea235ce5d6a919a5edb248f3ccf1efaffbba2a6ee0308037115036"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'get_indexed' of similar type ('bool &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 618,
          "offset": 45,
          "length": 4,
          "code": {
            "startLine": 616,
            "length": 4,
            "offset": 47,
            "surroundingCode": "}\n\nVariant Variant::get_indexed(int64_t index, bool &r_valid, bool &r_oob) const {\n\tVariant result;\n\tGDExtensionBool valid;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "fb5a7997b2a0387decba65a05d8eb1dd738544148dfb13d48f4809ed08f52c32"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 620,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 618,
            "length": 5,
            "offset": 114,
            "surroundingCode": "Variant Variant::get_indexed(int64_t index, bool &r_valid, bool &r_oob) const {\n\tVariant result;\n\tGDExtensionBool valid;\n\tGDExtensionBool oob;\n\tinternal::gdextension_interface_variant_get_indexed(_native_ptr(), index, result._native_ptr(), &valid, &oob);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "e967de979a6108b5a270c37a498c92d053d21e7535cbded2404d109ccff2827e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'oob' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 621,
          "offset": 18,
          "length": 3,
          "code": {
            "startLine": 619,
            "length": 3,
            "offset": 58,
            "surroundingCode": "\tVariant result;\n\tGDExtensionBool valid;\n\tGDExtensionBool oob;\n\tinternal::gdextension_interface_variant_get_indexed(_native_ptr(), index, result._native_ptr(), &valid, &oob);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "b3642059d7e66626e443b034a694000dab2fd64c0dd960ddf48ac857d2a1c69f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 630,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 628,
            "length": 5,
            "offset": 104,
            "surroundingCode": "Variant Variant::get_keyed(const Variant &key, bool &r_valid) const {\n\tVariant result;\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_get_keyed(_native_ptr(), key._native_ptr(), result._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "ed129c1265301385fd25ddf9f9c642cacc9687c677cb5f12c20bf8c2ac815cb3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 638,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 636,
            "length": 5,
            "offset": 85,
            "surroundingCode": "bool Variant::in(const Variant &index, bool *r_valid) const {\n\tVariant result;\n\tbool valid;\n\tevaluate(OP_IN, *this, index, result, valid);\n\tif (r_valid) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "3b94a87acc3163f5a77acbce6d0edc19dc649fab062f48e9107c0a45ac1683c9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 640,
          "offset": 6,
          "length": 7,
          "code": {
            "startLine": 638,
            "length": 7,
            "offset": 65,
            "surroundingCode": "\tbool valid;\n\tevaluate(OP_IN, *this, index, result, valid);\n\tif (r_valid) {\n\t\t*r_valid = valid;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "e5192d184f0e6bbecee48c5cde01a141fb63ed74417a44a48725723f1c65e5e2"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'iter_init' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 646,
          "offset": 25,
          "length": 7,
          "code": {
            "startLine": 644,
            "length": 7,
            "offset": 27,
            "surroundingCode": "}\n\nbool Variant::iter_init(Variant &r_iter, bool &r_valid) const {\n\tGDExtensionBool valid;\n\tGDExtensionBool result = internal::gdextension_interface_variant_iter_init(_native_ptr(), r_iter._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "c0a5c65636f28c3c34559026be7799a39ca13a127f9c86578e700ef1c0edc01f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 647,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 645,
            "length": 5,
            "offset": 82,
            "surroundingCode": "\nbool Variant::iter_init(Variant &r_iter, bool &r_valid) const {\n\tGDExtensionBool valid;\n\tGDExtensionBool result = internal::gdextension_interface_variant_iter_init(_native_ptr(), r_iter._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "f64f92f8a640b771ba940cfd73b2dfd67ad53c3bf2dacad9c4fec9316f6e77df"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'iter_next' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 653,
          "offset": 25,
          "length": 7,
          "code": {
            "startLine": 651,
            "length": 7,
            "offset": 27,
            "surroundingCode": "}\n\nbool Variant::iter_next(Variant &r_iter, bool &r_valid) const {\n\tGDExtensionBool valid;\n\tGDExtensionBool result = internal::gdextension_interface_variant_iter_next(_native_ptr(), r_iter._native_ptr(), &valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "f9c14383778551554d7208fbcac9810a4e4f233b8ef067873069be31b56e5996"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 654,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 652,
            "length": 5,
            "offset": 82,
            "surroundingCode": "\nbool Variant::iter_next(Variant &r_iter, bool &r_valid) const {\n\tGDExtensionBool valid;\n\tGDExtensionBool result = internal::gdextension_interface_variant_iter_next(_native_ptr(), r_iter._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "41823ff60bd4d47f2cb71b48f4e86db41bc0c867783fa17e7ee4e48702b44afc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 662,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 660,
            "length": 5,
            "offset": 106,
            "surroundingCode": "Variant Variant::iter_get(const Variant &r_iter, bool &r_valid) const {\n\tVariant result;\n\tGDExtensionBool valid;\n\tinternal::gdextension_interface_variant_iter_get(_native_ptr(), r_iter._native_ptr(), result._native_ptr(), &valid);\n\tr_valid = PtrToArg<bool>::convert(&valid);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "cf489d85915d8b89fbfaba2c9a69561a617118df62b537e08246f04d15ee3408"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'valid' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 678,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 676,
            "length": 5,
            "offset": 83,
            "surroundingCode": "\nbool Variant::has_key(const Variant &key, bool *r_valid) const {\n\tGDExtensionBool valid;\n\tGDExtensionBool has = internal::gdextension_interface_variant_has_key(_native_ptr(), key._native_ptr(), &valid);\n\tif (r_valid) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "b735adb6421a92436f42a91b908e5b9e3b185fae3c5869474a1a636c72509e28"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'has_member' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 686,
          "offset": 15,
          "length": 10,
          "code": {
            "startLine": 684,
            "length": 10,
            "offset": 17,
            "surroundingCode": "}\n\nbool Variant::has_member(Variant::Type type, const StringName &member) {\n\tGDExtensionBool has = internal::gdextension_interface_variant_has_member(static_cast<GDExtensionVariantType>(type), member._native_ptr());\n\treturn PtrToArg<bool>::convert(&has);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "d18dd4bf1ea28988fba0d4764590911834103abf71919fd5f083c5eb496b0a17"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable '_deep' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 719,
          "offset": 18,
          "length": 5,
          "code": {
            "startLine": 717,
            "length": 5,
            "offset": 80,
            "surroundingCode": "Variant Variant::duplicate(bool deep) const {\n\tVariant result;\n\tGDExtensionBool _deep;\n\tPtrToArg<bool>::encode(deep, &_deep);\n\tinternal::gdextension_interface_variant_duplicate(_native_ptr(), result._native_ptr(), _deep);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "7809df373b0a95323611b5d8e36e6bdff7bd719b9139c1b0196325a847e3a138"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'get_type_name' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 725,
          "offset": 17,
          "length": 13,
          "code": {
            "startLine": 723,
            "length": 13,
            "offset": 19,
            "surroundingCode": "}\n\nString Variant::get_type_name(Variant::Type type) {\n\tString result;\n\tinternal::gdextension_interface_variant_get_type_name(static_cast<GDExtensionVariantType>(type), result._native_ptr());"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "383aab717213412c0011241831955b851b2dbc9610b695e19e39a2e332d2f562"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'to' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 731,
          "offset": 61,
          "length": 2,
          "code": {
            "startLine": 729,
            "length": 2,
            "offset": 63,
            "surroundingCode": "}\n\nbool Variant::can_convert(Variant::Type from, Variant::Type to) {\n\tGDExtensionBool can = internal::gdextension_interface_variant_can_convert(static_cast<GDExtensionVariantType>(from), static_cast<GDExtensionVariantType>(to));\n\treturn PtrToArg<bool>::convert(&can);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cc7b1fd1a797fd6b48cd5bcd803e9b2ff67860da319cf099ad4f2fe640944163"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "parameter name 'to' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 736,
          "offset": 68,
          "length": 2,
          "code": {
            "startLine": 734,
            "length": 2,
            "offset": 70,
            "surroundingCode": "}\n\nbool Variant::can_convert_strict(Variant::Type from, Variant::Type to) {\n\tGDExtensionBool can = internal::gdextension_interface_variant_can_convert_strict(static_cast<GDExtensionVariantType>(from), static_cast<GDExtensionVariantType>(to));\n\treturn PtrToArg<bool>::convert(&can);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "748214cec61457c0948754578976dc4b51517f226f3321b24f0cd0c421098300"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "make-member-function-const",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'clear' can be made const",
      "detailsInfo": "make-member-function-const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 741,
          "offset": 15,
          "length": 5,
          "code": {
            "startLine": 739,
            "length": 5,
            "offset": 17,
            "surroundingCode": "}\n\nvoid Variant::clear() {\n\tstatic const bool needs_deinit[Variant::VARIANT_MAX] = {\n\t\tfalse, // NIL,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-make-member-function-const"
      },
      "hash": "9a630ea881a6146c5749a60af1d40ba414bf06d0943379a7ed21c1eb03c3f9c8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 742,
          "offset": 15,
          "length": 4,
          "code": {
            "startLine": 740,
            "length": 4,
            "offset": 39,
            "surroundingCode": "\nvoid Variant::clear() {\n\tstatic const bool needs_deinit[Variant::VARIANT_MAX] = {\n\t\tfalse, // NIL,\n\t\tfalse, // BOOL,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "aac735606d1a9637139d91965ac0a4fd124836a990e1138904da35e1eda1c6eb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/variant.cpp",
          "line": 787,
          "offset": 15,
          "length": 12,
          "code": {
            "startLine": 785,
            "length": 12,
            "offset": 19,
            "surroundingCode": "\t};\n\n\tif (unlikely(needs_deinit[get_type()])) { // Make it fast for types that don't need deinit.\n\t\tinternal::gdextension_interface_variant_destroy(_native_ptr());\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "0f425e61eb7043e8125a69b023dbe4bd0e79287220b7226a9aebdb44506ff067"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Vector2::snapped' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/vector2.hpp",
          "line": 179,
          "offset": 10,
          "length": 7,
          "code": {
            "startLine": 177,
            "length": 7,
            "offset": 56,
            "surroundingCode": "\tVector2 ceil() const;\n\tVector2 round() const;\n\tVector2 snapped(const Vector2 &p_by) const;\n\tVector2 snappedf(real_t p_by) const;\n\tVector2 clamp(const Vector2 &p_min, const Vector2 &p_max) const;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "8b1daba3fc7d1df7184880f369515f5d0ebd215294a0b620d506e3deac84835b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Vector2::snappedf' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/vector2.hpp",
          "line": 180,
          "offset": 10,
          "length": 8,
          "code": {
            "startLine": 178,
            "length": 8,
            "offset": 78,
            "surroundingCode": "\tVector2 round() const;\n\tVector2 snapped(const Vector2 &p_by) const;\n\tVector2 snappedf(real_t p_by) const;\n\tVector2 clamp(const Vector2 &p_min, const Vector2 &p_max) const;\n\tVector2 clampf(real_t p_min, real_t p_max) const;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "03c4b7feb11b117ca991e94ef382a2af8c571a70b39bd79d16e11d708971d031"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 47,
          "offset": 20,
          "length": 1,
          "code": {
            "startLine": 45,
            "length": 1,
            "offset": 53,
            "surroundingCode": "\nreal_t Vector2::length() const {\n\treturn Math::sqrt(x * x + y * y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "999e476820d76180d01edfbea5516cd8b6a0bf85fe900a617f98615c07aa91d1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 47,
          "offset": 28,
          "length": 1,
          "code": {
            "startLine": 45,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\nreal_t Vector2::length() const {\n\treturn Math::sqrt(x * x + y * y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ddaeb8e99a97ee49e52cab1d1d50c349f280955618fb51b1f0170caf5786a8d4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 51,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 49,
            "length": 1,
            "offset": 50,
            "surroundingCode": "\nreal_t Vector2::length_squared() const {\n\treturn x * x + y * y;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "773db14b698b65da91eecd820b843b74c2616bc6d66e3ec34f478f88ea163382"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 51,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 49,
            "length": 1,
            "offset": 58,
            "surroundingCode": "\nreal_t Vector2::length_squared() const {\n\treturn x * x + y * y;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "eb8a3f1687731ea7be77d808f6c2a6d43a406ab72fc6fcd058fb0eeeaab16381"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'l' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 55,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 53,
            "length": 1,
            "offset": 37,
            "surroundingCode": "\nvoid Vector2::normalize() {\n\treal_t l = x * x + y * y;\n\tif (l != 0) {\n\t\tl = Math::sqrt(l);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4f818852ace621b180d3ff9cc3ba98f779ef1eab1ed3172f6bc4edcb0d70dc2f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 55,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 53,
            "length": 1,
            "offset": 41,
            "surroundingCode": "\nvoid Vector2::normalize() {\n\treal_t l = x * x + y * y;\n\tif (l != 0) {\n\t\tl = Math::sqrt(l);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "3b36ba138420c82e78119bf1ca450d884a9d89ff6beb9b304710040453744815"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 55,
          "offset": 21,
          "length": 1,
          "code": {
            "startLine": 53,
            "length": 1,
            "offset": 49,
            "surroundingCode": "\nvoid Vector2::normalize() {\n\treal_t l = x * x + y * y;\n\tif (l != 0) {\n\t\tl = Math::sqrt(l);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "fa20883a32099cffcb5f7a8129d7d971706442fc58ccaaf738e3779c5dd1aa35"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 64,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 62,
            "length": 1,
            "offset": 48,
            "surroundingCode": "\nVector2 Vector2::normalized() const {\n\tVector2 v = *this;\n\tv.normalize();\n\treturn v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "d2618e83dd848e6c8582a8f2db9f8dc42865e952131f1de8d7c38a4cebda3316"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 75,
          "offset": 20,
          "length": 1,
          "code": {
            "startLine": 73,
            "length": 1,
            "offset": 82,
            "surroundingCode": "\nreal_t Vector2::distance_to(const Vector2 &p_vector2) const {\n\treturn Math::sqrt((x - p_vector2.x) * (x - p_vector2.x) + (y - p_vector2.y) * (y - p_vector2.y));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "1b057a76686ac82fca118196269e4efa03113ed37a0d0df784c21e9a085749ff"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 75,
          "offset": 60,
          "length": 1,
          "code": {
            "startLine": 73,
            "length": 1,
            "offset": 122,
            "surroundingCode": "\nreal_t Vector2::distance_to(const Vector2 &p_vector2) const {\n\treturn Math::sqrt((x - p_vector2.x) * (x - p_vector2.x) + (y - p_vector2.y) * (y - p_vector2.y));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "9848485af5e005c16cb1d23820e4fc0bc2f6ee569af72cb60013ed0a95bae6a8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 79,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 77,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\nreal_t Vector2::distance_squared_to(const Vector2 &p_vector2) const {\n\treturn (x - p_vector2.x) * (x - p_vector2.x) + (y - p_vector2.y) * (y - p_vector2.y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "3180d25d73f456c5f15a91506822e2034c806b585f2039b8af9813c03b19302c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 79,
          "offset": 49,
          "length": 1,
          "code": {
            "startLine": 77,
            "length": 1,
            "offset": 119,
            "surroundingCode": "\nreal_t Vector2::distance_squared_to(const Vector2 &p_vector2) const {\n\treturn (x - p_vector2.x) * (x - p_vector2.x) + (y - p_vector2.y) * (y - p_vector2.y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "9ee494b03f09a603362fdb5ee9509cd96c0059ed0a2e17f7699e24bae2473d9b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 91,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 89,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\nreal_t Vector2::dot(const Vector2 &p_other) const {\n\treturn x * p_other.x + y * p_other.y;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ac6481ee4b54521686d706fe65344bf18953e4e3b8bceee472c52ed2b57eb1cd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 91,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 89,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\nreal_t Vector2::dot(const Vector2 &p_other) const {\n\treturn x * p_other.x + y * p_other.y;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ac686b81e488d19bfb338e8b384bf69b57b40e0bb9953428d7b044049e6519da"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 95,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 93,
            "length": 1,
            "offset": 63,
            "surroundingCode": "\nreal_t Vector2::cross(const Vector2 &p_other) const {\n\treturn x * p_other.y - y * p_other.x;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "ffecaf72365e231114dd7f31bcc8645aaabdcb8bc9f6db74344feca03e5cfb33"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 95,
          "offset": 25,
          "length": 1,
          "code": {
            "startLine": 93,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\nreal_t Vector2::cross(const Vector2 &p_other) const {\n\treturn x * p_other.y - y * p_other.x;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "5d9f243eae8d5fe6da4cbabae61a69b571c3bb2de0acb75b21c68518f0c37cd6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 118,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 116,
            "length": 1,
            "offset": 52,
            "surroundingCode": "\treal_t cosi = Math::cos(p_by);\n\treturn Vector2(\n\t\t\tx * cosi - y * sine,\n\t\t\tx * sine + y * cosi);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "4457f89d9bd42c4a8e97e3488788382318128e1c1b74aa599a607e5b9f210e80"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 118,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 116,
            "length": 1,
            "offset": 63,
            "surroundingCode": "\treal_t cosi = Math::cos(p_by);\n\treturn Vector2(\n\t\t\tx * cosi - y * sine,\n\t\t\tx * sine + y * cosi);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "7459db8f47a6a66288e242877305c2261528ed5d8146d4bea070b69b14c971f4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 119,
          "offset": 4,
          "length": 1,
          "code": {
            "startLine": 117,
            "length": 1,
            "offset": 44,
            "surroundingCode": "\treturn Vector2(\n\t\t\tx * cosi - y * sine,\n\t\t\tx * sine + y * cosi);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "0a09d7fdcb9e91397ebd35c8eeb1e6402233499116b121163526c91f3c577bd4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 119,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 117,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\treturn Vector2(\n\t\t\tx * cosi - y * sine,\n\t\t\tx * sine + y * cosi);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "edab6663d764237fcfebdc5d83f20ae5956374ab72e54393d96315ba3ef9b1ba"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 148,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 146,
            "length": 4,
            "offset": 76,
            "surroundingCode": "Vector2 Vector2::snapped(const Vector2 &p_step) const {\n\treturn Vector2(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "3ffb63904d7b11657595b59e052303a3b289497c2d7fa5ef060044f455c7c234"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 149,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 147,
            "length": 4,
            "offset": 51,
            "surroundingCode": "\treturn Vector2(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "8035e39eedbb9f31785f0cf0ae404d5402cbfcd02a26dab2b22cda596af67323"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 154,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 152,
            "length": 4,
            "offset": 69,
            "surroundingCode": "Vector2 Vector2::snappedf(real_t p_step) const {\n\treturn Vector2(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "56b50e3da24f16fc2ad056fb74d467f404c06c8ff1e54cd8d57e6f2ac81e664d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 155,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 153,
            "length": 4,
            "offset": 49,
            "surroundingCode": "\treturn Vector2(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "11a78637a3663f89d77c3d12d57daf4d92b345c1a7a1797879e3d30451f1b551"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'l' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 159,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 157,
            "length": 1,
            "offset": 73,
            "surroundingCode": "\nVector2 Vector2::limit_length(const real_t p_len) const {\n\tconst real_t l = length();\n\tVector2 v = *this;\n\tif (l > 0 && p_len < l) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "63c728f8fa76dba16433b98295c29e3eb0bcd512d71c728b992535d42a1a4fec"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 160,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 158,
            "length": 1,
            "offset": 95,
            "surroundingCode": "Vector2 Vector2::limit_length(const real_t p_len) const {\n\tconst real_t l = length();\n\tVector2 v = *this;\n\tif (l > 0 && p_len < l) {\n\t\tv /= l;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "8acbb4d95e211dcb73d76fff1f23276b29fcbce15a1d38af4e528a9cc48d2f26"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 170,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 168,
            "length": 1,
            "offset": 90,
            "surroundingCode": "\nVector2 Vector2::move_toward(const Vector2 &p_to, const real_t p_delta) const {\n\tVector2 v = *this;\n\tVector2 vd = p_to - v;\n\treal_t len = vd.length();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "24b8c86ef94504143797dc353ede8f6bcebb1b4df72e8f19f7a0e007c708c8e2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'vd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 171,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 169,
            "length": 2,
            "offset": 109,
            "surroundingCode": "Vector2 Vector2::move_toward(const Vector2 &p_to, const real_t p_delta) const {\n\tVector2 v = *this;\n\tVector2 vd = p_to - v;\n\treal_t len = vd.length();\n\treturn len <= p_delta || len < (real_t)CMP_EPSILON ? p_to : v + vd / len * p_delta;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4d80a72e9e513193809c56176a3fed99dcb8769cd01bd860937d24f220af9197"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 192,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 190,
            "length": 4,
            "offset": 117,
            "surroundingCode": "\tERR_FAIL_COND_V_MSG(!p_normal.is_normalized(), Vector2(), \"The normal Vector2 must be normalized.\");\n#endif\n\treturn 2.0f * p_normal * this->dot(p_normal) - *this;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d570a683d808e538689aa5f3e005b0349fd2094f84e2fd5435bdcc7494ccd2af"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 192,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 190,
            "length": 4,
            "offset": 117,
            "surroundingCode": "\tERR_FAIL_COND_V_MSG(!p_normal.is_normalized(), Vector2(), \"The normal Vector2 must be normalized.\");\n#endif\n\treturn 2.0f * p_normal * this->dot(p_normal) - *this;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c1b9d9260f931e101cb109670f69083659c00b15e66737a691261e9db251bc42"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'real_t' (aka 'float') to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 212,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 210,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\nVector2::operator Vector2i() const {\n\treturn Vector2i(x, y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "cbca707a4784547f59ceb89093c98ae6cb2546420771d3a44f653eab70dc502d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'real_t' (aka 'float') to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2.cpp",
          "line": 212,
          "offset": 21,
          "length": 1,
          "code": {
            "startLine": 210,
            "length": 1,
            "offset": 58,
            "surroundingCode": "\nVector2::operator Vector2i() const {\n\treturn Vector2i(x, y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "4fc9033cff171c52fc8f791835ca5635e570f8debf083beda921a76e2e5410a7"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 40,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 38,
            "length": 4,
            "offset": 80,
            "surroundingCode": "Vector2i Vector2i::snapped(const Vector2i &p_step) const {\n\treturn Vector2i(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "bf30bb1df9b895ce66a241315ed4e9e658600740afbce250552a402c2f89bd4a"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 41,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 39,
            "length": 4,
            "offset": 52,
            "surroundingCode": "\treturn Vector2i(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "cff2144da81ae55f3ed4b519b3dfb73e182de154869c1b3141b0b3de94e573bd"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 46,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 44,
            "length": 4,
            "offset": 73,
            "surroundingCode": "Vector2i Vector2i::snappedi(int32_t p_step) const {\n\treturn Vector2i(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "070c8b672c507804729dc24d477ff2008804261ad003bb83cd7d29db6412dfa2"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 47,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 45,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\treturn Vector2i(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "bf3a2fae6f6444655d39466ff9fb607bf84ffa06c5edea9d7adc8b3b37c6992c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 63,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 61,
            "length": 1,
            "offset": 52,
            "surroundingCode": "\nint64_t Vector2i::length_squared() const {\n\treturn x * (int64_t)x + y * (int64_t)y;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "0d8171333dadcbe2985b06e89017e53630d7b5b555ddb60f2561574bdfec7a83"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '+'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 63,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 61,
            "length": 1,
            "offset": 69,
            "surroundingCode": "\nint64_t Vector2i::length_squared() const {\n\treturn x * (int64_t)x + y * (int64_t)y;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "613130f6ece01a1384b6d2aee615d27a6e7c5707cb0afdd72f6dbc5d2738d074"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 152,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 150,
            "length": 1,
            "offset": 54,
            "surroundingCode": "\nVector2i::operator Vector2() const {\n\treturn Vector2((int32_t)x, (int32_t)y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2a194d8ee05c7e4d907bcdf658714c4cba0f2cb0475f011b7173fb068bbf1626"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector2i.cpp",
          "line": 152,
          "offset": 29,
          "length": 1,
          "code": {
            "startLine": 150,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\nVector2i::operator Vector2() const {\n\treturn Vector2((int32_t)x, (int32_t)y);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "b9c4ab5a9a5d903bd84c3af8f629e5f67854ccb59b6be5d1a83e37cc404bd80b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Vector3::snap' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/vector3.hpp",
          "line": 108,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 106,
            "length": 4,
            "offset": 36,
            "surroundingCode": "\t_FORCE_INLINE_ void zero();\n\n\tvoid snap(const Vector3 p_val);\n\tvoid snapf(real_t p_val);\n\tVector3 snapped(const Vector3 p_val) const;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "198b83dd9dbb77b9cbee1cb90bacbdc35aeeace64f232c1b1a061e60f1c2c270"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Vector3::snapf' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/vector3.hpp",
          "line": 109,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 107,
            "length": 5,
            "offset": 40,
            "surroundingCode": "\n\tvoid snap(const Vector3 p_val);\n\tvoid snapf(real_t p_val);\n\tVector3 snapped(const Vector3 p_val) const;\n\tVector3 snappedf(real_t p_val) const;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "492bd95ce65290d05c8467c95603e9719fdf0372e9ff5844b5bde0f26b370236"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Vector3::snapped' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/vector3.hpp",
          "line": 110,
          "offset": 10,
          "length": 7,
          "code": {
            "startLine": 108,
            "length": 7,
            "offset": 69,
            "surroundingCode": "\tvoid snap(const Vector3 p_val);\n\tvoid snapf(real_t p_val);\n\tVector3 snapped(const Vector3 p_val) const;\n\tVector3 snappedf(real_t p_val) const;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "ca44931f0b46b385a2cb989130b19147a906a2b9d99fbd3a3a7a0caaa730950d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::Vector3::snappedf' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/variant/vector3.hpp",
          "line": 111,
          "offset": 10,
          "length": 8,
          "code": {
            "startLine": 109,
            "length": 8,
            "offset": 81,
            "surroundingCode": "\tvoid snapf(real_t p_val);\n\tVector3 snapped(const Vector3 p_val) const;\n\tVector3 snappedf(real_t p_val) const;\n\n\tvoid rotate(const Vector3 &p_axis, const real_t p_angle);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "f8b8c529acc85831dcf95ff65d72ffea0773bbfba3a538f30a8dfce145e462ee"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'r' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 45,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 43,
            "length": 1,
            "offset": 88,
            "surroundingCode": "\nVector3 Vector3::rotated(const Vector3 &p_axis, const real_t p_angle) const {\n\tVector3 r = *this;\n\tr.rotate(p_axis, p_angle);\n\treturn r;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "57c5b64808da4bb7c4a758127f37dfccc3ae27c660982e06fe39e3a6fe002d7a"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 65,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 63,
            "length": 4,
            "offset": 49,
            "surroundingCode": "\nvoid Vector3::snap(const Vector3 p_step) {\n\tx = Math::snapped(x, p_step.x);\n\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "e5f7d63b802e2d323d6ecc66074dde1831e517c5b3196f8e6a5e48f3223d38d0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 66,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 64,
            "length": 4,
            "offset": 81,
            "surroundingCode": "void Vector3::snap(const Vector3 p_step) {\n\tx = Math::snapped(x, p_step.x);\n\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "cd9d597052a4c8863976dc06ad7f6a43a8ad235f45ff2c0d35439871bebeb0fa"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 67,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 65,
            "length": 4,
            "offset": 71,
            "surroundingCode": "\tx = Math::snapped(x, p_step.x);\n\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "1f23c6bc2edb892bb18c0e16a26c88b47cc540943ec392e5646cb09e15971378"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 71,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 69,
            "length": 4,
            "offset": 43,
            "surroundingCode": "\nvoid Vector3::snapf(real_t p_step) {\n\tx = Math::snapped(x, p_step);\n\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2dd95d38fb695815264b41551b2840594609923eec3ce33419789d12404b8136"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 72,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 70,
            "length": 4,
            "offset": 73,
            "surroundingCode": "void Vector3::snapf(real_t p_step) {\n\tx = Math::snapped(x, p_step);\n\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "4902e2afd1ff7cd49a2b3e9cf5f68b4674d1ff3eabab9d75e5101c0d18647ad4"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 73,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 71,
            "length": 4,
            "offset": 67,
            "surroundingCode": "\tx = Math::snapped(x, p_step);\n\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2a6dc6b39b015ea3edc6bd3a907cbbb60457589ddaff64bb368575873bc8369f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 77,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 75,
            "length": 1,
            "offset": 65,
            "surroundingCode": "\nVector3 Vector3::snapped(const Vector3 p_step) const {\n\tVector3 v = *this;\n\tv.snap(p_step);\n\treturn v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "05ee61c7284f741bfc12359e9d1567c0a40bd3ff6df58a17dcb47f173df241b3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 83,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 81,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\nVector3 Vector3::snappedf(real_t p_step) const {\n\tVector3 v = *this;\n\tv.snapf(p_step);\n\treturn v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "fc8273f2c950cd916c90630292620c986b0cad7806d258cb70b72177a0050c00"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'l' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 89,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 87,
            "length": 1,
            "offset": 73,
            "surroundingCode": "\nVector3 Vector3::limit_length(const real_t p_len) const {\n\tconst real_t l = length();\n\tVector3 v = *this;\n\tif (l > 0 && p_len < l) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "dce6183c2c7e1923ff70e942df74bd2102a733a8bf21156ebb56e501bf7b7c70"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 90,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 88,
            "length": 1,
            "offset": 95,
            "surroundingCode": "Vector3 Vector3::limit_length(const real_t p_len) const {\n\tconst real_t l = length();\n\tVector3 v = *this;\n\tif (l > 0 && p_len < l) {\n\t\tv /= l;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "fe07b25ff740241a2de0f2a7ae8b44611a3895471542a98e66dfa4d31e381b46"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 100,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 98,
            "length": 1,
            "offset": 90,
            "surroundingCode": "\nVector3 Vector3::move_toward(const Vector3 &p_to, const real_t p_delta) const {\n\tVector3 v = *this;\n\tVector3 vd = p_to - v;\n\treal_t len = vd.length();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "85ba16e8a2f8109fdeef72259c647bf599458d2cfd6f4f93eead33aee163c304"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'vd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 101,
          "offset": 10,
          "length": 2,
          "code": {
            "startLine": 99,
            "length": 2,
            "offset": 109,
            "surroundingCode": "Vector3 Vector3::move_toward(const Vector3 &p_to, const real_t p_delta) const {\n\tVector3 v = *this;\n\tVector3 vd = p_to - v;\n\treal_t len = vd.length();\n\treturn len <= p_delta || len < (real_t)CMP_EPSILON ? p_to : v + vd / len * p_delta;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "c62f206b0aac99374ced4a11800da7a47972da44a4757686e04ae94f567891cf"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'n' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 107,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 105,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\nVector2 Vector3::octahedron_encode() const {\n\tVector3 n = *this;\n\tn /= Math::abs(n.x) + Math::abs(n.y) + Math::abs(n.z);\n\tVector2 o;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a37c002f0f5e4b777dcca670c65d7d73f2cd54c61e1bb60fe023d2c593957d94"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'o' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 109,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 107,
            "length": 1,
            "offset": 85,
            "surroundingCode": "\tVector3 n = *this;\n\tn /= Math::abs(n.x) + Math::abs(n.y) + Math::abs(n.z);\n\tVector2 o;\n\tif (n.z >= 0.0f) {\n\t\to.x = n.x;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "1d078daf1541a63c512e65c18d6d96095c40d4b3f08b986f3d3a34ab9c7e702f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 110,
          "offset": 13,
          "length": 4,
          "code": {
            "startLine": 108,
            "length": 4,
            "offset": 80,
            "surroundingCode": "\tn /= Math::abs(n.x) + Math::abs(n.y) + Math::abs(n.z);\n\tVector2 o;\n\tif (n.z >= 0.0f) {\n\t\to.x = n.x;\n\t\to.y = n.y;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a5360dea464abf14a8f3559ba65dedb552b394a3366380e93f44f04edda190e5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 114,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 112,
            "length": 4,
            "offset": 32,
            "surroundingCode": "\t\to.y = n.y;\n\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "8b15731d6378f81f821be0bb898db64c14651eb4ed57484ce7896fc6897bdaeb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 114,
          "offset": 43,
          "length": 4,
          "code": {
            "startLine": 112,
            "length": 4,
            "offset": 65,
            "surroundingCode": "\t\to.y = n.y;\n\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "2ca05a29727ada93b61d704904324f2f25e5dad2ccb9c5323226533f8ab1c8c3"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 114,
          "offset": 50,
          "length": 4,
          "code": {
            "startLine": 112,
            "length": 4,
            "offset": 72,
            "surroundingCode": "\t\to.y = n.y;\n\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "865fd9a72c88006efdcbc53fced995eec363bbbdf7cc7fa98285729017ce43e8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 114,
          "offset": 58,
          "length": 4,
          "code": {
            "startLine": 112,
            "length": 4,
            "offset": 80,
            "surroundingCode": "\t\to.y = n.y;\n\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "46efbad2a2b6f6f5cfce36404ac650fe2f740433909caaf4023aa286475bfdd1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 115,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 113,
            "length": 4,
            "offset": 83,
            "surroundingCode": "\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "6025be1e6ccd0595634bcb15e8a01f3f498d564ddb1c626fbbc0761d662dd21e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 115,
          "offset": 43,
          "length": 4,
          "code": {
            "startLine": 113,
            "length": 4,
            "offset": 116,
            "surroundingCode": "\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "735575a875b2da6788cc0c72f3ae2e11208ebd40339f89cd89c4c729143de2fb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 115,
          "offset": 50,
          "length": 4,
          "code": {
            "startLine": 113,
            "length": 4,
            "offset": 123,
            "surroundingCode": "\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "d4e1334b293fec4f655d7fa4c7988183679225c16c354372b863e2d2c80d4fc6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 115,
          "offset": 58,
          "length": 4,
          "code": {
            "startLine": 113,
            "length": 4,
            "offset": 131,
            "surroundingCode": "\t} else {\n\t\to.x = (1.0f - Math::abs(n.y)) * (n.x >= 0.0f ? 1.0f : -1.0f);\n\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "45b07142ab0af5bcd80aff848c52a7ddbbe8afec782c3f4a38d896f709a0bfc7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 117,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 115,
            "length": 4,
            "offset": 80,
            "surroundingCode": "\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "d344dd65751f69fae3a7253610198fa3249c083a69c422400b12048b2ff76f1e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 117,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 115,
            "length": 4,
            "offset": 80,
            "surroundingCode": "\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "fed33a6c63915bdc8cb3a4cd0b4f08add1669452c5a83e34128ebee71896a18f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 117,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 115,
            "length": 4,
            "offset": 87,
            "surroundingCode": "\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "98bc074371ba5e5106eb44fcf6cc059b2a0050183ffa67301005ce190c27a208"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 117,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 115,
            "length": 4,
            "offset": 87,
            "surroundingCode": "\t\to.y = (1.0f - Math::abs(n.x)) * (n.y >= 0.0f ? 1.0f : -1.0f);\n\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "c43c274031bd5fdd266642ac445f3addca4fc650b70efe0e1fcee17f2d273c09"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 118,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 116,
            "length": 4,
            "offset": 42,
            "surroundingCode": "\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "4640c526c5bb26fd924ce74b563642d61b3964e0607fcbe9b6ba73d1ab9266d6"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 118,
          "offset": 14,
          "length": 4,
          "code": {
            "startLine": 116,
            "length": 4,
            "offset": 42,
            "surroundingCode": "\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "40edd495028ff5e113e2fc4f08dd22bd65648a986e955d49c8887555e2338a7e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 118,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 116,
            "length": 4,
            "offset": 49,
            "surroundingCode": "\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "1e772351423974987adb40daafd6232270a5e98cce79598f076e1f69c47a2941"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 118,
          "offset": 21,
          "length": 4,
          "code": {
            "startLine": 116,
            "length": 4,
            "offset": 49,
            "surroundingCode": "\t}\n\to.x = o.x * 0.5f + 0.5f;\n\to.y = o.y * 0.5f + 0.5f;\n\treturn o;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "2be7284f9ff8accf9f72dff60efcbdd1e846bdc573278d1e27d0d9fd1d234d55"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'f' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 121,
            "length": 1,
            "offset": 69,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "4ee2e03262b44a0c8d4f73692e143ac637c289e03fbc79cf07d33b1e4c063e5f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 12,
          "length": 5,
          "code": {
            "startLine": 121,
            "length": 5,
            "offset": 71,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "9b5e20bfc606299ac6d66664ffc494224b04a89fae5866f78de46984d2e1a964"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 22,
          "length": 4,
          "code": {
            "startLine": 121,
            "length": 4,
            "offset": 81,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "261205de35c064e8e18fef410467a47b999f83c7760c305fd5c8a60f22362e7f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 22,
          "length": 4,
          "code": {
            "startLine": 121,
            "length": 4,
            "offset": 81,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "9cfea7368c5f718a73fa18fd8493787317fcb4cf5b1d1836b11c92587ff9a1c8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 29,
          "length": 4,
          "code": {
            "startLine": 121,
            "length": 4,
            "offset": 88,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "be2fa4dd78f2c64daa6f345d8dfb54f0c28876d01e0ae6917bc2987909fe1476"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "math-missing-parentheses",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'*' has higher precedence than '-'; add parentheses to explicitly specify the order of operations",
      "detailsInfo": "math-missing-parentheses",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 35,
          "length": 5,
          "code": {
            "startLine": 121,
            "length": 5,
            "offset": 94,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-math-missing-parentheses"
      },
      "hash": "99a49846b2528b8b4ee0c6246559a7ec0419ffd0d8348f94b2832fb135dc24f6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2.0f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 45,
          "length": 4,
          "code": {
            "startLine": 121,
            "length": 4,
            "offset": 104,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "22251c91e38de67d506111dfea88b054f9f8ce01c2a06b187c7b0726b1c91a59"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 45,
          "length": 4,
          "code": {
            "startLine": 121,
            "length": 4,
            "offset": 104,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b1d377a1cf1b6a0afa11d80f04348528c0c4a4a386f01230942f4a57a0878442"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 123,
          "offset": 52,
          "length": 4,
          "code": {
            "startLine": 121,
            "length": 4,
            "offset": 111,
            "surroundingCode": "\nVector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "0a9f8df5f101a14c65451afd69fa306dd1c2165cec26db179b11681f31333bd8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'n' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 124,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 122,
            "length": 1,
            "offset": 126,
            "surroundingCode": "Vector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);\n\tn.x += n.x >= 0 ? -t : t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "ff3ad82ab986f45e85a62f1b4279130218c224f33045346670f0bdf736ca2f3f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 124,
          "offset": 22,
          "length": 4,
          "code": {
            "startLine": 122,
            "length": 4,
            "offset": 138,
            "surroundingCode": "Vector3 Vector3::octahedron_decode(const Vector2 &p_oct) {\n\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);\n\tn.x += n.x >= 0 ? -t : t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "98d601e48a2a99da3aee9cb7ee924540b66bfcedb4642ca48f8af854393fa27f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 't' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 125,
          "offset": 8,
          "length": 1,
          "code": {
            "startLine": 123,
            "length": 1,
            "offset": 127,
            "surroundingCode": "\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);\n\tn.x += n.x >= 0 ? -t : t;\n\tn.y += n.y >= 0 ? -t : t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "74ae678175fd8c0d089ff59f5df2269946d562d84578d6a0d206aa4137fb5c47"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 125,
          "offset": 24,
          "length": 4,
          "code": {
            "startLine": 123,
            "length": 4,
            "offset": 143,
            "surroundingCode": "\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);\n\tn.x += n.x >= 0 ? -t : t;\n\tn.y += n.y >= 0 ? -t : t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "918c1464d9efd850693b51b4e7a0029c4621f5b0eb6e92bda0cf53dbe5b4652a"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 125,
          "offset": 30,
          "length": 4,
          "code": {
            "startLine": 123,
            "length": 4,
            "offset": 149,
            "surroundingCode": "\tVector2 f(p_oct.x * 2.0f - 1.0f, p_oct.y * 2.0f - 1.0f);\n\tVector3 n(f.x, f.y, 1.0f - Math::abs(f.x) - Math::abs(f.y));\n\tfloat t = CLAMP(-n.z, 0.0f, 1.0f);\n\tn.x += n.x >= 0 ? -t : t;\n\tn.y += n.y >= 0 ? -t : t;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b1956687bf90e20cd8ffdb30f373529203b7a82ca78eae56195b8a7da6cb8571"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 133,
          "offset": 18,
          "length": 4,
          "code": {
            "startLine": 131,
            "length": 4,
            "offset": 128,
            "surroundingCode": "Vector2 Vector3::octahedron_tangent_encode(const float sign) const {\n\tVector2 res = this->octahedron_encode();\n\tres.y = res.y * 0.5f + 0.5f;\n\tres.y = sign >= 0.0f ? res.y : 1 - res.y;\n\treturn res;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "e29d2a53cd1d8b88152ac4936072a196cd8297185c65463c863b5b153cc33143"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 133,
          "offset": 18,
          "length": 4,
          "code": {
            "startLine": 131,
            "length": 4,
            "offset": 128,
            "surroundingCode": "Vector2 Vector3::octahedron_tangent_encode(const float sign) const {\n\tVector2 res = this->octahedron_encode();\n\tres.y = res.y * 0.5f + 0.5f;\n\tres.y = sign >= 0.0f ? res.y : 1 - res.y;\n\treturn res;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "3267f5eae3367b2f013c6282311660c10d2b4831c7fed1a86b968522110e667c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "0.5f is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 133,
          "offset": 25,
          "length": 4,
          "code": {
            "startLine": 131,
            "length": 4,
            "offset": 135,
            "surroundingCode": "Vector2 Vector3::octahedron_tangent_encode(const float sign) const {\n\tVector2 res = this->octahedron_encode();\n\tres.y = res.y * 0.5f + 0.5f;\n\tres.y = sign >= 0.0f ? res.y : 1 - res.y;\n\treturn res;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "9b6f032779dd0d6c4b52c72f1b36af4a4bc796ff4c4036fd21520d699be7f3d5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 133,
          "offset": 25,
          "length": 4,
          "code": {
            "startLine": 131,
            "length": 4,
            "offset": 135,
            "surroundingCode": "Vector2 Vector3::octahedron_tangent_encode(const float sign) const {\n\tVector2 res = this->octahedron_encode();\n\tres.y = res.y * 0.5f + 0.5f;\n\tres.y = sign >= 0.0f ? res.y : 1 - res.y;\n\treturn res;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "489749768122b9f6624359812bf39283bb45510b98bf28cc761d033ae5d186d2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 134,
          "offset": 18,
          "length": 4,
          "code": {
            "startLine": 132,
            "length": 4,
            "offset": 89,
            "surroundingCode": "\tVector2 res = this->octahedron_encode();\n\tres.y = res.y * 0.5f + 0.5f;\n\tres.y = sign >= 0.0f ? res.y : 1 - res.y;\n\treturn res;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a3450e00862b695a3801b9b6cf79f37d6a14042322d49c4758d30bb66e74780c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 141,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 139,
            "length": 4,
            "offset": 115,
            "surroundingCode": "\tVector2 oct_compressed = p_oct;\n\toct_compressed.y = oct_compressed.y * 2 - 1;\n\t*sign = oct_compressed.y >= 0.0f ? 1.0f : -1.0f;\n\toct_compressed.y = Math::abs(oct_compressed.y);\n\tVector3 res = Vector3::octahedron_decode(oct_compressed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "948df7bf337bcf888ab7c030924e7bd492b54b9321690ed028e6d672e2356506"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 141,
          "offset": 45,
          "length": 4,
          "code": {
            "startLine": 139,
            "length": 4,
            "offset": 123,
            "surroundingCode": "\tVector2 oct_compressed = p_oct;\n\toct_compressed.y = oct_compressed.y * 2 - 1;\n\t*sign = oct_compressed.y >= 0.0f ? 1.0f : -1.0f;\n\toct_compressed.y = Math::abs(oct_compressed.y);\n\tVector3 res = Vector3::octahedron_decode(oct_compressed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "66e1dc3aaf292f82298283639013520167fa652f746fbd02bdee18dff8a94502"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'real_t' (aka 'float') to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 172,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 170,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\nVector3::operator Vector3i() const {\n\treturn Vector3i(x, y, z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "184e4fb04067e4165226eecaf0bad3db02fa6cda908340e27e9f2c7760668619"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'real_t' (aka 'float') to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 172,
          "offset": 21,
          "length": 1,
          "code": {
            "startLine": 170,
            "length": 1,
            "offset": 58,
            "surroundingCode": "\nVector3::operator Vector3i() const {\n\treturn Vector3i(x, y, z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "9e4845e131d6a623967c3a151ad60ec58bc871da3d26a75fb785965c9023fa4f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'real_t' (aka 'float') to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3.cpp",
          "line": 172,
          "offset": 24,
          "length": 1,
          "code": {
            "startLine": 170,
            "length": 1,
            "offset": 61,
            "surroundingCode": "\nVector3::operator Vector3i() const {\n\treturn Vector3i(x, y, z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "6e437be3b7d019676a97136c44bfae60ec9802124f2012ce0f7308cf0363ff71"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 40,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 38,
            "length": 4,
            "offset": 80,
            "surroundingCode": "Vector3i Vector3i::snapped(const Vector3i &p_step) const {\n\treturn Vector3i(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "5df033bdf2d36bb3d67d67dbe7fc503b4288591f6153f470cdb172673f5fcb1d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 41,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 39,
            "length": 4,
            "offset": 52,
            "surroundingCode": "\treturn Vector3i(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "e61359bc3d6368a454f1c406fe431950e35f42053c91a94518a94713413f9d14"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 42,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 40,
            "length": 4,
            "offset": 65,
            "surroundingCode": "\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "7d75a7708a7531671ee9fea5004df8518cc9be5c1d654f0bd64beefefa292286"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 47,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 45,
            "length": 4,
            "offset": 73,
            "surroundingCode": "Vector3i Vector3i::snappedi(int32_t p_step) const {\n\treturn Vector3i(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step),\n\t\t\tMath::snapped(z, p_step));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "289bf34f47903d0313831d4107405294d2e8fe4d66a73611efad9c05689b7572"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 48,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 46,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\treturn Vector3i(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step),\n\t\t\tMath::snapped(z, p_step));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "77e98b6dea2bb6a2e29bce8f7ca71f4c401434a78f3dcc154cc4f7c03996d5c0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 49,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 47,
            "length": 4,
            "offset": 61,
            "surroundingCode": "\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step),\n\t\t\tMath::snapped(z, p_step));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "ffa408084b12ad148b5328782f4ac1e163f7332e0c2b42bea2f8bc2bf1de875b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "avoid-nested-conditional-operator",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators",
      "detailsInfo": "avoid-nested-conditional-operator",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 53,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 51,
            "length": 1,
            "offset": 68,
            "surroundingCode": "\nVector3i::Axis Vector3i::min_axis_index() const {\n\treturn x < y ? (x < z ? Vector3i::AXIS_X : Vector3i::AXIS_Z) : (y < z ? Vector3i::AXIS_Y : Vector3i::AXIS_Z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-avoid-nested-conditional-operator"
      },
      "hash": "6fb61100ddca8c5eebef2ffea30986d21b447fd9d736bc0a0be7867fc152d1fb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "avoid-nested-conditional-operator",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators",
      "detailsInfo": "avoid-nested-conditional-operator",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 57,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 55,
            "length": 1,
            "offset": 68,
            "surroundingCode": "\nVector3i::Axis Vector3i::max_axis_index() const {\n\treturn x < y ? (y < z ? Vector3i::AXIS_Z : Vector3i::AXIS_Y) : (x < z ? Vector3i::AXIS_Z : Vector3i::AXIS_X);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-avoid-nested-conditional-operator"
      },
      "hash": "943d372572f383fcc5bb4166a5dfed6f02c81b275d0ac4fd78930960b57f4910"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 79,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 77,
            "length": 1,
            "offset": 54,
            "surroundingCode": "\nVector3i::operator Vector3() const {\n\treturn Vector3(x, y, z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "c0ed55906300d505619b6f857f90e002d325ed7ac51479e73b8c9509aa028cc8"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 79,
          "offset": 20,
          "length": 1,
          "code": {
            "startLine": 77,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\nVector3i::operator Vector3() const {\n\treturn Vector3(x, y, z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "a91473d24889943eb97eecd6046172809cb6983e59a87ed917beeca91be049db"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector3i.cpp",
          "line": 79,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 77,
            "length": 1,
            "offset": 60,
            "surroundingCode": "\nVector3i::operator Vector3() const {\n\treturn Vector3(x, y, z);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "ca95260a51d512d7530e48be42324e3ea59489c7aa0deec253380930e38a910f"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 42,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 40,
            "length": 1,
            "offset": 76,
            "surroundingCode": "\treal_t min_value = x;\n\tfor (uint32_t i = 1; i < 4; i++) {\n\t\tif (operator[](i) <= min_value) {\n\t\t\tmin_index = i;\n\t\t\tmin_value = operator[](i);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "614ca124cea583f03b38ca4dd91de7863b5bd4e5f8f3810272800cdd1e8e148b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 44,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 42,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\t\tif (operator[](i) <= min_value) {\n\t\t\tmin_index = i;\n\t\t\tmin_value = operator[](i);\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "f53c3ce33a78bcd722161f9e9862f471cac8d2b185a3252fa6bfe76bb814ce80"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 54,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 52,
            "length": 1,
            "offset": 76,
            "surroundingCode": "\treal_t max_value = x;\n\tfor (uint32_t i = 1; i < 4; i++) {\n\t\tif (operator[](i) > max_value) {\n\t\t\tmax_index = i;\n\t\t\tmax_value = operator[](i);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "a9ff764e440ac76fcececbbb83b897e451f91614f6af0e2259be35071ab7d0cb"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 56,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 54,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\t\tif (operator[](i) > max_value) {\n\t\t\tmax_index = i;\n\t\t\tmax_value = operator[](i);\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "32d826a7a4af0a8ba3d974dbf3bc95456e8881390c013dee22b7c4cd6eb7aeb2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 92,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 90,
            "length": 1,
            "offset": 48,
            "surroundingCode": "\nVector4 Vector4::normalized() const {\n\tVector4 v = *this;\n\tv.normalize();\n\treturn v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "0ee933a09d0c5a646355bf2f4318151f652e8d701d506fbf495cd99f4d149a54"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 170,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 168,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\nvoid Vector4::snap(const Vector4 &p_step) {\n\tx = Math::snapped(x, p_step.x);\n\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "9259fb4f9b58decd89f3b1f99ce67ae08b95b85a7541a8b56099a6377ac396c5"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 171,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 169,
            "length": 4,
            "offset": 82,
            "surroundingCode": "void Vector4::snap(const Vector4 &p_step) {\n\tx = Math::snapped(x, p_step.x);\n\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);\n\tw = Math::snapped(w, p_step.w);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "ddc46d49bfe5e944f32262695e20903cceb05853b60543613fde3ce5d65932ce"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 172,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 170,
            "length": 4,
            "offset": 71,
            "surroundingCode": "\tx = Math::snapped(x, p_step.x);\n\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);\n\tw = Math::snapped(w, p_step.w);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "ee9fc930159c413eda4a07782a812cdb0bd6f75747f4d6f8e4b053c091866839"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 173,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 171,
            "length": 4,
            "offset": 71,
            "surroundingCode": "\ty = Math::snapped(y, p_step.y);\n\tz = Math::snapped(z, p_step.z);\n\tw = Math::snapped(w, p_step.w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "d8ce9ace558611581c33336f9b5e42bc76db6103355cfae7d42bacc453a6299a"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 177,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 175,
            "length": 4,
            "offset": 43,
            "surroundingCode": "\nvoid Vector4::snapf(real_t p_step) {\n\tx = Math::snapped(x, p_step);\n\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "db34d1597ddc29f09ee8355d7f48a85cde193f7862e584c5fba2b18a43d6d737"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 178,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 176,
            "length": 4,
            "offset": 73,
            "surroundingCode": "void Vector4::snapf(real_t p_step) {\n\tx = Math::snapped(x, p_step);\n\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);\n\tw = Math::snapped(w, p_step);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "52caaaac5257d7ab7a1c3e1434c93eea04475ec084339f62632f180bb398c8c8"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 179,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 177,
            "length": 4,
            "offset": 67,
            "surroundingCode": "\tx = Math::snapped(x, p_step);\n\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);\n\tw = Math::snapped(w, p_step);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2372aa88031756993b365c2ece9fbb1838abcecc06275595e90b7091aa2a6871"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 180,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 178,
            "length": 4,
            "offset": 67,
            "surroundingCode": "\ty = Math::snapped(y, p_step);\n\tz = Math::snapped(z, p_step);\n\tw = Math::snapped(w, p_step);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "912bc98ecda99f3f53d5bcec6f29c6233e562c28fa66239870ddb71785e62d29"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 184,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 182,
            "length": 1,
            "offset": 66,
            "surroundingCode": "\nVector4 Vector4::snapped(const Vector4 &p_step) const {\n\tVector4 v = *this;\n\tv.snap(p_step);\n\treturn v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f39573558e537e5ced35e9541216e0e19b10840c794ac80c13c2b8e623136e65"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'v' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 190,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 188,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\nVector4 Vector4::snappedf(real_t p_step) const {\n\tVector4 v = *this;\n\tv.snapf(p_step);\n\treturn v;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b2a379d74039962e08886260df0c885cbed95ad557e82a2dfd70166378a3bd40"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 196,
          "offset": 17,
          "length": 4,
          "code": {
            "startLine": 194,
            "length": 4,
            "offset": 52,
            "surroundingCode": "\nVector4 Vector4::inverse() const {\n\treturn Vector4(1.0f / x, 1.0f / y, 1.0f / z, 1.0f / w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "50c1a46a9bad16d20a5c875bb8411df164c48559b8fb3a06b724da31386cf82d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 196,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 194,
            "length": 4,
            "offset": 62,
            "surroundingCode": "\nVector4 Vector4::inverse() const {\n\treturn Vector4(1.0f / x, 1.0f / y, 1.0f / z, 1.0f / w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "b6461d1284720aac8955567ce1e4b743ed30b556d3b3b81f80ae09f354544f56"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 196,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 194,
            "length": 4,
            "offset": 72,
            "surroundingCode": "\nVector4 Vector4::inverse() const {\n\treturn Vector4(1.0f / x, 1.0f / y, 1.0f / z, 1.0f / w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "04e170815de119f8d7a03f9ec1b01d331dc79e8141404ac120ee70a3711fad4c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "uppercase-literal-suffix",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "floating point literal has suffix 'f', which is not uppercase",
      "detailsInfo": "uppercase-literal-suffix",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4.cpp",
          "line": 196,
          "offset": 47,
          "length": 4,
          "code": {
            "startLine": 194,
            "length": 4,
            "offset": 82,
            "surroundingCode": "\nVector4 Vector4::inverse() const {\n\treturn Vector4(1.0f / x, 1.0f / y, 1.0f / z, 1.0f / w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-uppercase-literal-suffix"
      },
      "hash": "a98ea718f821ec58b3640ab00b9884593bc423d6bf8f1901469d8070fdc07e4e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method '_get_extension_class_name' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 45,
          "offset": 28,
          "length": 25,
          "code": {
            "startLine": 43,
            "length": 25,
            "offset": 142,
            "surroundingCode": "thread_local const GDExtensionInstanceBindingCallbacks *Wrapped::_constructing_class_binding_callbacks = nullptr;\n\nconst StringName *Wrapped::_get_extension_class_name() {\n\treturn nullptr;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "01d76d71b26441ba782a70af27b3802d47e61494a388652532ddb63956ad077f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: plist_owned",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 56,
          "offset": 1,
          "length": 7,
          "code": {
            "startLine": 54,
            "length": 7,
            "offset": 3,
            "surroundingCode": "}\n\nWrapped::Wrapped(const StringName p_godot_class) {\n#ifdef HOT_RELOAD_ENABLED\n\tif (unlikely(Wrapped::recreate_instance)) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "d27cc7ab4dcaa245e16a2ebe705b2f17c168f1cd3ec220b8f01f93bc3db0c88e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'RecreateInstance *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 61,
          "offset": 10,
          "length": 13,
          "code": {
            "startLine": 59,
            "length": 13,
            "offset": 113,
            "surroundingCode": "\t\tRecreateInstance *recreate_data = Wrapped::recreate_instance;\n\t\tRecreateInstance *previous = nullptr;\n\t\twhile (recreate_data) {\n\t\t\tif (recreate_data->wrapper == this) {\n\t\t\t\t_owner = recreate_data->owner;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "bbaab635966b2c98c35cb73f7940701e6afc722398c2dfd0f05f9b1038984f58"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'RecreateInstance *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 64,
          "offset": 9,
          "length": 8,
          "code": {
            "startLine": 62,
            "length": 8,
            "offset": 84,
            "surroundingCode": "\t\t\tif (recreate_data->wrapper == this) {\n\t\t\t\t_owner = recreate_data->owner;\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious->next = recreate_data->next;\n\t\t\t\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "69a3640037835140dc9d33b472f9f6b0ebd012c46127e63d83ad3897ea43682e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 76,
          "offset": 75,
          "length": 16,
          "code": {
            "startLine": 74,
            "length": 16,
            "offset": 84,
            "surroundingCode": "\t}\n#endif\n\t_owner = godot::internal::gdextension_interface_classdb_construct_object(reinterpret_cast<GDExtensionConstStringNamePtr>(p_godot_class._native_ptr()));\n\n\tif (_constructing_extension_class_name) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "38ab5191c8eb124ad0096da819aac91b293c03ae6d8c96d6388acf081babc176"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 79,
          "offset": 70,
          "length": 16,
          "code": {
            "startLine": 77,
            "length": 16,
            "offset": 113,
            "surroundingCode": "\n\tif (_constructing_extension_class_name) {\n\t\tgodot::internal::gdextension_interface_object_set_instance(_owner, reinterpret_cast<GDExtensionConstStringNamePtr>(_constructing_extension_class_name), this);\n\t\t_constructing_extension_class_name = nullptr;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "c0d4d80502ebcf6200f1b32abd62410c19c2c6f4d63aabe127ee535fbac8e976"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: plist_owned",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 91,
          "offset": 1,
          "length": 7,
          "code": {
            "startLine": 89,
            "length": 7,
            "offset": 3,
            "surroundingCode": "}\n\nWrapped::Wrapped(GodotObject *p_godot_object) {\n\t_owner = p_godot_object;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "4444216306c3322537fa1bdadcf46b6bf72dc23442280af286d9f1a9e0e6127b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'_owner' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 92,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 90,
            "length": 6,
            "offset": 50,
            "surroundingCode": "\nWrapped::Wrapped(GodotObject *p_godot_object) {\n\t_owner = p_godot_object;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "59701650dd936bc64b13aabbfa234abeece18175c452097db25d02715db16429"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 113,
          "offset": 10,
          "length": 16,
          "code": {
            "startLine": 111,
            "length": 16,
            "offset": 36,
            "surroundingCode": "\t\t*r_size = plist_size;\n\t}\n\tplist = reinterpret_cast<GDExtensionPropertyInfo *>(memalloc(sizeof(GDExtensionPropertyInfo) * plist_size));\n\tunsigned int i = 0;\n\tfor (const ::godot::PropertyInfo &E : plist_cpp) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "19eb52c6d64b083c7bb4886f3603b3ebf000c3fc196d8b3240cbacddd4ada3a8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'i' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/classes/wrapped.cpp",
          "line": 114,
          "offset": 15,
          "length": 1,
          "code": {
            "startLine": 112,
            "length": 1,
            "offset": 127,
            "surroundingCode": "\t}\n\tplist = reinterpret_cast<GDExtensionPropertyInfo *>(memalloc(sizeof(GDExtensionPropertyInfo) * plist_size));\n\tunsigned int i = 0;\n\tfor (const ::godot::PropertyInfo &E : plist_cpp) {\n\t\tplist[i].type = static_cast<GDExtensionVariantType>(E.type);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "a553032f2b31865cbca6c08193c21e027f69533376565fbe940c8a81eb2a6c08"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 40,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 38,
            "length": 4,
            "offset": 80,
            "surroundingCode": "Vector4i Vector4i::snapped(const Vector4i &p_step) const {\n\treturn Vector4i(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z),"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "d079d21d4f2804dc51fbc4e0a497155f894383d91c7eaeb0653821ca74af6101"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 41,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 39,
            "length": 4,
            "offset": 52,
            "surroundingCode": "\treturn Vector4i(\n\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z),\n\t\t\tMath::snapped(w, p_step.w));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "f8576aac66ff55e7fccf7e8310c0f79586adc29832f0385e14f9bbe1aa2d75c7"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 42,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 40,
            "length": 4,
            "offset": 65,
            "surroundingCode": "\t\t\tMath::snapped(x, p_step.x),\n\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z),\n\t\t\tMath::snapped(w, p_step.w));\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "2624f6a84c30d94a8fe19dc8620aafd87bb38e69df6c5d2ea45237592716ec2b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 43,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 41,
            "length": 4,
            "offset": 65,
            "surroundingCode": "\t\t\tMath::snapped(y, p_step.y),\n\t\t\tMath::snapped(z, p_step.z),\n\t\t\tMath::snapped(w, p_step.w));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "044a9b95e00c37b9891f8b19937eb264a6d9a56ec4e58e9d035372b09ec2ad9b"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 48,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 46,
            "length": 4,
            "offset": 73,
            "surroundingCode": "Vector4i Vector4i::snappedi(int32_t p_step) const {\n\treturn Vector4i(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step),\n\t\t\tMath::snapped(z, p_step),"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "396c583c019b63a7408e353220c094c440a2ca872e0908fdfa42c5031e3ad2c0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 49,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 47,
            "length": 4,
            "offset": 50,
            "surroundingCode": "\treturn Vector4i(\n\t\t\tMath::snapped(x, p_step),\n\t\t\tMath::snapped(y, p_step),\n\t\t\tMath::snapped(z, p_step),\n\t\t\tMath::snapped(w, p_step));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "694de5cc86ed9044b984f5410a1823cd5fe5550871f257dae250eeb6173eac05"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'double' to 'int32_t' (aka 'int')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 51,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 49,
            "length": 4,
            "offset": 61,
            "surroundingCode": "\t\t\tMath::snapped(y, p_step),\n\t\t\tMath::snapped(z, p_step),\n\t\t\tMath::snapped(w, p_step));\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "10e8268b4cd2b04381560760d28a07644186f68496928c33a4ec819a227e2dd9"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 58,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 56,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\tint32_t min_value = x;\n\tfor (uint32_t i = 1; i < 4; i++) {\n\t\tif (operator[](i) <= min_value) {\n\t\t\tmin_index = i;\n\t\t\tmin_value = operator[](i);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "548a0256afb8278b73900f5b80b36ffff9851f6af2e154ce70fff0e610d04b46"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 60,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 58,
            "length": 1,
            "offset": 80,
            "surroundingCode": "\t\tif (operator[](i) <= min_value) {\n\t\t\tmin_index = i;\n\t\t\tmin_value = operator[](i);\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "1834575fed5a4bd05e1c363352571c194c072cc74cd772fa088e194420bb36b1"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 70,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 68,
            "length": 1,
            "offset": 77,
            "surroundingCode": "\tint32_t max_value = x;\n\tfor (uint32_t i = 1; i < 4; i++) {\n\t\tif (operator[](i) > max_value) {\n\t\t\tmax_index = i;\n\t\t\tmax_value = operator[](i);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "f763bfa0a741687cd8ce6925c3ec63bbdc975c89a00b4aa798c0aad8edf42e69"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 72,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 70,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\t\tif (operator[](i) > max_value) {\n\t\t\tmax_index = i;\n\t\t\tmax_value = operator[](i);\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "3882bb105604affe4e4fc6d8a1b1c7cbddcfe0f5c0e58a22b662eb61518c0059"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 99,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 97,
            "length": 1,
            "offset": 54,
            "surroundingCode": "\nVector4i::operator Vector4() const {\n\treturn Vector4(x, y, z, w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "737604ff7aae68d5ad430e8f06a187d6521cb37a4e9bd5a334356bd630842992"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 99,
          "offset": 20,
          "length": 1,
          "code": {
            "startLine": 97,
            "length": 1,
            "offset": 57,
            "surroundingCode": "\nVector4i::operator Vector4() const {\n\treturn Vector4(x, y, z, w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "6a6b9789146fb75eba3fa9d2d06146914f3581fb8c9dd9f1ed2e685d9e3f5d48"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 99,
          "offset": 23,
          "length": 1,
          "code": {
            "startLine": 97,
            "length": 1,
            "offset": 60,
            "surroundingCode": "\nVector4i::operator Vector4() const {\n\treturn Vector4(x, y, z, w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "709f6afadf74c7bc9797a6588d75c55739b2fbcc331eff74dbe0647496456488"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "narrowing-conversions",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "narrowing conversion from 'int32_t' (aka 'int') to 'real_t' (aka 'float')",
      "detailsInfo": "narrowing-conversions",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/variant/vector4i.cpp",
          "line": 99,
          "offset": 26,
          "length": 1,
          "code": {
            "startLine": 97,
            "length": 1,
            "offset": 63,
            "surroundingCode": "\nVector4i::operator Vector4() const {\n\treturn Vector4(x, y, z, w);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-narrowing-conversions"
      },
      "hash": "6d00fb1f32b56a4966c5156c855eb800df7c94edbc14e5c8a90c9abd3316ac3e"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'D_METHOD' of similar type ('int') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 54,
          "offset": 27,
          "length": 10,
          "code": {
            "startLine": 52,
            "length": 10,
            "offset": 29,
            "surroundingCode": "}\n\nMethodDefinition D_METHOD(StringName p_name, StringName p_arg1) {\n\tMethodDefinition method(p_name);\n\tmethod.args.push_front(p_arg1);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "86b71845e6036c57e07b0403f9d34e168dfc6cada3721a16bbe844fc89a50606"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'add_property_group' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 60,
          "offset": 15,
          "length": 18,
          "code": {
            "startLine": 58,
            "length": 18,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::add_property_group(const StringName &p_class, const String &p_name, const String &p_prefix) {\n\tERR_FAIL_COND_MSG(classes.find(p_class) == classes.end(), String(\"Trying to add property '{0}{1}' to non-existing class '{2}'.\").format(Array::make(p_prefix, p_name, p_class)));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "58510897cbacbc1beb2e794ebdbe42a7972a61df889cf9ada8718eccd1419207"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'add_property_subgroup' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 66,
          "offset": 15,
          "length": 21,
          "code": {
            "startLine": 64,
            "length": 21,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::add_property_subgroup(const StringName &p_class, const String &p_name, const String &p_prefix) {\n\tERR_FAIL_COND_MSG(classes.find(p_class) == classes.end(), String(\"Trying to add property '{0}{1}' to non-existing class '{2}'.\").format(Array::make(p_prefix, p_name, p_class)));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "0494e6c5f05b435b32a832901cfbe9a946fc4c1bc3b3597fd1b926d7a22799ea"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'add_property' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 72,
          "offset": 15,
          "length": 12,
          "code": {
            "startLine": 70,
            "length": 12,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::add_property(const StringName &p_class, const PropertyInfo &p_pinfo, const StringName &p_setter, const StringName &p_getter, int p_index) {\n\tERR_FAIL_COND_MSG(classes.find(p_class) == classes.end(), String(\"Trying to add property '{0}' to non-existing class '{1}'.\").format(Array::make(p_pinfo.name, p_class)));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "f0607c407de6ccb86af0f7f0a48d17a8c1e3d27bfe0596bd9776bc3666f08283"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of 'add_property' of similar type are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 72,
          "offset": 84,
          "length": 5,
          "code": {
            "startLine": 70,
            "length": 5,
            "offset": 86,
            "surroundingCode": "}\n\nvoid ClassDB::add_property(const StringName &p_class, const PropertyInfo &p_pinfo, const StringName &p_setter, const StringName &p_getter, int p_index) {\n\tERR_FAIL_COND_MSG(classes.find(p_class) == classes.end(), String(\"Trying to add property '{0}' to non-existing class '{1}'.\").format(Array::make(p_pinfo.name, p_class)));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "c37f62aefd3c5611b419d809337d5e15c17418bcba3bd0fe6e8226f67e82425c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'get_method' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 114,
          "offset": 22,
          "length": 10,
          "code": {
            "startLine": 112,
            "length": 10,
            "offset": 24,
            "surroundingCode": "}\n\nMethodBind *ClassDB::get_method(const StringName &p_class, const StringName &p_method) {\n\tERR_FAIL_COND_V_MSG(classes.find(p_class) == classes.end(), nullptr, String(\"Class '{0}' not found.\").format(Array::make(p_class)));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "a6e2b60ffac4c308b7f54f2b85691383d45052a959df4526f42dc481e91de57c"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'get_method' of similar type ('const int &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 114,
          "offset": 33,
          "length": 5,
          "code": {
            "startLine": 112,
            "length": 5,
            "offset": 35,
            "surroundingCode": "}\n\nMethodBind *ClassDB::get_method(const StringName &p_class, const StringName &p_method) {\n\tERR_FAIL_COND_V_MSG(classes.find(p_class) == classes.end(), nullptr, String(\"Class '{0}' not found.\").format(Array::make(p_class)));\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "ccc1bd6156ef58d9051ff65f7cc5817e1ea3430a6c11c26b4cd37399b1066dbb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'ClassInfo *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 118,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 116,
            "length": 4,
            "offset": 47,
            "surroundingCode": "\n\tClassInfo *type = &classes[p_class];\n\twhile (type) {\n\t\tstd::unordered_map<StringName, MethodBind *>::iterator method = type->method_map.find(p_method);\n\t\tif (method != type->method_map.end()) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "a273b3b348b67931c2427494d4364359b034ee8a210ee3dd7c6a24eb60c06578"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "redundant-control-flow",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "redundant continue statement at the end of loop statement",
      "detailsInfo": "redundant-control-flow",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 124,
          "offset": 3,
          "length": 8,
          "code": {
            "startLine": 122,
            "length": 8,
            "offset": 33,
            "surroundingCode": "\t\t}\n\t\ttype = type->parent_ptr;\n\t\tcontinue;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-redundant-control-flow"
      },
      "hash": "6f6658b6d479ce23898a952b02d9da12a69b57698e88e0af552125170119c705"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 173,
          "offset": 46,
          "length": 6,
          "code": {
            "startLine": 171,
            "length": 6,
            "offset": 114,
            "surroundingCode": "\tdefvals.resize(p_defcount);\n\tfor (int i = 0; i < p_defcount; i++) {\n\t\tdefvals[i] = *static_cast<const Variant *>(p_defs[i]);\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "bfb1b365c1f6918d862d7076e30248492bcb1d08c2c0be3064ace706d127281e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'bind_method_godot' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 188,
          "offset": 15,
          "length": 17,
          "code": {
            "startLine": 186,
            "length": 17,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::bind_method_godot(const StringName &p_class_name, MethodBind *p_method) {\n\tstd::vector<GDExtensionVariantPtr> def_args;\n\tconst std::vector<Variant> &def_args_val = p_method->get_default_arguments();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "3d5c86eb080be2e6deafa196d974d2438e326fc419ff89c33d94802f3db8040d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'add_signal' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 237,
          "offset": 15,
          "length": 10,
          "code": {
            "startLine": 235,
            "length": 10,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::add_signal(const StringName &p_class, const MethodInfo &p_signal) {\n\tstd::unordered_map<StringName, ClassInfo>::iterator type_it = classes.find(p_class);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "5d1388250310010725b325b59339ba77e89f6b96fbbd3e3d273ab32b8d9f0740"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cl' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 242,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 240,
            "length": 2,
            "offset": 126,
            "surroundingCode": "\tERR_FAIL_COND_MSG(type_it == classes.end(), String(\"Class '{0}' doesn't exist.\").format(Array::make(p_class)));\n\n\tClassInfo &cl = type_it->second;\n\n\t// Check if this signal is already register"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "cf3556397f6fd689153382990fe7ede3d648ddbf8617fec4b0da6e80579f159c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'ClassInfo *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 246,
          "offset": 9,
          "length": 5,
          "code": {
            "startLine": 244,
            "length": 5,
            "offset": 78,
            "surroundingCode": "\t// Check if this signal is already register\n\tClassInfo *check = &cl;\n\twhile (check) {\n\t\tERR_FAIL_COND_MSG(check->signal_names.find(p_signal.name) != check->signal_names.end(), String(\"Class '{0}' already has signal '{1}'.\").format(Array::make(p_class, p_signal.name)));\n\t\tcheck = check->parent_ptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "0bfbb047347b099588c2720f9acbde1beccaefde912d69e466e5d6dcde8855dd"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'bind_integer_constant' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 272,
          "offset": 15,
          "length": 21,
          "code": {
            "startLine": 270,
            "length": 21,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::bind_integer_constant(const StringName &p_class_name, const StringName &p_enum_name, const StringName &p_constant_name, GDExtensionInt p_constant_value, bool p_is_bitfield) {\n\tstd::unordered_map<StringName, ClassInfo>::iterator type_it = classes.find(p_class_name);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "e7744227b9bee6ebb3985f228f6a5024189e30e9c31ce63b7d6da9e5bc77c7ca"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "4 adjacent parameters of 'bind_integer_constant' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 272,
          "offset": 37,
          "length": 5,
          "code": {
            "startLine": 270,
            "length": 5,
            "offset": 39,
            "surroundingCode": "}\n\nvoid ClassDB::bind_integer_constant(const StringName &p_class_name, const StringName &p_enum_name, const StringName &p_constant_name, GDExtensionInt p_constant_value, bool p_is_bitfield) {\n\tstd::unordered_map<StringName, ClassInfo>::iterator type_it = classes.find(p_class_name);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "247cd5e12a6356af1375e97b197820ce83eefbfc7ee7a1d66ea66d3e9dde7586"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'get_virtual_func' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 288,
          "offset": 55,
          "length": 4,
          "code": {
            "startLine": 286,
            "length": 4,
            "offset": 278,
            "surroundingCode": "\tinternal::gdextension_interface_classdb_register_extension_class_integer_constant(internal::library, p_class_name._native_ptr(), p_enum_name._native_ptr(), p_constant_name._native_ptr(), p_constant_value, p_is_bitfield);\n}\nGDExtensionClassCallVirtual ClassDB::get_virtual_func(void *p_userdata, GDExtensionConstStringNamePtr p_name) {\n\t// This is called by Godot the first time it calls a virtual function, and it caches the result, per object instance.\n\t// Because of this, it can happen from different threads at once."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "93660b60d924d40f2cf280a4f52733ae0d05033cbaf7f759e0a28517962c06eb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'get_instance_binding_callbacks' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 314,
          "offset": 53,
          "length": 30,
          "code": {
            "startLine": 312,
            "length": 30,
            "offset": 55,
            "surroundingCode": "}\n\nconst GDExtensionInstanceBindingCallbacks *ClassDB::get_instance_binding_callbacks(const StringName &p_class) {\n\tstd::unordered_map<StringName, const GDExtensionInstanceBindingCallbacks *>::iterator callbacks_it = instance_binding_callbacks.find(p_class);\n\tif (likely(callbacks_it != instance_binding_callbacks.end())) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "24cc7409f9f8127b413bb505d0a2cd452693aae14902e63d40b17d9cc54c30a2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-do-while",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "avoid do-while loops",
      "detailsInfo": "avoid-do-while",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 322,
          "offset": 2,
          "length": 2,
          "code": {
            "startLine": 320,
            "length": 2,
            "offset": 143,
            "surroundingCode": "\t// If we don't have an instance binding callback for the given class, find the closest parent where we do.\n\tStringName class_name = p_class;\n\tdo {\n\t\tclass_name = get_parent_class(class_name);\n\t\tERR_FAIL_COND_V_MSG(class_name == StringName(), nullptr, String(\"Cannot find instance binding callbacks for class '{0}'.\").format(Array::make(p_class)));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-do-while"
      },
      "hash": "f85d8a9dd37b1693aff5932f75db4f5879b5d8a2e68a938dae927eeeeb666fa9"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'bind_virtual_method' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 331,
          "offset": 15,
          "length": 19,
          "code": {
            "startLine": 329,
            "length": 19,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::bind_virtual_method(const StringName &p_class, const StringName &p_method, GDExtensionClassCallVirtual p_call) {\n\tstd::unordered_map<StringName, ClassInfo>::iterator type_it = classes.find(p_class);\n\tERR_FAIL_COND_MSG(type_it == classes.end(), String(\"Class '{0}' doesn't exist.\").format(Array::make(p_class)));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "e28308590cd75666b46a3d6932b514a32b924f0854184614018dde2ce393530d"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'bind_virtual_method' of similar type ('const int &') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 331,
          "offset": 35,
          "length": 5,
          "code": {
            "startLine": 329,
            "length": 5,
            "offset": 37,
            "surroundingCode": "}\n\nvoid ClassDB::bind_virtual_method(const StringName &p_class, const StringName &p_method, GDExtensionClassCallVirtual p_call) {\n\tstd::unordered_map<StringName, ClassInfo>::iterator type_it = classes.find(p_class);\n\tERR_FAIL_COND_MSG(type_it == classes.end(), String(\"Class '{0}' doesn't exist.\").format(Array::make(p_class)));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "5f9007e2274c0812b3c9944814281fc2b6c6b7e466c798a0131c14e3505af71b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'add_virtual_method' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 343,
          "offset": 15,
          "length": 18,
          "code": {
            "startLine": 341,
            "length": 18,
            "offset": 17,
            "surroundingCode": "}\n\nvoid ClassDB::add_virtual_method(const StringName &p_class, const MethodInfo &p_method, const Vector<StringName> &p_arg_names) {\n\tstd::unordered_map<StringName, ClassInfo>::iterator type_it = classes.find(p_class);\n\tERR_FAIL_COND_MSG(type_it == classes.end(), String(\"Class '{0}' doesn't exist.\").format(Array::make(p_class)));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "dcb3856c9fa1016280c7c01a777160a94f91fbd4af3172bee11fd25097cac853"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'mi' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 347,
          "offset": 36,
          "length": 2,
          "code": {
            "startLine": 345,
            "length": 2,
            "offset": 149,
            "surroundingCode": "\tERR_FAIL_COND_MSG(type_it == classes.end(), String(\"Class '{0}' doesn't exist.\").format(Array::make(p_class)));\n\n\tGDExtensionClassVirtualMethodInfo mi;\n\tmi.name = (GDExtensionStringNamePtr)&p_method.name;\n\tmi.method_flags = p_method.flags;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "911917b8659b9f8d5e383894b1ea091e98dbb7a2e84d4148a55119fafc456b1c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 354,
          "offset": 18,
          "length": 1,
          "code": {
            "startLine": 352,
            "length": 1,
            "offset": 95,
            "surroundingCode": "\tmi.argument_count = p_method.arguments.size();\n\tif (mi.argument_count > 0) {\n\t\tmi.arguments = (GDExtensionPropertyInfo *)memalloc(sizeof(GDExtensionPropertyInfo) * mi.argument_count);\n\t\tmi.arguments_metadata = (GDExtensionClassMethodArgumentMetadata *)memalloc(sizeof(GDExtensionClassMethodArgumentMetadata) * mi.argument_count);\n\t\tfor (uint32_t i = 0; i < mi.argument_count; i++) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b1a922087483aa6e26b55f537eaf1fa84ae7c7a2695721262d06619b8c252dce"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 355,
          "offset": 27,
          "length": 1,
          "code": {
            "startLine": 353,
            "length": 1,
            "offset": 163,
            "surroundingCode": "\tif (mi.argument_count > 0) {\n\t\tmi.arguments = (GDExtensionPropertyInfo *)memalloc(sizeof(GDExtensionPropertyInfo) * mi.argument_count);\n\t\tmi.arguments_metadata = (GDExtensionClassMethodArgumentMetadata *)memalloc(sizeof(GDExtensionClassMethodArgumentMetadata) * mi.argument_count);\n\t\tfor (uint32_t i = 0; i < mi.argument_count; i++) {\n\t\t\tmi.arguments[i] = p_method.arguments[i]._to_gdextension();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "3aff1545833dfdf62f4a9e2a79f15e3dadf4d9cbaf4037c2fb2cc78fe33e183d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 357,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 355,
            "length": 2,
            "offset": 202,
            "surroundingCode": "\t\tmi.arguments_metadata = (GDExtensionClassMethodArgumentMetadata *)memalloc(sizeof(GDExtensionClassMethodArgumentMetadata) * mi.argument_count);\n\t\tfor (uint32_t i = 0; i < mi.argument_count; i++) {\n\t\t\tmi.arguments[i] = p_method.arguments[i]._to_gdextension();\n\t\t\tmi.arguments_metadata[i] = p_method.arguments_metadata[i];\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "c465f0ba6393bcecaa622166b086c745ee61ace4869a8d05b513bb69524a2ec0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 358,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 356,
            "length": 2,
            "offset": 118,
            "surroundingCode": "\t\tfor (uint32_t i = 0; i < mi.argument_count; i++) {\n\t\t\tmi.arguments[i] = p_method.arguments[i]._to_gdextension();\n\t\t\tmi.arguments_metadata[i] = p_method.arguments_metadata[i];\n\t\t}\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "eed146237235b49a41b1acf68818a049dbca930184fc66ccfdce33eff88f56c1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 369,
          "offset": 4,
          "length": 2,
          "code": {
            "startLine": 367,
            "length": 2,
            "offset": 62,
            "surroundingCode": "\t} else {\n\t\tfor (int i = 0; i < p_arg_names.size(); i++) {\n\t\t\tmi.arguments[i].name = (GDExtensionStringNamePtr)&p_arg_names[i];\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "58774a466fe01c3fb876d569539ff85db6bacfb06164a92c9e881467628abe59"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'GDExtensionPropertyInfo *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 375,
          "offset": 6,
          "length": 2,
          "code": {
            "startLine": 373,
            "length": 2,
            "offset": 122,
            "surroundingCode": "\tinternal::gdextension_interface_classdb_register_extension_class_virtual_method(internal::library, &p_class, &mi);\n\n\tif (mi.arguments) {\n\t\tmemfree(mi.arguments);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "a146aab6fadab1f051a9ac7f50badaf87eb0e477c6e31cca61303e9e908c624c"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'GDExtensionClassMethodArgumentMetadata *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 378,
          "offset": 6,
          "length": 2,
          "code": {
            "startLine": 376,
            "length": 2,
            "offset": 33,
            "surroundingCode": "\t\tmemfree(mi.arguments);\n\t}\n\tif (mi.arguments_metadata) {\n\t\tmemfree(mi.arguments_metadata);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "d151b57701406759554567bfa379c88f454662ff1d6c4a2744d055f95a93b960"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'cl' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 401,
          "offset": 20,
          "length": 2,
          "code": {
            "startLine": 399,
            "length": 2,
            "offset": 174,
            "surroundingCode": "\tfor (std::vector<StringName>::reverse_iterator i = class_register_order.rbegin(); i != class_register_order.rend(); ++i) {\n\t\tconst StringName &name = *i;\n\t\tconst ClassInfo &cl = classes[name];\n\n\t\tif (cl.level != p_level) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "9e96da8e948a1a9c8b600397f4787218cc8dfee90565f61362ed9a4e6e626785"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'it' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/class_db.cpp",
          "line": 419,
          "offset": 37,
          "length": 2,
          "code": {
            "startLine": 417,
            "length": 2,
            "offset": 184,
            "surroundingCode": "\t{\n\t\t// The following is equivalent to c++20 `std::erase_if(class_register_order, [&](const StringName& name){ return to_erase.contains(name); });`\n\t\tstd::vector<StringName>::iterator it = std::remove_if(class_register_order.begin(), class_register_order.end(), [&](const StringName &p_name) {\n\t\t\treturn to_erase.count(p_name) > 0;\n\t\t});"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "10b4c4d1cfaf29832efb8b805e837df3a1f51722ce20c3713185bff6f3cfc903"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/error_macros.cpp",
          "line": 42,
          "offset": 86,
          "length": 15,
          "code": {
            "startLine": 40,
            "length": 15,
            "offset": 248,
            "surroundingCode": "void _err_print_error(const char *p_function, const char *p_file, int p_line, const char *p_error, bool p_editor_notify, bool p_is_warning) {\n\tif (p_is_warning) {\n\t\tinternal::gdextension_interface_print_warning(p_error, p_function, p_file, p_line, p_editor_notify);\n\t} else {\n\t\tinternal::gdextension_interface_print_error(p_error, p_function, p_file, p_line, p_editor_notify);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "f9545fd346ed2492b6dd91a488419c432dda45d96257a8d5a1657de53c45d960"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/error_macros.cpp",
          "line": 44,
          "offset": 84,
          "length": 15,
          "code": {
            "startLine": 42,
            "length": 15,
            "offset": 196,
            "surroundingCode": "\t\tinternal::gdextension_interface_print_warning(p_error, p_function, p_file, p_line, p_editor_notify);\n\t} else {\n\t\tinternal::gdextension_interface_print_error(p_error, p_function, p_file, p_line, p_editor_notify);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "dc73922a91d1dd6ed1a4e6356c45e4d767a8047013126db46a5d08ce38efe84d"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/error_macros.cpp",
          "line": 54,
          "offset": 110,
          "length": 15,
          "code": {
            "startLine": 52,
            "length": 15,
            "offset": 295,
            "surroundingCode": "void _err_print_error(const char *p_function, const char *p_file, int p_line, const char *p_error, const char *p_message, bool p_editor_notify, bool p_is_warning) {\n\tif (p_is_warning) {\n\t\tinternal::gdextension_interface_print_warning_with_message(p_error, p_message, p_function, p_file, p_line, p_editor_notify);\n\t} else {\n\t\tinternal::gdextension_interface_print_error_with_message(p_error, p_message, p_function, p_file, p_line, p_editor_notify);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "d6e912ac5c135b468110ad467f32b12968180120a8b7e9474a76751f416d3b23"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/error_macros.cpp",
          "line": 56,
          "offset": 108,
          "length": 15,
          "code": {
            "startLine": 54,
            "length": 15,
            "offset": 244,
            "surroundingCode": "\t\tinternal::gdextension_interface_print_warning_with_message(p_error, p_message, p_function, p_file, p_line, p_editor_notify);\n\t} else {\n\t\tinternal::gdextension_interface_print_error_with_message(p_error, p_message, p_function, p_file, p_line, p_editor_notify);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "e6d3ae78a1d34f35961529da11e8ce52928ee27eb6be7cae338ba3f6a79bf86c"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of '_err_print_index_error' of convertible types are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/error_macros.cpp",
          "line": 72,
          "offset": 73,
          "length": 3,
          "code": {
            "startLine": 70,
            "length": 3,
            "offset": 75,
            "surroundingCode": "}\n\nvoid _err_print_index_error(const char *p_function, const char *p_file, int p_line, int64_t p_index, int64_t p_size, const char *p_index_str, const char *p_size_str, const char *p_message, bool p_editor_notify, bool p_fatal) {\n\tString fstr(p_fatal ? \"FATAL: \" : \"\");\n\tString err(fstr + \"Index \" + p_index_str + \" = \" + itos(p_index) + \" is out of bounds (\" + p_size_str + \" = \" + itos(p_size) + \").\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "b45319cf08738dd6cfa7379ca54def9ed76005a33f6fd31e7cbbcf222493cc07"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "3 adjacent parameters of '_err_print_index_error' of similar type ('const char *') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/error_macros.cpp",
          "line": 72,
          "offset": 118,
          "length": 5,
          "code": {
            "startLine": 70,
            "length": 5,
            "offset": 120,
            "surroundingCode": "}\n\nvoid _err_print_index_error(const char *p_function, const char *p_file, int p_line, int64_t p_index, int64_t p_size, const char *p_index_str, const char *p_size_str, const char *p_message, bool p_editor_notify, bool p_fatal) {\n\tString fstr(p_fatal ? \"FATAL: \" : \"\");\n\tString err(fstr + \"Index \" + p_index_str + \" = \" + itos(p_index) + \" is out of bounds (\" + p_size_str + \" = \" + itos(p_size) + \").\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "9626b242029005410f087fbdb100a8163da20246590576524280a0fad01b0d99"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 's8' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 48,
          "offset": 12,
          "length": 2,
          "code": {
            "startLine": 46,
            "length": 2,
            "offset": 27,
            "surroundingCode": "\n\tif (prepad) {\n\t\tuint8_t *s8 = (uint8_t *)mem;\n\t\treturn s8 + DATA_OFFSET;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "f8e7c985d1fc20be11e8fda72b83974e9a97cf11e039203deda6433be0e85de1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 48,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 46,
            "length": 1,
            "offset": 32,
            "surroundingCode": "\n\tif (prepad) {\n\t\tuint8_t *s8 = (uint8_t *)mem;\n\t\treturn s8 + DATA_OFFSET;\n\t} else {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "a50df32d2066a397ffac67aee4b871fb9fd16c87b3ece5c5af334008bc812f95"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 49,
          "offset": 13,
          "length": 1,
          "code": {
            "startLine": 47,
            "length": 1,
            "offset": 59,
            "surroundingCode": "\tif (prepad) {\n\t\tuint8_t *s8 = (uint8_t *)mem;\n\t\treturn s8 + DATA_OFFSET;\n\t} else {\n\t\treturn mem;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "09b2f493fbb5ebb6a415dfe46a23518cbb9497313feac71245c1f86caea57558"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 50,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 48,
            "length": 4,
            "offset": 62,
            "surroundingCode": "\t\tuint8_t *s8 = (uint8_t *)mem;\n\t\treturn s8 + DATA_OFFSET;\n\t} else {\n\t\treturn mem;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "b1054f6efd4d1425d9e6694c7b858f1305bd9ab3a9e499c7c562276417ac2670"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 58,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 56,
            "length": 4,
            "offset": 76,
            "surroundingCode": "\tif (p_memory == nullptr) {\n\t\treturn alloc_static(p_bytes, p_pad_align);\n\t} else if (p_bytes == 0) {\n\t\tfree_static(p_memory, p_pad_align);\n\t\treturn nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "fb7d60940fbe4b018b1a62759ed043fae553208e30cce2106358e925631baa6b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 63,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 61,
            "length": 1,
            "offset": 20,
            "surroundingCode": "\t}\n\n\tuint8_t *mem = (uint8_t *)p_memory;\n\n#ifdef DEBUG_ENABLED"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "013c0de2df86c861d15be507ae182fbfc23263f20d52e18550e53dc44aa15a5f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 72,
          "offset": 7,
          "length": 2,
          "code": {
            "startLine": 70,
            "length": 2,
            "offset": 22,
            "surroundingCode": "\n\tif (prepad) {\n\t\tmem -= DATA_OFFSET;\n\t\tmem = (uint8_t *)internal::gdextension_interface_mem_realloc(mem, p_bytes + DATA_OFFSET);\n\t\tERR_FAIL_NULL_V(mem, nullptr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1e6f65b5a7627ee1d43e30f2cd1a69bf1c87868ab477a5d61a94d3da89caccad"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 73,
          "offset": 9,
          "length": 1,
          "code": {
            "startLine": 71,
            "length": 1,
            "offset": 45,
            "surroundingCode": "\tif (prepad) {\n\t\tmem -= DATA_OFFSET;\n\t\tmem = (uint8_t *)internal::gdextension_interface_mem_realloc(mem, p_bytes + DATA_OFFSET);\n\t\tERR_FAIL_NULL_V(mem, nullptr);\n\t\treturn mem + DATA_OFFSET;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "517915fd6fb9427e28fd977f61d3866b097d30be309621d218c726b47f521b94"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 75,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 73,
            "length": 1,
            "offset": 138,
            "surroundingCode": "\t\tmem = (uint8_t *)internal::gdextension_interface_mem_realloc(mem, p_bytes + DATA_OFFSET);\n\t\tERR_FAIL_NULL_V(mem, nullptr);\n\t\treturn mem + DATA_OFFSET;\n\t} else {\n\t\treturn (uint8_t *)internal::gdextension_interface_mem_realloc(mem, p_bytes);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "0daa15b6a24dc162d9eeca4ff17833497b4f927c26eaf68f833e4d52047ebe80"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "else-after-return",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use 'else' after 'return'",
      "detailsInfo": "else-after-return",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 76,
          "offset": 4,
          "length": 4,
          "code": {
            "startLine": 74,
            "length": 4,
            "offset": 64,
            "surroundingCode": "\t\tERR_FAIL_NULL_V(mem, nullptr);\n\t\treturn mem + DATA_OFFSET;\n\t} else {\n\t\treturn (uint8_t *)internal::gdextension_interface_mem_realloc(mem, p_bytes);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-else-after-return"
      },
      "hash": "1ef777b0d674d9d797ee66a67a6f3c7d509b820935162ce9201c17db51d66f38"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 77,
          "offset": 10,
          "length": 1,
          "code": {
            "startLine": 75,
            "length": 1,
            "offset": 47,
            "surroundingCode": "\t\treturn mem + DATA_OFFSET;\n\t} else {\n\t\treturn (uint8_t *)internal::gdextension_interface_mem_realloc(mem, p_bytes);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "04ebaa4f4d5191766fe4ce84119bfa33b7982ea1d5fa907d5d0361d5f07558d4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 82,
          "offset": 17,
          "length": 1,
          "code": {
            "startLine": 80,
            "length": 1,
            "offset": 75,
            "surroundingCode": "\nvoid Memory::free_static(void *p_ptr, bool p_pad_align) {\n\tuint8_t *mem = (uint8_t *)p_ptr;\n\n#ifdef DEBUG_ENABLED"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d75b97703eef543c4757314594fe28f774636976aca1069de3c5ee1d3f7f383b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 91,
          "offset": 7,
          "length": 2,
          "code": {
            "startLine": 89,
            "length": 2,
            "offset": 22,
            "surroundingCode": "\n\tif (prepad) {\n\t\tmem -= DATA_OFFSET;\n\t}\n\tinternal::gdextension_interface_mem_free(mem);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "4e84fe854e8efadee0fe4f8e2eedd69d0fdc725f5e9cc666284b0afecf928fa9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'left' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 97,
          "offset": 2,
          "length": 4,
          "code": {
            "startLine": 95,
            "length": 4,
            "offset": 29,
            "surroundingCode": "\n_GlobalNil::_GlobalNil() {\n\tleft = this;\n\tright = this;\n\tparent = this;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "7eb26e453d32865f1176336cf30c20449ddd66423ce0891271d54c473c95c847"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'right' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 98,
          "offset": 2,
          "length": 5,
          "code": {
            "startLine": 96,
            "length": 5,
            "offset": 42,
            "surroundingCode": "_GlobalNil::_GlobalNil() {\n\tleft = this;\n\tright = this;\n\tparent = this;\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "bf84fe3f26ced99810b959b00a6e615629b6cca1ca8d1bee6b99e45bb1183fda"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'parent' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 99,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 97,
            "length": 6,
            "offset": 30,
            "surroundingCode": "\tleft = this;\n\tright = this;\n\tparent = this;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "7c8f5a2a2fc9bfec4ef09b94e983d868a64d7039166903e4256e707e9ba7bfb0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'operator new' of similar type ('const char *') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/memory.cpp",
          "line": 107,
          "offset": 35,
          "length": 5,
          "code": {
            "startLine": 105,
            "length": 5,
            "offset": 180,
            "surroundingCode": "\n// p_dummy argument is added to avoid conflicts with the engine functions when both engine and GDExtension are built as a static library on iOS.\nvoid *operator new(size_t p_size, const char *p_dummy, const char *p_description) {\n\treturn godot::Memory::alloc_static(p_size);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "5c28706abbd8cc3fd37696dae41811483b9871b4ba36a22b63b3a31fbe7b4d07"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/method_bind.cpp",
          "line": 82,
          "offset": 3,
          "length": 14,
          "code": {
            "startLine": 80,
            "length": 14,
            "offset": 66,
            "surroundingCode": "\t// -1 means return type.\n\tfor (int i = -1; i < p_count; i++) {\n\t\targument_types[i + 1] = gen_argument_type(i);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "55dc420b8a887b5389f35be28b9d7af0743b1cd825cb4323d10af608328c18c0"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'bind_call' of similar type are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/method_bind.cpp",
          "line": 94,
          "offset": 28,
          "length": 4,
          "code": {
            "startLine": 92,
            "length": 4,
            "offset": 30,
            "surroundingCode": "}\n\nvoid MethodBind::bind_call(void *p_method_userdata, GDExtensionClassInstancePtr p_instance, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tconst MethodBind *bind = reinterpret_cast<const MethodBind *>(p_method_userdata);\n\tVariant ret = bind->call(p_instance, p_args, p_argument_count, *r_error);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "00e73ed9fcdcbfac222faf7663ae7707e2061fdedd3a1f1ca2b15a460f60ffa9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/method_bind.cpp",
          "line": 95,
          "offset": 27,
          "length": 16,
          "code": {
            "startLine": 93,
            "length": 16,
            "offset": 259,
            "surroundingCode": "\nvoid MethodBind::bind_call(void *p_method_userdata, GDExtensionClassInstancePtr p_instance, const GDExtensionConstVariantPtr *p_args, GDExtensionInt p_argument_count, GDExtensionVariantPtr r_return, GDExtensionCallError *r_error) {\n\tconst MethodBind *bind = reinterpret_cast<const MethodBind *>(p_method_userdata);\n\tVariant ret = bind->call(p_instance, p_args, p_argument_count, *r_error);\n\t// This assumes the return value is an empty Variant, so it doesn't need to call the destructor first."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "96d80a59f58fae5907ed75cf84f9b40127ebfc4b214cb00ccbb8cba52fd546c4"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'bind_ptrcall' of similar type are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/method_bind.cpp",
          "line": 102,
          "offset": 31,
          "length": 4,
          "code": {
            "startLine": 100,
            "length": 4,
            "offset": 33,
            "surroundingCode": "}\n\nvoid MethodBind::bind_ptrcall(void *p_method_userdata, GDExtensionClassInstancePtr p_instance, const GDExtensionConstTypePtr *p_args, GDExtensionTypePtr r_return) {\n\tconst MethodBind *bind = reinterpret_cast<const MethodBind *>(p_method_userdata);\n\tbind->ptrcall(p_instance, p_args, r_return);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "13eaffea59de80ac29d62a07b5ba10e4b57112895489ca4f9f001558a67e6058"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/method_bind.cpp",
          "line": 103,
          "offset": 27,
          "length": 16,
          "code": {
            "startLine": 101,
            "length": 16,
            "offset": 192,
            "surroundingCode": "\nvoid MethodBind::bind_ptrcall(void *p_method_userdata, GDExtensionClassInstancePtr p_instance, const GDExtensionConstTypePtr *p_args, GDExtensionTypePtr r_return) {\n\tconst MethodBind *bind = reinterpret_cast<const MethodBind *>(p_method_userdata);\n\tbind->ptrcall(p_instance, p_args, r_return);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "0a521673f52ca512b37f9079cb3a671a0937ffc0096c2348737777c11008a2b4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'GDExtensionVariantType *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/method_bind.cpp",
          "line": 108,
          "offset": 6,
          "length": 14,
          "code": {
            "startLine": 106,
            "length": 14,
            "offset": 34,
            "surroundingCode": "\nMethodBind::~MethodBind() {\n\tif (argument_types) {\n\t\tmemdelete_arr(argument_types);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "2aa57625075099216e2e4255de5e172d344bd57251d9bb18ecf5861c3d2cbea2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "non-const-parameter",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "pointer parameter 'p_engine_object' can be pointer to const",
      "detailsInfo": "non-const-parameter",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 39,
          "offset": 50,
          "length": 15,
          "code": {
            "startLine": 37,
            "length": 15,
            "offset": 71,
            "surroundingCode": "namespace internal {\n\nObject *get_object_instance_binding(GodotObject *p_engine_object) {\n\tif (p_engine_object == nullptr) {\n\t\treturn nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-non-const-parameter"
      },
      "hash": "f6139c502aa1e63c52a1a0a384d9aee84b2c187992199efcd9e48626051a4951"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 53,
          "offset": 76,
          "length": 16,
          "code": {
            "startLine": 51,
            "length": 16,
            "offset": 172,
            "surroundingCode": "\tconst GDExtensionInstanceBindingCallbacks *binding_callbacks = nullptr;\n\tStringName class_name;\n\tif (gdextension_interface_object_get_class_name(p_engine_object, library, reinterpret_cast<GDExtensionStringNamePtr>(class_name._native_ptr()))) {\n\t\tbinding_callbacks = ClassDB::get_instance_binding_callbacks(class_name);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "6b905d42d0d9853c86304bd13c406201910f33b54abef6e0e710cc7ba4ea46f5"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'va' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 64,
          "offset": 25,
          "length": 2,
          "code": {
            "startLine": 62,
            "length": 2,
            "offset": 113,
            "surroundingCode": "\nTypedArray<Dictionary> convert_property_list(const std::vector<PropertyInfo> &p_list) {\n\tTypedArray<Dictionary> va;\n\tfor (const PropertyInfo &pi : p_list) {\n\t\tva.push_back(Dictionary(pi));"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "e309d1b1887b8e525f240edebab6e0d0190195f8608931ac8c4e46ecf215a570"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "convert-member-functions-to-static",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "method 'from_dict' can be made static",
      "detailsInfo": "convert-member-functions-to-static",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 89,
          "offset": 24,
          "length": 9,
          "code": {
            "startLine": 87,
            "length": 9,
            "offset": 26,
            "surroundingCode": "}\n\nMethodInfo MethodInfo::from_dict(const Dictionary &p_dict) {\n\tMethodInfo mi;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-convert-member-functions-to-static"
      },
      "hash": "26c5c013db36696b3981022385dfd227045c7db2b8480d7f6a9cda835425abb1"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'mi' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 90,
          "offset": 13,
          "length": 2,
          "code": {
            "startLine": 88,
            "length": 2,
            "offset": 74,
            "surroundingCode": "\nMethodInfo MethodInfo::from_dict(const Dictionary &p_dict) {\n\tMethodInfo mi;\n\n\tif (p_dict.has(\"name\")) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "b98b6acf01d4c12de2775607cb8674c1996f5e0a5ca87bfcc34b7dcd13a525ba"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "identifier-length",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable name 'd' is too short, expected at least 3 characters",
      "detailsInfo": "identifier-length",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 101,
          "offset": 14,
          "length": 1,
          "code": {
            "startLine": 99,
            "length": 1,
            "offset": 55,
            "surroundingCode": "\n\tfor (int i = 0; i < args.size(); i++) {\n\t\tDictionary d = args[i];\n\t\tmi.arguments.push_back(PropertyInfo::from_dict(d));\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-identifier-length"
      },
      "hash": "dba3f8f6a19bfa50651070113cc8cd360b974d0b33952d4eadeb8ead283446d8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: name, arguments, default_arguments, return_val_metadata, arguments_metadata",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 123,
          "offset": 1,
          "length": 10,
          "code": {
            "startLine": 121,
            "length": 10,
            "offset": 3,
            "surroundingCode": "}\n\nMethodInfo::MethodInfo() :\n\t\tflags(GDEXTENSION_METHOD_FLAG_NORMAL) {}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "4446d4b2f385aa5cd6fb4ead9b06907080c87d78d24902236c65da88d4c648e8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: name, arguments, default_arguments, return_val_metadata, arguments_metadata",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 126,
          "offset": 1,
          "length": 10,
          "code": {
            "startLine": 124,
            "length": 10,
            "offset": 44,
            "surroundingCode": "\t\tflags(GDEXTENSION_METHOD_FLAG_NORMAL) {}\n\nMethodInfo::MethodInfo(StringName p_name) :\n\t\tname(p_name), flags(GDEXTENSION_METHOD_FLAG_NORMAL) {}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "12f4184055e79b4d9cb55936514dea407a5e7ce94f928361c22db141444384a7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: name, arguments, default_arguments, return_val_metadata, arguments_metadata",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 129,
          "offset": 1,
          "length": 10,
          "code": {
            "startLine": 127,
            "length": 10,
            "offset": 58,
            "surroundingCode": "\t\tname(p_name), flags(GDEXTENSION_METHOD_FLAG_NORMAL) {}\n\nMethodInfo::MethodInfo(Variant::Type ret) :\n\t\tflags(GDEXTENSION_METHOD_FLAG_NORMAL) {\n\treturn_val.type = ret;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "04b7cb5036c645fd56d100f662c0bad76f643d0f96450a7c42d3042aaf7a1f5a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: name, arguments, default_arguments, return_val_metadata, arguments_metadata",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 134,
          "offset": 1,
          "length": 10,
          "code": {
            "startLine": 132,
            "length": 10,
            "offset": 3,
            "surroundingCode": "}\n\nMethodInfo::MethodInfo(Variant::Type ret, StringName p_name) :\n\t\tname(p_name), flags(GDEXTENSION_METHOD_FLAG_NORMAL) {\n\treturn_val.type = ret;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "897c430d36b942bd456238d33bc825a100446e58659fde2dc4454056a84a0b5f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-member-init",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "constructor does not initialize these fields: name, arguments, default_arguments, return_val_metadata, arguments_metadata",
      "detailsInfo": "pro-type-member-init",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/core/object.cpp",
          "line": 139,
          "offset": 1,
          "length": 10,
          "code": {
            "startLine": 137,
            "length": 10,
            "offset": 3,
            "surroundingCode": "}\n\nMethodInfo::MethodInfo(const PropertyInfo &p_ret, StringName p_name) :\n\t\tname(p_name), return_val(p_ret), flags(GDEXTENSION_METHOD_FLAG_NORMAL) {}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-member-init"
      },
      "hash": "2f2a36d51b8f2794fe57bee784bfe20690d79ef9ecff7514863b8c13fb21e54f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::GDExtensionBinding::InitDataList::add' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/godot.hpp",
          "line": 234,
          "offset": 8,
          "length": 3,
          "code": {
            "startLine": 232,
            "length": 3,
            "offset": 17,
            "surroundingCode": "\n\tpublic:\n\t\tvoid add(InitData *p_cb);\n\t\t~InitDataList();\n\t};"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "1c7f3b19cc17757ebddf9ea57ee2056341e76ceed90e1e2cfd882c86258859ac"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "inconsistent-declaration-parameter-name",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'godot::GDExtensionBinding::InitObject::register_terminator' has a definition with different parameter names",
      "detailsInfo": "inconsistent-declaration-parameter-name",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/include/godot_cpp/godot.hpp",
          "line": 257,
          "offset": 8,
          "length": 19,
          "code": {
            "startLine": 255,
            "length": 19,
            "offset": 60,
            "surroundingCode": "\n\t\tvoid register_initializer(Callback p_init) const;\n\t\tvoid register_terminator(Callback p_init) const;\n\t\tvoid set_minimum_library_initialization_level(ModuleInitializationLevel p_level) const;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-inconsistent-declaration-parameter-name"
      },
      "hash": "442798dbccace7ce76e2fd36b92b1c933958755f25a19a987dd5f83a82c34fd7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_get_proc_address' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 46,
          "offset": 36,
          "length": 38,
          "code": {
            "startLine": 44,
            "length": 38,
            "offset": 57,
            "surroundingCode": "namespace internal {\n\nGDExtensionInterfaceGetProcAddress gdextension_interface_get_proc_address = nullptr;\nGDExtensionClassLibraryPtr library = nullptr;\nvoid *token = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6215caf5b239550d9cf157177b2217d7cabfc3126b75c2b2441b240a93da5e31"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'library' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 47,
          "offset": 28,
          "length": 7,
          "code": {
            "startLine": 45,
            "length": 7,
            "offset": 113,
            "surroundingCode": "\nGDExtensionInterfaceGetProcAddress gdextension_interface_get_proc_address = nullptr;\nGDExtensionClassLibraryPtr library = nullptr;\nvoid *token = nullptr;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0d4060fae3113dee50ebb8bfba837e62bddb8bf458e45483b872ae4f10324929"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'token' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 48,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 46,
            "length": 5,
            "offset": 137,
            "surroundingCode": "GDExtensionInterfaceGetProcAddress gdextension_interface_get_proc_address = nullptr;\nGDExtensionClassLibraryPtr library = nullptr;\nvoid *token = nullptr;\n\nGDExtensionGodotVersion godot_version = { 0, 0, 0, nullptr };"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "75543db33c1c16e4fecd313a0c2a38b69f5ed969ee09196813f4a9bdc27f033a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'token' provides global access to a non-const object; consider making the pointed-to data 'const'",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 48,
          "offset": 7,
          "length": 5,
          "code": {
            "startLine": 46,
            "length": 5,
            "offset": 137,
            "surroundingCode": "GDExtensionInterfaceGetProcAddress gdextension_interface_get_proc_address = nullptr;\nGDExtensionClassLibraryPtr library = nullptr;\nvoid *token = nullptr;\n\nGDExtensionGodotVersion godot_version = { 0, 0, 0, nullptr };"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "e9bad3b3a4e108911c86b6b6ac8b5697f5e1eaa1feed88e4d8d9ff25edb3d773"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'godot_version' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 50,
          "offset": 25,
          "length": 13,
          "code": {
            "startLine": 48,
            "length": 13,
            "offset": 48,
            "surroundingCode": "void *token = nullptr;\n\nGDExtensionGodotVersion godot_version = { 0, 0, 0, nullptr };\n\n// All of the GDExtension interface functions."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "20a7b79656732a0f06b018d23c77ee07f3c848c1eb2a583f8f95c120b1e4994b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_get_godot_version' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 53,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 51,
            "length": 39,
            "offset": 84,
            "surroundingCode": "\n// All of the GDExtension interface functions.\nGDExtensionInterfaceGetGodotVersion gdextension_interface_get_godot_version = nullptr;\nGDExtensionInterfaceMemAlloc gdextension_interface_mem_alloc = nullptr;\nGDExtensionInterfaceMemRealloc gdextension_interface_mem_realloc = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "b1154d71aa5d0b203f8996ea0137252dd9cf15960b2434064d07e866a7aaea62"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_mem_alloc' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 54,
          "offset": 30,
          "length": 31,
          "code": {
            "startLine": 52,
            "length": 31,
            "offset": 163,
            "surroundingCode": "// All of the GDExtension interface functions.\nGDExtensionInterfaceGetGodotVersion gdextension_interface_get_godot_version = nullptr;\nGDExtensionInterfaceMemAlloc gdextension_interface_mem_alloc = nullptr;\nGDExtensionInterfaceMemRealloc gdextension_interface_mem_realloc = nullptr;\nGDExtensionInterfaceMemFree gdextension_interface_mem_free = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "8d77606b994530cd93c268d85533b57138448bf3ef6f5f5733145fb8414a9551"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_mem_realloc' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 55,
          "offset": 32,
          "length": 33,
          "code": {
            "startLine": 53,
            "length": 33,
            "offset": 190,
            "surroundingCode": "GDExtensionInterfaceGetGodotVersion gdextension_interface_get_godot_version = nullptr;\nGDExtensionInterfaceMemAlloc gdextension_interface_mem_alloc = nullptr;\nGDExtensionInterfaceMemRealloc gdextension_interface_mem_realloc = nullptr;\nGDExtensionInterfaceMemFree gdextension_interface_mem_free = nullptr;\nGDExtensionInterfacePrintError gdextension_interface_print_error = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0d998ee322d8e755429c2a23afcee84fe6799944250d7354a72b40ea257f1655"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_mem_free' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 56,
          "offset": 29,
          "length": 30,
          "code": {
            "startLine": 54,
            "length": 30,
            "offset": 176,
            "surroundingCode": "GDExtensionInterfaceMemAlloc gdextension_interface_mem_alloc = nullptr;\nGDExtensionInterfaceMemRealloc gdextension_interface_mem_realloc = nullptr;\nGDExtensionInterfaceMemFree gdextension_interface_mem_free = nullptr;\nGDExtensionInterfacePrintError gdextension_interface_print_error = nullptr;\nGDExtensionInterfacePrintErrorWithMessage gdextension_interface_print_error_with_message = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "aad04b5868e959d0d6631b54ddff474b86d82dfa79907dae25dac0b2bf779d53"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_print_error' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 57,
          "offset": 32,
          "length": 33,
          "code": {
            "startLine": 55,
            "length": 33,
            "offset": 177,
            "surroundingCode": "GDExtensionInterfaceMemRealloc gdextension_interface_mem_realloc = nullptr;\nGDExtensionInterfaceMemFree gdextension_interface_mem_free = nullptr;\nGDExtensionInterfacePrintError gdextension_interface_print_error = nullptr;\nGDExtensionInterfacePrintErrorWithMessage gdextension_interface_print_error_with_message = nullptr;\nGDExtensionInterfacePrintWarning gdextension_interface_print_warning = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0d68dd57d8ff5c4150005139cd7ef7853ed1855d2f01b95d3b9a4b72a68e15ae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_print_error_with_message' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 58,
          "offset": 43,
          "length": 46,
          "code": {
            "startLine": 56,
            "length": 46,
            "offset": 188,
            "surroundingCode": "GDExtensionInterfaceMemFree gdextension_interface_mem_free = nullptr;\nGDExtensionInterfacePrintError gdextension_interface_print_error = nullptr;\nGDExtensionInterfacePrintErrorWithMessage gdextension_interface_print_error_with_message = nullptr;\nGDExtensionInterfacePrintWarning gdextension_interface_print_warning = nullptr;\nGDExtensionInterfacePrintWarningWithMessage gdextension_interface_print_warning_with_message = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "4749a3d9ecee367ea7d831ae19671e4c8a2a981d2f114f51e1a4a610feaac57a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_print_warning' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 59,
          "offset": 34,
          "length": 35,
          "code": {
            "startLine": 57,
            "length": 35,
            "offset": 209,
            "surroundingCode": "GDExtensionInterfacePrintError gdextension_interface_print_error = nullptr;\nGDExtensionInterfacePrintErrorWithMessage gdextension_interface_print_error_with_message = nullptr;\nGDExtensionInterfacePrintWarning gdextension_interface_print_warning = nullptr;\nGDExtensionInterfacePrintWarningWithMessage gdextension_interface_print_warning_with_message = nullptr;\nGDExtensionInterfacePrintScriptError gdextension_interface_print_script_error = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7f8c1d1db2352629b25fcdc0b44f68ed870391094c77fbc086b5d10e652de960"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_print_warning_with_message' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 60,
          "offset": 45,
          "length": 48,
          "code": {
            "startLine": 58,
            "length": 48,
            "offset": 224,
            "surroundingCode": "GDExtensionInterfacePrintErrorWithMessage gdextension_interface_print_error_with_message = nullptr;\nGDExtensionInterfacePrintWarning gdextension_interface_print_warning = nullptr;\nGDExtensionInterfacePrintWarningWithMessage gdextension_interface_print_warning_with_message = nullptr;\nGDExtensionInterfacePrintScriptError gdextension_interface_print_script_error = nullptr;\nGDExtensionInterfacePrintScriptErrorWithMessage gdextension_interface_print_script_error_with_message = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c3b5e34dd73b28b8e82f49dbad513da3bbb456901a93f97e4bebc2cb9f60b684"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_print_script_error' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 61,
          "offset": 38,
          "length": 40,
          "code": {
            "startLine": 59,
            "length": 40,
            "offset": 221,
            "surroundingCode": "GDExtensionInterfacePrintWarning gdextension_interface_print_warning = nullptr;\nGDExtensionInterfacePrintWarningWithMessage gdextension_interface_print_warning_with_message = nullptr;\nGDExtensionInterfacePrintScriptError gdextension_interface_print_script_error = nullptr;\nGDExtensionInterfacePrintScriptErrorWithMessage gdextension_interface_print_script_error_with_message = nullptr;\nGDExtensionInterfaceGetNativeStructSize gdextension_interface_get_native_struct_size = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "f25cc511450a421a10f0044da13c253ecc818a084cbcb100e75bcbea0e5669d0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_print_script_error_with_message' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 62,
          "offset": 49,
          "length": 53,
          "code": {
            "startLine": 60,
            "length": 53,
            "offset": 241,
            "surroundingCode": "GDExtensionInterfacePrintWarningWithMessage gdextension_interface_print_warning_with_message = nullptr;\nGDExtensionInterfacePrintScriptError gdextension_interface_print_script_error = nullptr;\nGDExtensionInterfacePrintScriptErrorWithMessage gdextension_interface_print_script_error_with_message = nullptr;\nGDExtensionInterfaceGetNativeStructSize gdextension_interface_get_native_struct_size = nullptr;\nGDExtensionInterfaceVariantNewCopy gdextension_interface_variant_new_copy = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "bf2e83379b13373d0ece056f8841bb60e04e2b4f5e256ca367b75d64bd42ca76"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_get_native_struct_size' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 63,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 61,
            "length": 44,
            "offset": 242,
            "surroundingCode": "GDExtensionInterfacePrintScriptError gdextension_interface_print_script_error = nullptr;\nGDExtensionInterfacePrintScriptErrorWithMessage gdextension_interface_print_script_error_with_message = nullptr;\nGDExtensionInterfaceGetNativeStructSize gdextension_interface_get_native_struct_size = nullptr;\nGDExtensionInterfaceVariantNewCopy gdextension_interface_variant_new_copy = nullptr;\nGDExtensionInterfaceVariantNewNil gdextension_interface_variant_new_nil = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "fd50f78ebdae0a9f20cafd19c7f3b21ba6ff02c907ddc680c1efa58f96f2835f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_new_copy' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 64,
          "offset": 36,
          "length": 38,
          "code": {
            "startLine": 62,
            "length": 38,
            "offset": 244,
            "surroundingCode": "GDExtensionInterfacePrintScriptErrorWithMessage gdextension_interface_print_script_error_with_message = nullptr;\nGDExtensionInterfaceGetNativeStructSize gdextension_interface_get_native_struct_size = nullptr;\nGDExtensionInterfaceVariantNewCopy gdextension_interface_variant_new_copy = nullptr;\nGDExtensionInterfaceVariantNewNil gdextension_interface_variant_new_nil = nullptr;\nGDExtensionInterfaceVariantDestroy gdextension_interface_variant_destroy = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "b9aad04d956c13cf9375d4dd47e5b1433cd14c0351af5f3f1af3759142f598e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_new_nil' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 65,
          "offset": 35,
          "length": 37,
          "code": {
            "startLine": 63,
            "length": 37,
            "offset": 215,
            "surroundingCode": "GDExtensionInterfaceGetNativeStructSize gdextension_interface_get_native_struct_size = nullptr;\nGDExtensionInterfaceVariantNewCopy gdextension_interface_variant_new_copy = nullptr;\nGDExtensionInterfaceVariantNewNil gdextension_interface_variant_new_nil = nullptr;\nGDExtensionInterfaceVariantDestroy gdextension_interface_variant_destroy = nullptr;\nGDExtensionInterfaceVariantCall gdextension_interface_variant_call = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0752ce6397d75b7af9fda75e900e0b090edab8943026dbcc5e05274cb3e71be3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_destroy' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 66,
          "offset": 36,
          "length": 37,
          "code": {
            "startLine": 64,
            "length": 37,
            "offset": 203,
            "surroundingCode": "GDExtensionInterfaceVariantNewCopy gdextension_interface_variant_new_copy = nullptr;\nGDExtensionInterfaceVariantNewNil gdextension_interface_variant_new_nil = nullptr;\nGDExtensionInterfaceVariantDestroy gdextension_interface_variant_destroy = nullptr;\nGDExtensionInterfaceVariantCall gdextension_interface_variant_call = nullptr;\nGDExtensionInterfaceVariantCallStatic gdextension_interface_variant_call_static = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7cc1574369f9ca8c462e5c96c955ce5b3a6d917daadf4b4f42388d75ef0d44a8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_call' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 67,
          "offset": 33,
          "length": 34,
          "code": {
            "startLine": 65,
            "length": 34,
            "offset": 199,
            "surroundingCode": "GDExtensionInterfaceVariantNewNil gdextension_interface_variant_new_nil = nullptr;\nGDExtensionInterfaceVariantDestroy gdextension_interface_variant_destroy = nullptr;\nGDExtensionInterfaceVariantCall gdextension_interface_variant_call = nullptr;\nGDExtensionInterfaceVariantCallStatic gdextension_interface_variant_call_static = nullptr;\nGDExtensionInterfaceVariantEvaluate gdextension_interface_variant_evaluate = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "eeeae29ed9da13cd0962f99accfde7d02a56c47a3a7f78e5123144d055e5a35d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_call_static' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 68,
          "offset": 39,
          "length": 41,
          "code": {
            "startLine": 66,
            "length": 41,
            "offset": 200,
            "surroundingCode": "GDExtensionInterfaceVariantDestroy gdextension_interface_variant_destroy = nullptr;\nGDExtensionInterfaceVariantCall gdextension_interface_variant_call = nullptr;\nGDExtensionInterfaceVariantCallStatic gdextension_interface_variant_call_static = nullptr;\nGDExtensionInterfaceVariantEvaluate gdextension_interface_variant_evaluate = nullptr;\nGDExtensionInterfaceVariantSet gdextension_interface_variant_set = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "e813db42bfd497c7fd223f2c22c1fa191606a9475fd29765d693b2afd387da57"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_evaluate' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 69,
          "offset": 37,
          "length": 38,
          "code": {
            "startLine": 67,
            "length": 38,
            "offset": 205,
            "surroundingCode": "GDExtensionInterfaceVariantCall gdextension_interface_variant_call = nullptr;\nGDExtensionInterfaceVariantCallStatic gdextension_interface_variant_call_static = nullptr;\nGDExtensionInterfaceVariantEvaluate gdextension_interface_variant_evaluate = nullptr;\nGDExtensionInterfaceVariantSet gdextension_interface_variant_set = nullptr;\nGDExtensionInterfaceVariantSetNamed gdextension_interface_variant_set_named = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "05fd88bcc613419fc8a80899507089dd674d6c4a5c0d562e2711357872caafc4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_set' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 70,
          "offset": 32,
          "length": 33,
          "code": {
            "startLine": 68,
            "length": 33,
            "offset": 208,
            "surroundingCode": "GDExtensionInterfaceVariantCallStatic gdextension_interface_variant_call_static = nullptr;\nGDExtensionInterfaceVariantEvaluate gdextension_interface_variant_evaluate = nullptr;\nGDExtensionInterfaceVariantSet gdextension_interface_variant_set = nullptr;\nGDExtensionInterfaceVariantSetNamed gdextension_interface_variant_set_named = nullptr;\nGDExtensionInterfaceVariantSetKeyed gdextension_interface_variant_set_keyed = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "a4a10840cbffb4ba5f8639ead87787a6335e1c9bdb4d2d3489f728b4f960f167"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_set_named' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 71,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 69,
            "length": 39,
            "offset": 198,
            "surroundingCode": "GDExtensionInterfaceVariantEvaluate gdextension_interface_variant_evaluate = nullptr;\nGDExtensionInterfaceVariantSet gdextension_interface_variant_set = nullptr;\nGDExtensionInterfaceVariantSetNamed gdextension_interface_variant_set_named = nullptr;\nGDExtensionInterfaceVariantSetKeyed gdextension_interface_variant_set_keyed = nullptr;\nGDExtensionInterfaceVariantSetIndexed gdextension_interface_variant_set_indexed = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "dc93df30cf1456d32d91f06b4b960b2995860694f4ed51d62cbd7be2db477d5d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_set_keyed' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 72,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 70,
            "length": 39,
            "offset": 199,
            "surroundingCode": "GDExtensionInterfaceVariantSet gdextension_interface_variant_set = nullptr;\nGDExtensionInterfaceVariantSetNamed gdextension_interface_variant_set_named = nullptr;\nGDExtensionInterfaceVariantSetKeyed gdextension_interface_variant_set_keyed = nullptr;\nGDExtensionInterfaceVariantSetIndexed gdextension_interface_variant_set_indexed = nullptr;\nGDExtensionInterfaceVariantGet gdextension_interface_variant_get = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "f45930a4e8583feeb599eeb5254d7a7e318a08a7140425a202f89214daa268d3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_set_indexed' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 73,
          "offset": 39,
          "length": 41,
          "code": {
            "startLine": 71,
            "length": 41,
            "offset": 212,
            "surroundingCode": "GDExtensionInterfaceVariantSetNamed gdextension_interface_variant_set_named = nullptr;\nGDExtensionInterfaceVariantSetKeyed gdextension_interface_variant_set_keyed = nullptr;\nGDExtensionInterfaceVariantSetIndexed gdextension_interface_variant_set_indexed = nullptr;\nGDExtensionInterfaceVariantGet gdextension_interface_variant_get = nullptr;\nGDExtensionInterfaceVariantGetNamed gdextension_interface_variant_get_named = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "e36b8aee3b02b7765b6ad4c46077e19bc8d09e914805181bd967916c9852d259"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 74,
          "offset": 32,
          "length": 33,
          "code": {
            "startLine": 72,
            "length": 33,
            "offset": 209,
            "surroundingCode": "GDExtensionInterfaceVariantSetKeyed gdextension_interface_variant_set_keyed = nullptr;\nGDExtensionInterfaceVariantSetIndexed gdextension_interface_variant_set_indexed = nullptr;\nGDExtensionInterfaceVariantGet gdextension_interface_variant_get = nullptr;\nGDExtensionInterfaceVariantGetNamed gdextension_interface_variant_get_named = nullptr;\nGDExtensionInterfaceVariantGetKeyed gdextension_interface_variant_get_keyed = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "8822af22207ec1cc8c2856672c1643d74db866cedb7e303c1a93429801023d2b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_named' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 75,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 73,
            "length": 39,
            "offset": 203,
            "surroundingCode": "GDExtensionInterfaceVariantSetIndexed gdextension_interface_variant_set_indexed = nullptr;\nGDExtensionInterfaceVariantGet gdextension_interface_variant_get = nullptr;\nGDExtensionInterfaceVariantGetNamed gdextension_interface_variant_get_named = nullptr;\nGDExtensionInterfaceVariantGetKeyed gdextension_interface_variant_get_keyed = nullptr;\nGDExtensionInterfaceVariantGetIndexed gdextension_interface_variant_get_indexed = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "41ca5481edca1546ce25983ef21646d349d94f22dd902112946ea43062ef9825"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_keyed' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 76,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 74,
            "length": 39,
            "offset": 199,
            "surroundingCode": "GDExtensionInterfaceVariantGet gdextension_interface_variant_get = nullptr;\nGDExtensionInterfaceVariantGetNamed gdextension_interface_variant_get_named = nullptr;\nGDExtensionInterfaceVariantGetKeyed gdextension_interface_variant_get_keyed = nullptr;\nGDExtensionInterfaceVariantGetIndexed gdextension_interface_variant_get_indexed = nullptr;\nGDExtensionInterfaceVariantIterInit gdextension_interface_variant_iter_init = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "23a30d509a4af3cbeb86e17bacc3bffc14e125bdbcfbf523356f3923d02b284e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_indexed' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 77,
          "offset": 39,
          "length": 41,
          "code": {
            "startLine": 75,
            "length": 41,
            "offset": 212,
            "surroundingCode": "GDExtensionInterfaceVariantGetNamed gdextension_interface_variant_get_named = nullptr;\nGDExtensionInterfaceVariantGetKeyed gdextension_interface_variant_get_keyed = nullptr;\nGDExtensionInterfaceVariantGetIndexed gdextension_interface_variant_get_indexed = nullptr;\nGDExtensionInterfaceVariantIterInit gdextension_interface_variant_iter_init = nullptr;\nGDExtensionInterfaceVariantIterNext gdextension_interface_variant_iter_next = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "67b310b3f50931658fa508ead81eb879c6b22008ae42ac005797b604d9f70ef9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_iter_init' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 78,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 76,
            "length": 39,
            "offset": 214,
            "surroundingCode": "GDExtensionInterfaceVariantGetKeyed gdextension_interface_variant_get_keyed = nullptr;\nGDExtensionInterfaceVariantGetIndexed gdextension_interface_variant_get_indexed = nullptr;\nGDExtensionInterfaceVariantIterInit gdextension_interface_variant_iter_init = nullptr;\nGDExtensionInterfaceVariantIterNext gdextension_interface_variant_iter_next = nullptr;\nGDExtensionInterfaceVariantIterGet gdextension_interface_variant_iter_get = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "228c51924a8d50fc5d10ad489d7393ec730e1dcb607b322a14a733e234925730"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_iter_next' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 79,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 77,
            "length": 39,
            "offset": 214,
            "surroundingCode": "GDExtensionInterfaceVariantGetIndexed gdextension_interface_variant_get_indexed = nullptr;\nGDExtensionInterfaceVariantIterInit gdextension_interface_variant_iter_init = nullptr;\nGDExtensionInterfaceVariantIterNext gdextension_interface_variant_iter_next = nullptr;\nGDExtensionInterfaceVariantIterGet gdextension_interface_variant_iter_get = nullptr;\nGDExtensionInterfaceVariantHash gdextension_interface_variant_hash = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "700f33f58092be7f3c7c132f9c0d4cb9c1bdc8f165c5efbcf37ff6bdf4cf7f16"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_iter_get' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 80,
          "offset": 36,
          "length": 38,
          "code": {
            "startLine": 78,
            "length": 38,
            "offset": 209,
            "surroundingCode": "GDExtensionInterfaceVariantIterInit gdextension_interface_variant_iter_init = nullptr;\nGDExtensionInterfaceVariantIterNext gdextension_interface_variant_iter_next = nullptr;\nGDExtensionInterfaceVariantIterGet gdextension_interface_variant_iter_get = nullptr;\nGDExtensionInterfaceVariantHash gdextension_interface_variant_hash = nullptr;\nGDExtensionInterfaceVariantRecursiveHash gdextension_interface_variant_recursive_hash = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9b9c81afc9e62d8ec3cfd561b9fbdc3368359335ebdbfd3c30ff1e8518965e33"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_hash' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 81,
          "offset": 33,
          "length": 34,
          "code": {
            "startLine": 79,
            "length": 34,
            "offset": 204,
            "surroundingCode": "GDExtensionInterfaceVariantIterNext gdextension_interface_variant_iter_next = nullptr;\nGDExtensionInterfaceVariantIterGet gdextension_interface_variant_iter_get = nullptr;\nGDExtensionInterfaceVariantHash gdextension_interface_variant_hash = nullptr;\nGDExtensionInterfaceVariantRecursiveHash gdextension_interface_variant_recursive_hash = nullptr;\nGDExtensionInterfaceVariantHashCompare gdextension_interface_variant_hash_compare = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "f756001b13c77dff92c385c827d0be5e11c73f67c469c3ea19ef7e455a3d9859"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_recursive_hash' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 82,
          "offset": 42,
          "length": 44,
          "code": {
            "startLine": 80,
            "length": 44,
            "offset": 204,
            "surroundingCode": "GDExtensionInterfaceVariantIterGet gdextension_interface_variant_iter_get = nullptr;\nGDExtensionInterfaceVariantHash gdextension_interface_variant_hash = nullptr;\nGDExtensionInterfaceVariantRecursiveHash gdextension_interface_variant_recursive_hash = nullptr;\nGDExtensionInterfaceVariantHashCompare gdextension_interface_variant_hash_compare = nullptr;\nGDExtensionInterfaceVariantBooleanize gdextension_interface_variant_booleanize = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ca03ec41c69ae988014512062a7c28e650e4d2810634210f48fc72aa95221cf3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_hash_compare' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 83,
          "offset": 40,
          "length": 42,
          "code": {
            "startLine": 81,
            "length": 42,
            "offset": 214,
            "surroundingCode": "GDExtensionInterfaceVariantHash gdextension_interface_variant_hash = nullptr;\nGDExtensionInterfaceVariantRecursiveHash gdextension_interface_variant_recursive_hash = nullptr;\nGDExtensionInterfaceVariantHashCompare gdextension_interface_variant_hash_compare = nullptr;\nGDExtensionInterfaceVariantBooleanize gdextension_interface_variant_booleanize = nullptr;\nGDExtensionInterfaceVariantDuplicate gdextension_interface_variant_duplicate = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c03b25f282dd4d0bbca35a97b3c902b38f436a0fdbdcfed7d9f4218285474bda"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_booleanize' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 84,
          "offset": 39,
          "length": 40,
          "code": {
            "startLine": 82,
            "length": 40,
            "offset": 228,
            "surroundingCode": "GDExtensionInterfaceVariantRecursiveHash gdextension_interface_variant_recursive_hash = nullptr;\nGDExtensionInterfaceVariantHashCompare gdextension_interface_variant_hash_compare = nullptr;\nGDExtensionInterfaceVariantBooleanize gdextension_interface_variant_booleanize = nullptr;\nGDExtensionInterfaceVariantDuplicate gdextension_interface_variant_duplicate = nullptr;\nGDExtensionInterfaceVariantStringify gdextension_interface_variant_stringify = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "bb63be13828e4d15b6dd1f3d80522464a4553e35c895edb18f7824e7e27b1671"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_duplicate' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 85,
          "offset": 38,
          "length": 39,
          "code": {
            "startLine": 83,
            "length": 39,
            "offset": 220,
            "surroundingCode": "GDExtensionInterfaceVariantHashCompare gdextension_interface_variant_hash_compare = nullptr;\nGDExtensionInterfaceVariantBooleanize gdextension_interface_variant_booleanize = nullptr;\nGDExtensionInterfaceVariantDuplicate gdextension_interface_variant_duplicate = nullptr;\nGDExtensionInterfaceVariantStringify gdextension_interface_variant_stringify = nullptr;\nGDExtensionInterfaceVariantGetType gdextension_interface_variant_get_type = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "02abcde67ecfeb823cb87b51bdeea3ca51d597205c2da6abce364c606b5d94d0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_stringify' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 86,
          "offset": 38,
          "length": 39,
          "code": {
            "startLine": 84,
            "length": 39,
            "offset": 215,
            "surroundingCode": "GDExtensionInterfaceVariantBooleanize gdextension_interface_variant_booleanize = nullptr;\nGDExtensionInterfaceVariantDuplicate gdextension_interface_variant_duplicate = nullptr;\nGDExtensionInterfaceVariantStringify gdextension_interface_variant_stringify = nullptr;\nGDExtensionInterfaceVariantGetType gdextension_interface_variant_get_type = nullptr;\nGDExtensionInterfaceVariantHasMethod gdextension_interface_variant_has_method = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "21ca59807e63330e34129ddb886445367a916e99f509abecdf277902bbd54d67"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_type' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 87,
          "offset": 36,
          "length": 38,
          "code": {
            "startLine": 85,
            "length": 38,
            "offset": 211,
            "surroundingCode": "GDExtensionInterfaceVariantDuplicate gdextension_interface_variant_duplicate = nullptr;\nGDExtensionInterfaceVariantStringify gdextension_interface_variant_stringify = nullptr;\nGDExtensionInterfaceVariantGetType gdextension_interface_variant_get_type = nullptr;\nGDExtensionInterfaceVariantHasMethod gdextension_interface_variant_has_method = nullptr;\nGDExtensionInterfaceVariantHasMember gdextension_interface_variant_has_member = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d536f2d1b6f81b5754079878b10a6a5b82081de8519e93b17058e25af2986fa3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_has_method' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 88,
          "offset": 38,
          "length": 40,
          "code": {
            "startLine": 86,
            "length": 40,
            "offset": 210,
            "surroundingCode": "GDExtensionInterfaceVariantStringify gdextension_interface_variant_stringify = nullptr;\nGDExtensionInterfaceVariantGetType gdextension_interface_variant_get_type = nullptr;\nGDExtensionInterfaceVariantHasMethod gdextension_interface_variant_has_method = nullptr;\nGDExtensionInterfaceVariantHasMember gdextension_interface_variant_has_member = nullptr;\nGDExtensionInterfaceVariantHasKey gdextension_interface_variant_has_key = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7464655f24ae10193c544e94a0fa7d5b5e3cf6193f782f98731703bd4ed0aeed"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_has_member' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 89,
          "offset": 38,
          "length": 40,
          "code": {
            "startLine": 87,
            "length": 40,
            "offset": 211,
            "surroundingCode": "GDExtensionInterfaceVariantGetType gdextension_interface_variant_get_type = nullptr;\nGDExtensionInterfaceVariantHasMethod gdextension_interface_variant_has_method = nullptr;\nGDExtensionInterfaceVariantHasMember gdextension_interface_variant_has_member = nullptr;\nGDExtensionInterfaceVariantHasKey gdextension_interface_variant_has_key = nullptr;\nGDExtensionInterfaceVariantGetTypeName gdextension_interface_variant_get_type_name = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "70c6c6db2f814706d652cd18d266c23e81917f452a128f5693086a693393e31c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_has_key' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 90,
          "offset": 35,
          "length": 37,
          "code": {
            "startLine": 88,
            "length": 37,
            "offset": 212,
            "surroundingCode": "GDExtensionInterfaceVariantHasMethod gdextension_interface_variant_has_method = nullptr;\nGDExtensionInterfaceVariantHasMember gdextension_interface_variant_has_member = nullptr;\nGDExtensionInterfaceVariantHasKey gdextension_interface_variant_has_key = nullptr;\nGDExtensionInterfaceVariantGetTypeName gdextension_interface_variant_get_type_name = nullptr;\nGDExtensionInterfaceVariantCanConvert gdextension_interface_variant_can_convert = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "64bf1740d2830b0ce3823fa505b7e6c27dcae7d1ed33b00c2086b559220daac6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_type_name' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 91,
          "offset": 40,
          "length": 43,
          "code": {
            "startLine": 89,
            "length": 43,
            "offset": 211,
            "surroundingCode": "GDExtensionInterfaceVariantHasMember gdextension_interface_variant_has_member = nullptr;\nGDExtensionInterfaceVariantHasKey gdextension_interface_variant_has_key = nullptr;\nGDExtensionInterfaceVariantGetTypeName gdextension_interface_variant_get_type_name = nullptr;\nGDExtensionInterfaceVariantCanConvert gdextension_interface_variant_can_convert = nullptr;\nGDExtensionInterfaceVariantCanConvertStrict gdextension_interface_variant_can_convert_strict = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "5e19773901bc25fe838547d0a446be69df32988909ed2b2d9a62baac66ed3c4b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_can_convert' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 92,
          "offset": 39,
          "length": 41,
          "code": {
            "startLine": 90,
            "length": 41,
            "offset": 215,
            "surroundingCode": "GDExtensionInterfaceVariantHasKey gdextension_interface_variant_has_key = nullptr;\nGDExtensionInterfaceVariantGetTypeName gdextension_interface_variant_get_type_name = nullptr;\nGDExtensionInterfaceVariantCanConvert gdextension_interface_variant_can_convert = nullptr;\nGDExtensionInterfaceVariantCanConvertStrict gdextension_interface_variant_can_convert_strict = nullptr;\nGDExtensionInterfaceGetVariantFromTypeConstructor gdextension_interface_get_variant_from_type_constructor = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "39b21246cfcc9b8618e2fa21861c493101b5f3deba572df62ba3c296e4b46b0f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_can_convert_strict' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 93,
          "offset": 45,
          "length": 48,
          "code": {
            "startLine": 91,
            "length": 48,
            "offset": 229,
            "surroundingCode": "GDExtensionInterfaceVariantGetTypeName gdextension_interface_variant_get_type_name = nullptr;\nGDExtensionInterfaceVariantCanConvert gdextension_interface_variant_can_convert = nullptr;\nGDExtensionInterfaceVariantCanConvertStrict gdextension_interface_variant_can_convert_strict = nullptr;\nGDExtensionInterfaceGetVariantFromTypeConstructor gdextension_interface_get_variant_from_type_constructor = nullptr;\nGDExtensionInterfaceGetVariantToTypeConstructor gdextension_interface_get_variant_to_type_constructor = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "68e2e1d89e64e63749d2b252b2e3287f059306bf1a3f552eb391cd2879d0638b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_get_variant_from_type_constructor' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 94,
          "offset": 51,
          "length": 55,
          "code": {
            "startLine": 92,
            "length": 55,
            "offset": 245,
            "surroundingCode": "GDExtensionInterfaceVariantCanConvert gdextension_interface_variant_can_convert = nullptr;\nGDExtensionInterfaceVariantCanConvertStrict gdextension_interface_variant_can_convert_strict = nullptr;\nGDExtensionInterfaceGetVariantFromTypeConstructor gdextension_interface_get_variant_from_type_constructor = nullptr;\nGDExtensionInterfaceGetVariantToTypeConstructor gdextension_interface_get_variant_to_type_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrOperatorEvaluator gdextension_interface_variant_get_ptr_operator_evaluator = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9c45a7d68755c5cd90d18889068028710aa3bc01da30c5c304a418c88e8c77fc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_get_variant_to_type_constructor' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 95,
          "offset": 49,
          "length": 53,
          "code": {
            "startLine": 93,
            "length": 53,
            "offset": 269,
            "surroundingCode": "GDExtensionInterfaceVariantCanConvertStrict gdextension_interface_variant_can_convert_strict = nullptr;\nGDExtensionInterfaceGetVariantFromTypeConstructor gdextension_interface_get_variant_from_type_constructor = nullptr;\nGDExtensionInterfaceGetVariantToTypeConstructor gdextension_interface_get_variant_to_type_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrOperatorEvaluator gdextension_interface_variant_get_ptr_operator_evaluator = nullptr;\nGDExtensionInterfaceVariantGetPtrBuiltinMethod gdextension_interface_variant_get_ptr_builtin_method = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0b80d5fc4d0315b0142e3f369329774fc472186812f472c6b67530c1d0e84252"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_operator_evaluator' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 96,
          "offset": 52,
          "length": 56,
          "code": {
            "startLine": 94,
            "length": 56,
            "offset": 281,
            "surroundingCode": "GDExtensionInterfaceGetVariantFromTypeConstructor gdextension_interface_get_variant_from_type_constructor = nullptr;\nGDExtensionInterfaceGetVariantToTypeConstructor gdextension_interface_get_variant_to_type_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrOperatorEvaluator gdextension_interface_variant_get_ptr_operator_evaluator = nullptr;\nGDExtensionInterfaceVariantGetPtrBuiltinMethod gdextension_interface_variant_get_ptr_builtin_method = nullptr;\nGDExtensionInterfaceVariantGetPtrConstructor gdextension_interface_variant_get_ptr_constructor = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "f0c62d857ffcbb712ef545e9464df8f34eee8c1daa50615222f7c1d85de10303"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_builtin_method' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 97,
          "offset": 48,
          "length": 52,
          "code": {
            "startLine": 95,
            "length": 52,
            "offset": 279,
            "surroundingCode": "GDExtensionInterfaceGetVariantToTypeConstructor gdextension_interface_get_variant_to_type_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrOperatorEvaluator gdextension_interface_variant_get_ptr_operator_evaluator = nullptr;\nGDExtensionInterfaceVariantGetPtrBuiltinMethod gdextension_interface_variant_get_ptr_builtin_method = nullptr;\nGDExtensionInterfaceVariantGetPtrConstructor gdextension_interface_variant_get_ptr_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrDestructor gdextension_interface_variant_get_ptr_destructor = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "67ee09cd82d715ad808d27065a4710fb9d250c06734f46647a7eb8a8f5fa5ac4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_constructor' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 98,
          "offset": 46,
          "length": 49,
          "code": {
            "startLine": 96,
            "length": 49,
            "offset": 275,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrOperatorEvaluator gdextension_interface_variant_get_ptr_operator_evaluator = nullptr;\nGDExtensionInterfaceVariantGetPtrBuiltinMethod gdextension_interface_variant_get_ptr_builtin_method = nullptr;\nGDExtensionInterfaceVariantGetPtrConstructor gdextension_interface_variant_get_ptr_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrDestructor gdextension_interface_variant_get_ptr_destructor = nullptr;\nGDExtensionInterfaceVariantConstruct gdextension_interface_variant_construct = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9bc9188a4718893da163a036ded2422c9efc577a0e5cad6aba992bbf64cc9263"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_destructor' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 99,
          "offset": 45,
          "length": 48,
          "code": {
            "startLine": 97,
            "length": 48,
            "offset": 261,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrBuiltinMethod gdextension_interface_variant_get_ptr_builtin_method = nullptr;\nGDExtensionInterfaceVariantGetPtrConstructor gdextension_interface_variant_get_ptr_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrDestructor gdextension_interface_variant_get_ptr_destructor = nullptr;\nGDExtensionInterfaceVariantConstruct gdextension_interface_variant_construct = nullptr;\nGDExtensionInterfaceVariantGetPtrSetter gdextension_interface_variant_get_ptr_setter = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "eae6adb7fa12ed732d02f0d71ab0168c4a13257a2ccc29704f71e499b2a38af1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_construct' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 100,
          "offset": 38,
          "length": 39,
          "code": {
            "startLine": 98,
            "length": 39,
            "offset": 247,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrConstructor gdextension_interface_variant_get_ptr_constructor = nullptr;\nGDExtensionInterfaceVariantGetPtrDestructor gdextension_interface_variant_get_ptr_destructor = nullptr;\nGDExtensionInterfaceVariantConstruct gdextension_interface_variant_construct = nullptr;\nGDExtensionInterfaceVariantGetPtrSetter gdextension_interface_variant_get_ptr_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrGetter gdextension_interface_variant_get_ptr_getter = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "fceb0897721dd2f28c4896d681c7417a112675ff20f44a578e8722e57c7893a8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_setter' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 101,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 99,
            "length": 44,
            "offset": 232,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrDestructor gdextension_interface_variant_get_ptr_destructor = nullptr;\nGDExtensionInterfaceVariantConstruct gdextension_interface_variant_construct = nullptr;\nGDExtensionInterfaceVariantGetPtrSetter gdextension_interface_variant_get_ptr_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrGetter gdextension_interface_variant_get_ptr_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedSetter gdextension_interface_variant_get_ptr_indexed_setter = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c46bb050f650400c89638d2413f2384768d5ba3a5c0e5e221493c28f96449191"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_getter' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 102,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 100,
            "length": 44,
            "offset": 224,
            "surroundingCode": "GDExtensionInterfaceVariantConstruct gdextension_interface_variant_construct = nullptr;\nGDExtensionInterfaceVariantGetPtrSetter gdextension_interface_variant_get_ptr_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrGetter gdextension_interface_variant_get_ptr_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedSetter gdextension_interface_variant_get_ptr_indexed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedGetter gdextension_interface_variant_get_ptr_indexed_getter = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "e16362fb06b4402b293f87cf49dd7fb96bdf1bca7c5c50996a5cf54b527db272"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_indexed_setter' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 103,
          "offset": 48,
          "length": 52,
          "code": {
            "startLine": 101,
            "length": 52,
            "offset": 239,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrSetter gdextension_interface_variant_get_ptr_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrGetter gdextension_interface_variant_get_ptr_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedSetter gdextension_interface_variant_get_ptr_indexed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedGetter gdextension_interface_variant_get_ptr_indexed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedSetter gdextension_interface_variant_get_ptr_keyed_setter = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "578dc2e8852fb9d6df16b4c1e0005cb22e454d769f527e4a86d622b47b700855"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_indexed_getter' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 104,
          "offset": 48,
          "length": 52,
          "code": {
            "startLine": 102,
            "length": 52,
            "offset": 254,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrGetter gdextension_interface_variant_get_ptr_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedSetter gdextension_interface_variant_get_ptr_indexed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedGetter gdextension_interface_variant_get_ptr_indexed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedSetter gdextension_interface_variant_get_ptr_keyed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedGetter gdextension_interface_variant_get_ptr_keyed_getter = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c59e3d1449f1ff24332b26fbb4f5ab24c0d5026e13345787821210fbdb60f743"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_keyed_setter' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 105,
          "offset": 46,
          "length": 50,
          "code": {
            "startLine": 103,
            "length": 50,
            "offset": 267,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrIndexedSetter gdextension_interface_variant_get_ptr_indexed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrIndexedGetter gdextension_interface_variant_get_ptr_indexed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedSetter gdextension_interface_variant_get_ptr_keyed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedGetter gdextension_interface_variant_get_ptr_keyed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedChecker gdextension_interface_variant_get_ptr_keyed_checker = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "a84eb922856af047e63bd7fba215710b5b4b7a27b36bd6efb9d5816686286a2b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_keyed_getter' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 106,
          "offset": 46,
          "length": 50,
          "code": {
            "startLine": 104,
            "length": 50,
            "offset": 263,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrIndexedGetter gdextension_interface_variant_get_ptr_indexed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedSetter gdextension_interface_variant_get_ptr_keyed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedGetter gdextension_interface_variant_get_ptr_keyed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedChecker gdextension_interface_variant_get_ptr_keyed_checker = nullptr;\nGDExtensionInterfaceVariantGetConstantValue gdextension_interface_variant_get_constant_value = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "deea0c77beb34140171e4748829888a0e278a8903dbd68293150ec0839949100"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_keyed_checker' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 107,
          "offset": 47,
          "length": 51,
          "code": {
            "startLine": 105,
            "length": 51,
            "offset": 260,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrKeyedSetter gdextension_interface_variant_get_ptr_keyed_setter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedGetter gdextension_interface_variant_get_ptr_keyed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedChecker gdextension_interface_variant_get_ptr_keyed_checker = nullptr;\nGDExtensionInterfaceVariantGetConstantValue gdextension_interface_variant_get_constant_value = nullptr;\nGDExtensionInterfaceVariantGetPtrUtilityFunction gdextension_interface_variant_get_ptr_utility_function = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9a4f68e62abd307615f0dd8c94af132ae6299aa5b0b2761ca968089c5c45e706"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_constant_value' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 108,
          "offset": 45,
          "length": 48,
          "code": {
            "startLine": 106,
            "length": 48,
            "offset": 260,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrKeyedGetter gdextension_interface_variant_get_ptr_keyed_getter = nullptr;\nGDExtensionInterfaceVariantGetPtrKeyedChecker gdextension_interface_variant_get_ptr_keyed_checker = nullptr;\nGDExtensionInterfaceVariantGetConstantValue gdextension_interface_variant_get_constant_value = nullptr;\nGDExtensionInterfaceVariantGetPtrUtilityFunction gdextension_interface_variant_get_ptr_utility_function = nullptr;\nGDExtensionInterfaceStringNewWithLatin1Chars gdextension_interface_string_new_with_latin1_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "12bdb1421eae6fa3024dbf0bcdeecb4f934388a8d178698cb2e5c6c3dc1741fc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_variant_get_ptr_utility_function' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 109,
          "offset": 50,
          "length": 54,
          "code": {
            "startLine": 107,
            "length": 54,
            "offset": 262,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrKeyedChecker gdextension_interface_variant_get_ptr_keyed_checker = nullptr;\nGDExtensionInterfaceVariantGetConstantValue gdextension_interface_variant_get_constant_value = nullptr;\nGDExtensionInterfaceVariantGetPtrUtilityFunction gdextension_interface_variant_get_ptr_utility_function = nullptr;\nGDExtensionInterfaceStringNewWithLatin1Chars gdextension_interface_string_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf8Chars gdextension_interface_string_new_with_utf8_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "337ade329583fb649a7791d27df69e4f60efb367bd979da62ec4ef59f266a447"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_latin1_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 110,
          "offset": 46,
          "length": 50,
          "code": {
            "startLine": 108,
            "length": 50,
            "offset": 264,
            "surroundingCode": "GDExtensionInterfaceVariantGetConstantValue gdextension_interface_variant_get_constant_value = nullptr;\nGDExtensionInterfaceVariantGetPtrUtilityFunction gdextension_interface_variant_get_ptr_utility_function = nullptr;\nGDExtensionInterfaceStringNewWithLatin1Chars gdextension_interface_string_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf8Chars gdextension_interface_string_new_with_utf8_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf16Chars gdextension_interface_string_new_with_utf16_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "637704c3ad4fc32bfb51b8d228a77919766e33ad2b4ad8cd30229959295093bc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf8_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 111,
          "offset": 44,
          "length": 48,
          "code": {
            "startLine": 109,
            "length": 48,
            "offset": 265,
            "surroundingCode": "GDExtensionInterfaceVariantGetPtrUtilityFunction gdextension_interface_variant_get_ptr_utility_function = nullptr;\nGDExtensionInterfaceStringNewWithLatin1Chars gdextension_interface_string_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf8Chars gdextension_interface_string_new_with_utf8_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf16Chars gdextension_interface_string_new_with_utf16_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf32Chars gdextension_interface_string_new_with_utf32_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "46abea075b7529c2fbc7c818b1142d3a3668c30851f26ccec101fe862b771281"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf16_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 112,
          "offset": 45,
          "length": 49,
          "code": {
            "startLine": 110,
            "length": 49,
            "offset": 254,
            "surroundingCode": "GDExtensionInterfaceStringNewWithLatin1Chars gdextension_interface_string_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf8Chars gdextension_interface_string_new_with_utf8_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf16Chars gdextension_interface_string_new_with_utf16_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf32Chars gdextension_interface_string_new_with_utf32_chars = nullptr;\nGDExtensionInterfaceStringNewWithWideChars gdextension_interface_string_new_with_wide_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "073436a4a97ea8c5d3da84ab79cab56c445f4711423e23c1d722003f4044cb67"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf32_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 113,
          "offset": 45,
          "length": 49,
          "code": {
            "startLine": 111,
            "length": 49,
            "offset": 252,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf8Chars gdextension_interface_string_new_with_utf8_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf16Chars gdextension_interface_string_new_with_utf16_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf32Chars gdextension_interface_string_new_with_utf32_chars = nullptr;\nGDExtensionInterfaceStringNewWithWideChars gdextension_interface_string_new_with_wide_chars = nullptr;\nGDExtensionInterfaceStringNewWithLatin1CharsAndLen gdextension_interface_string_new_with_latin1_chars_and_len = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "3a3001603e16300138a0ccf03e07a47fb155a163ad8e38689dd34617ee4601b6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_wide_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 114,
          "offset": 44,
          "length": 48,
          "code": {
            "startLine": 112,
            "length": 48,
            "offset": 253,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf16Chars gdextension_interface_string_new_with_utf16_chars = nullptr;\nGDExtensionInterfaceStringNewWithUtf32Chars gdextension_interface_string_new_with_utf32_chars = nullptr;\nGDExtensionInterfaceStringNewWithWideChars gdextension_interface_string_new_with_wide_chars = nullptr;\nGDExtensionInterfaceStringNewWithLatin1CharsAndLen gdextension_interface_string_new_with_latin1_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen gdextension_interface_string_new_with_utf8_chars_and_len = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9bd961861902bfcb075d27c6e8e93332e53f2c4badcc63c0b0ccc6c3f5ff9eb6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_latin1_chars_and_len' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 115,
          "offset": 52,
          "length": 58,
          "code": {
            "startLine": 113,
            "length": 58,
            "offset": 259,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf32Chars gdextension_interface_string_new_with_utf32_chars = nullptr;\nGDExtensionInterfaceStringNewWithWideChars gdextension_interface_string_new_with_wide_chars = nullptr;\nGDExtensionInterfaceStringNewWithLatin1CharsAndLen gdextension_interface_string_new_with_latin1_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen gdextension_interface_string_new_with_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen2 gdextension_interface_string_new_with_utf8_chars_and_len2 = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "305b578cd0f50b2afcb1a246b95566d153173ffa79dcf5a2c0c19bb476dda4bd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf8_chars_and_len' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 116,
          "offset": 50,
          "length": 56,
          "code": {
            "startLine": 114,
            "length": 56,
            "offset": 273,
            "surroundingCode": "GDExtensionInterfaceStringNewWithWideChars gdextension_interface_string_new_with_wide_chars = nullptr;\nGDExtensionInterfaceStringNewWithLatin1CharsAndLen gdextension_interface_string_new_with_latin1_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen gdextension_interface_string_new_with_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen2 gdextension_interface_string_new_with_utf8_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen gdextension_interface_string_new_with_utf16_chars_and_len = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "e0f0392b3417caa0675c316469ffd4f0edb5b5ab8b54d13ba34a6c58428e218b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf8_chars_and_len2' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 117,
          "offset": 51,
          "length": 57,
          "code": {
            "startLine": 115,
            "length": 57,
            "offset": 288,
            "surroundingCode": "GDExtensionInterfaceStringNewWithLatin1CharsAndLen gdextension_interface_string_new_with_latin1_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen gdextension_interface_string_new_with_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen2 gdextension_interface_string_new_with_utf8_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen gdextension_interface_string_new_with_utf16_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen2 gdextension_interface_string_new_with_utf16_chars_and_len2 = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7176bdd85433b055edaab780698e02f7b3c847e37612ffa2b1dbeaab8be3633c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf16_chars_and_len' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 118,
          "offset": 51,
          "length": 57,
          "code": {
            "startLine": 116,
            "length": 57,
            "offset": 286,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf8CharsAndLen gdextension_interface_string_new_with_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf8CharsAndLen2 gdextension_interface_string_new_with_utf8_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen gdextension_interface_string_new_with_utf16_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen2 gdextension_interface_string_new_with_utf16_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf32CharsAndLen gdextension_interface_string_new_with_utf32_chars_and_len = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d05f3a50ac44003f1a24bca27fb90e9ffbdd2e576e2af8aa5b234f89380ff55b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf16_chars_and_len2' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 119,
          "offset": 52,
          "length": 58,
          "code": {
            "startLine": 117,
            "length": 58,
            "offset": 289,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf8CharsAndLen2 gdextension_interface_string_new_with_utf8_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen gdextension_interface_string_new_with_utf16_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen2 gdextension_interface_string_new_with_utf16_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf32CharsAndLen gdextension_interface_string_new_with_utf32_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithWideCharsAndLen gdextension_interface_string_new_with_wide_chars_and_len = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9f3e834839ae9d148ac759ff4a8fa8067b73d9a9cef801e50c3182813c0d6fcc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_utf32_chars_and_len' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 120,
          "offset": 51,
          "length": 57,
          "code": {
            "startLine": 118,
            "length": 57,
            "offset": 290,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf16CharsAndLen gdextension_interface_string_new_with_utf16_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithUtf16CharsAndLen2 gdextension_interface_string_new_with_utf16_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf32CharsAndLen gdextension_interface_string_new_with_utf32_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithWideCharsAndLen gdextension_interface_string_new_with_wide_chars_and_len = nullptr;\nGDExtensionInterfaceStringToLatin1Chars gdextension_interface_string_to_latin1_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "33f7773d6ee22f100a6ed65cf80fc554a7493d4c430999384fe93ebbc0c2ec05"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_new_with_wide_chars_and_len' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 121,
          "offset": 50,
          "length": 56,
          "code": {
            "startLine": 119,
            "length": 56,
            "offset": 289,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf16CharsAndLen2 gdextension_interface_string_new_with_utf16_chars_and_len2 = nullptr;\nGDExtensionInterfaceStringNewWithUtf32CharsAndLen gdextension_interface_string_new_with_utf32_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithWideCharsAndLen gdextension_interface_string_new_with_wide_chars_and_len = nullptr;\nGDExtensionInterfaceStringToLatin1Chars gdextension_interface_string_to_latin1_chars = nullptr;\nGDExtensionInterfaceStringToUtf8Chars gdextension_interface_string_to_utf8_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "311e4a5cda077d5af6181469e3a7d81ea32e7fff93c0c7e23d9d591804f69988"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_to_latin1_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 122,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 120,
            "length": 44,
            "offset": 276,
            "surroundingCode": "GDExtensionInterfaceStringNewWithUtf32CharsAndLen gdextension_interface_string_new_with_utf32_chars_and_len = nullptr;\nGDExtensionInterfaceStringNewWithWideCharsAndLen gdextension_interface_string_new_with_wide_chars_and_len = nullptr;\nGDExtensionInterfaceStringToLatin1Chars gdextension_interface_string_to_latin1_chars = nullptr;\nGDExtensionInterfaceStringToUtf8Chars gdextension_interface_string_to_utf8_chars = nullptr;\nGDExtensionInterfaceStringToUtf16Chars gdextension_interface_string_to_utf16_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d7a49ecf68c8f32aab587de288ca1f40cd8e56bad434426e7a95b552119d472a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_to_utf8_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 123,
          "offset": 39,
          "length": 42,
          "code": {
            "startLine": 121,
            "length": 42,
            "offset": 251,
            "surroundingCode": "GDExtensionInterfaceStringNewWithWideCharsAndLen gdextension_interface_string_new_with_wide_chars_and_len = nullptr;\nGDExtensionInterfaceStringToLatin1Chars gdextension_interface_string_to_latin1_chars = nullptr;\nGDExtensionInterfaceStringToUtf8Chars gdextension_interface_string_to_utf8_chars = nullptr;\nGDExtensionInterfaceStringToUtf16Chars gdextension_interface_string_to_utf16_chars = nullptr;\nGDExtensionInterfaceStringToUtf32Chars gdextension_interface_string_to_utf32_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "cb4ba9956149a9d3bfb242a194d541779c3c272982e32667beffb21a92110d04"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_to_utf16_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 124,
          "offset": 40,
          "length": 43,
          "code": {
            "startLine": 122,
            "length": 43,
            "offset": 227,
            "surroundingCode": "GDExtensionInterfaceStringToLatin1Chars gdextension_interface_string_to_latin1_chars = nullptr;\nGDExtensionInterfaceStringToUtf8Chars gdextension_interface_string_to_utf8_chars = nullptr;\nGDExtensionInterfaceStringToUtf16Chars gdextension_interface_string_to_utf16_chars = nullptr;\nGDExtensionInterfaceStringToUtf32Chars gdextension_interface_string_to_utf32_chars = nullptr;\nGDExtensionInterfaceStringToWideChars gdextension_interface_string_to_wide_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "75a068b04d9c765fdbf82605f9f936fa77f86700eb4c347654b002b90a03b96c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_to_utf32_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 125,
          "offset": 40,
          "length": 43,
          "code": {
            "startLine": 123,
            "length": 43,
            "offset": 225,
            "surroundingCode": "GDExtensionInterfaceStringToUtf8Chars gdextension_interface_string_to_utf8_chars = nullptr;\nGDExtensionInterfaceStringToUtf16Chars gdextension_interface_string_to_utf16_chars = nullptr;\nGDExtensionInterfaceStringToUtf32Chars gdextension_interface_string_to_utf32_chars = nullptr;\nGDExtensionInterfaceStringToWideChars gdextension_interface_string_to_wide_chars = nullptr;\nGDExtensionInterfaceStringOperatorIndex gdextension_interface_string_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "fbee27dbf935dfac9ad1709e9b8b50d1b2daf22677179f7368cc3a113ac81bf9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_to_wide_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 126,
          "offset": 39,
          "length": 42,
          "code": {
            "startLine": 124,
            "length": 42,
            "offset": 226,
            "surroundingCode": "GDExtensionInterfaceStringToUtf16Chars gdextension_interface_string_to_utf16_chars = nullptr;\nGDExtensionInterfaceStringToUtf32Chars gdextension_interface_string_to_utf32_chars = nullptr;\nGDExtensionInterfaceStringToWideChars gdextension_interface_string_to_wide_chars = nullptr;\nGDExtensionInterfaceStringOperatorIndex gdextension_interface_string_operator_index = nullptr;\nGDExtensionInterfaceStringOperatorIndexConst gdextension_interface_string_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "cb8d411316ab5e8f0a04719ab3077515ffca71ec9be0674015d14a4694bcbf01"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 127,
          "offset": 41,
          "length": 43,
          "code": {
            "startLine": 125,
            "length": 43,
            "offset": 226,
            "surroundingCode": "GDExtensionInterfaceStringToUtf32Chars gdextension_interface_string_to_utf32_chars = nullptr;\nGDExtensionInterfaceStringToWideChars gdextension_interface_string_to_wide_chars = nullptr;\nGDExtensionInterfaceStringOperatorIndex gdextension_interface_string_operator_index = nullptr;\nGDExtensionInterfaceStringOperatorIndexConst gdextension_interface_string_operator_index_const = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqString gdextension_interface_string_operator_plus_eq_string = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "49fca6e34a69f003004fe8c4ae37ae87e41b964a34b4b1c78837d6c92acdebfe"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 128,
          "offset": 46,
          "length": 49,
          "code": {
            "startLine": 126,
            "length": 49,
            "offset": 232,
            "surroundingCode": "GDExtensionInterfaceStringToWideChars gdextension_interface_string_to_wide_chars = nullptr;\nGDExtensionInterfaceStringOperatorIndex gdextension_interface_string_operator_index = nullptr;\nGDExtensionInterfaceStringOperatorIndexConst gdextension_interface_string_operator_index_const = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqString gdextension_interface_string_operator_plus_eq_string = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqChar gdextension_interface_string_operator_plus_eq_char = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "77d41773d30719e8ead8ba0728a23f7991756cfa218b54f7a5b737ab6e760a72"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_plus_eq_string' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 129,
          "offset": 48,
          "length": 52,
          "code": {
            "startLine": 127,
            "length": 52,
            "offset": 248,
            "surroundingCode": "GDExtensionInterfaceStringOperatorIndex gdextension_interface_string_operator_index = nullptr;\nGDExtensionInterfaceStringOperatorIndexConst gdextension_interface_string_operator_index_const = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqString gdextension_interface_string_operator_plus_eq_string = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqChar gdextension_interface_string_operator_plus_eq_char = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqCstr gdextension_interface_string_operator_plus_eq_cstr = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "4dc54c816db2e7e94bc45c0db2990fd26a2c3701105692dd0965c8741d68f79d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_plus_eq_char' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 130,
          "offset": 46,
          "length": 50,
          "code": {
            "startLine": 128,
            "length": 50,
            "offset": 262,
            "surroundingCode": "GDExtensionInterfaceStringOperatorIndexConst gdextension_interface_string_operator_index_const = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqString gdextension_interface_string_operator_plus_eq_string = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqChar gdextension_interface_string_operator_plus_eq_char = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqCstr gdextension_interface_string_operator_plus_eq_cstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqWcstr gdextension_interface_string_operator_plus_eq_wcstr = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ea29019dab56f9bd36d4bf2f88871d71f636fddfbf3e35eddcbe1f9dea268cf3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_plus_eq_cstr' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 131,
          "offset": 46,
          "length": 50,
          "code": {
            "startLine": 129,
            "length": 50,
            "offset": 263,
            "surroundingCode": "GDExtensionInterfaceStringOperatorPlusEqString gdextension_interface_string_operator_plus_eq_string = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqChar gdextension_interface_string_operator_plus_eq_char = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqCstr gdextension_interface_string_operator_plus_eq_cstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqWcstr gdextension_interface_string_operator_plus_eq_wcstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqC32str gdextension_interface_string_operator_plus_eq_c32str = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "eec2f6608e205ad23454054b711092fa177151295a6f394c6fcec471d295000c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_plus_eq_wcstr' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 132,
          "offset": 47,
          "length": 51,
          "code": {
            "startLine": 130,
            "length": 51,
            "offset": 260,
            "surroundingCode": "GDExtensionInterfaceStringOperatorPlusEqChar gdextension_interface_string_operator_plus_eq_char = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqCstr gdextension_interface_string_operator_plus_eq_cstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqWcstr gdextension_interface_string_operator_plus_eq_wcstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqC32str gdextension_interface_string_operator_plus_eq_c32str = nullptr;\nGDExtensionInterfaceStringResize gdextension_interface_string_resize = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ec3978e587a43f77b8070a2c48025797388c5bcae98118e297d9d54c83b19002"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_operator_plus_eq_c32str' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 133,
          "offset": 48,
          "length": 52,
          "code": {
            "startLine": 131,
            "length": 52,
            "offset": 263,
            "surroundingCode": "GDExtensionInterfaceStringOperatorPlusEqCstr gdextension_interface_string_operator_plus_eq_cstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqWcstr gdextension_interface_string_operator_plus_eq_wcstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqC32str gdextension_interface_string_operator_plus_eq_c32str = nullptr;\nGDExtensionInterfaceStringResize gdextension_interface_string_resize = nullptr;\nGDExtensionInterfaceStringNameNewWithLatin1Chars gdextension_interface_string_name_new_with_latin1_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "b867f7562a51f2bfa1700612683e943404e58faaf4bc2bce5311d30b1b927997"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_resize' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 134,
          "offset": 34,
          "length": 35,
          "code": {
            "startLine": 132,
            "length": 35,
            "offset": 253,
            "surroundingCode": "GDExtensionInterfaceStringOperatorPlusEqWcstr gdextension_interface_string_operator_plus_eq_wcstr = nullptr;\nGDExtensionInterfaceStringOperatorPlusEqC32str gdextension_interface_string_operator_plus_eq_c32str = nullptr;\nGDExtensionInterfaceStringResize gdextension_interface_string_resize = nullptr;\nGDExtensionInterfaceStringNameNewWithLatin1Chars gdextension_interface_string_name_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceXmlParserOpenBuffer gdextension_interface_xml_parser_open_buffer = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "80f065477b3249d61889b73dd9c17058621ba653073d51765dbd4a6d206fed6d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_string_name_new_with_latin1_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 135,
          "offset": 50,
          "length": 55,
          "code": {
            "startLine": 133,
            "length": 55,
            "offset": 240,
            "surroundingCode": "GDExtensionInterfaceStringOperatorPlusEqC32str gdextension_interface_string_operator_plus_eq_c32str = nullptr;\nGDExtensionInterfaceStringResize gdextension_interface_string_resize = nullptr;\nGDExtensionInterfaceStringNameNewWithLatin1Chars gdextension_interface_string_name_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceXmlParserOpenBuffer gdextension_interface_xml_parser_open_buffer = nullptr;\nGDExtensionInterfaceFileAccessStoreBuffer gdextension_interface_file_access_store_buffer = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d85b7783af3273429821b5240b40edc844032b99e35b51cb8db210c5bfe5b8d7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_xml_parser_open_buffer' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 136,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 134,
            "length": 44,
            "offset": 236,
            "surroundingCode": "GDExtensionInterfaceStringResize gdextension_interface_string_resize = nullptr;\nGDExtensionInterfaceStringNameNewWithLatin1Chars gdextension_interface_string_name_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceXmlParserOpenBuffer gdextension_interface_xml_parser_open_buffer = nullptr;\nGDExtensionInterfaceFileAccessStoreBuffer gdextension_interface_file_access_store_buffer = nullptr;\nGDExtensionInterfaceFileAccessGetBuffer gdextension_interface_file_access_get_buffer = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6eeef89c2e7715f102c8d78f62eba3a9ba9ed3ac891f7f8c8e87cc13ed6bf743"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_file_access_store_buffer' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 137,
          "offset": 43,
          "length": 46,
          "code": {
            "startLine": 135,
            "length": 46,
            "offset": 254,
            "surroundingCode": "GDExtensionInterfaceStringNameNewWithLatin1Chars gdextension_interface_string_name_new_with_latin1_chars = nullptr;\nGDExtensionInterfaceXmlParserOpenBuffer gdextension_interface_xml_parser_open_buffer = nullptr;\nGDExtensionInterfaceFileAccessStoreBuffer gdextension_interface_file_access_store_buffer = nullptr;\nGDExtensionInterfaceFileAccessGetBuffer gdextension_interface_file_access_get_buffer = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask gdextension_interface_worker_thread_pool_add_native_group_task = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "64bbb68561c102d6c7b0455142484b63334cd6e61975d6b9973191cdbdf48fd4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_file_access_get_buffer' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 138,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 136,
            "length": 44,
            "offset": 236,
            "surroundingCode": "GDExtensionInterfaceXmlParserOpenBuffer gdextension_interface_xml_parser_open_buffer = nullptr;\nGDExtensionInterfaceFileAccessStoreBuffer gdextension_interface_file_access_store_buffer = nullptr;\nGDExtensionInterfaceFileAccessGetBuffer gdextension_interface_file_access_get_buffer = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask gdextension_interface_worker_thread_pool_add_native_group_task = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeTask gdextension_interface_worker_thread_pool_add_native_task = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "139c7e8e8e7de9b418db0391c58b4792268894bedd0c44545a4927ad543d1753"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_worker_thread_pool_add_native_group_task' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 139,
          "offset": 56,
          "length": 62,
          "code": {
            "startLine": 137,
            "length": 62,
            "offset": 251,
            "surroundingCode": "GDExtensionInterfaceFileAccessStoreBuffer gdextension_interface_file_access_store_buffer = nullptr;\nGDExtensionInterfaceFileAccessGetBuffer gdextension_interface_file_access_get_buffer = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask gdextension_interface_worker_thread_pool_add_native_group_task = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeTask gdextension_interface_worker_thread_pool_add_native_task = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndex gdextension_interface_packed_byte_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ad807183126ee9a7187d4aabde89f1242fc46d6ceaec4979cf5801244e787000"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_worker_thread_pool_add_native_task' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 140,
          "offset": 51,
          "length": 56,
          "code": {
            "startLine": 138,
            "length": 56,
            "offset": 275,
            "surroundingCode": "GDExtensionInterfaceFileAccessGetBuffer gdextension_interface_file_access_get_buffer = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask gdextension_interface_worker_thread_pool_add_native_group_task = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeTask gdextension_interface_worker_thread_pool_add_native_task = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndex gdextension_interface_packed_byte_array_operator_index = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndexConst gdextension_interface_packed_byte_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "4c9c640e971d64a4b7ae6df7c1d6ca53e242aa373465befeb1375ef00191d76a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_byte_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 141,
          "offset": 50,
          "length": 54,
          "code": {
            "startLine": 139,
            "length": 54,
            "offset": 296,
            "surroundingCode": "GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask gdextension_interface_worker_thread_pool_add_native_group_task = nullptr;\nGDExtensionInterfaceWorkerThreadPoolAddNativeTask gdextension_interface_worker_thread_pool_add_native_task = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndex gdextension_interface_packed_byte_array_operator_index = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndexConst gdextension_interface_packed_byte_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndex gdextension_interface_packed_color_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ef6990bc591931656bb623a55a0f14e17616c67f17b7f34f34258987187589d6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_byte_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 142,
          "offset": 55,
          "length": 60,
          "code": {
            "startLine": 140,
            "length": 60,
            "offset": 287,
            "surroundingCode": "GDExtensionInterfaceWorkerThreadPoolAddNativeTask gdextension_interface_worker_thread_pool_add_native_task = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndex gdextension_interface_packed_byte_array_operator_index = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndexConst gdextension_interface_packed_byte_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndex gdextension_interface_packed_color_array_operator_index = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndexConst gdextension_interface_packed_color_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9fd47490694efdc294d3fb108826b5723104b7800633eaa8df4df4b1f452d78e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_color_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 143,
          "offset": 51,
          "length": 55,
          "code": {
            "startLine": 141,
            "length": 55,
            "offset": 291,
            "surroundingCode": "GDExtensionInterfacePackedByteArrayOperatorIndex gdextension_interface_packed_byte_array_operator_index = nullptr;\nGDExtensionInterfacePackedByteArrayOperatorIndexConst gdextension_interface_packed_byte_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndex gdextension_interface_packed_color_array_operator_index = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndexConst gdextension_interface_packed_color_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndex gdextension_interface_packed_float32_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7771cf14addc4d312e0c428fbe9da2bd0092609e290ed685bab829cba50e8521"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_color_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 144,
          "offset": 56,
          "length": 61,
          "code": {
            "startLine": 142,
            "length": 61,
            "offset": 298,
            "surroundingCode": "GDExtensionInterfacePackedByteArrayOperatorIndexConst gdextension_interface_packed_byte_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndex gdextension_interface_packed_color_array_operator_index = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndexConst gdextension_interface_packed_color_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndex gdextension_interface_packed_float32_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndexConst gdextension_interface_packed_float32_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "88f756ccad9ead50902c5207adbdc851a05a7322bbf6aa7c3a24021e88246e45"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_float32_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 145,
          "offset": 53,
          "length": 57,
          "code": {
            "startLine": 143,
            "length": 57,
            "offset": 297,
            "surroundingCode": "GDExtensionInterfacePackedColorArrayOperatorIndex gdextension_interface_packed_color_array_operator_index = nullptr;\nGDExtensionInterfacePackedColorArrayOperatorIndexConst gdextension_interface_packed_color_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndex gdextension_interface_packed_float32_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndexConst gdextension_interface_packed_float32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndex gdextension_interface_packed_float64_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "66c7151a8465f5f8f683b1323a95f8833e723acba558dcc7ae66a3ce14ad91b3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_float32_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 146,
          "offset": 58,
          "length": 63,
          "code": {
            "startLine": 144,
            "length": 63,
            "offset": 306,
            "surroundingCode": "GDExtensionInterfacePackedColorArrayOperatorIndexConst gdextension_interface_packed_color_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndex gdextension_interface_packed_float32_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndexConst gdextension_interface_packed_float32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndex gdextension_interface_packed_float64_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndexConst gdextension_interface_packed_float64_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "479ae7b27ab77ec7136a8e5e62bf6174e3ca6b7015f696131043196694958452"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_float64_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 147,
          "offset": 53,
          "length": 57,
          "code": {
            "startLine": 145,
            "length": 57,
            "offset": 305,
            "surroundingCode": "GDExtensionInterfacePackedFloat32ArrayOperatorIndex gdextension_interface_packed_float32_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat32ArrayOperatorIndexConst gdextension_interface_packed_float32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndex gdextension_interface_packed_float64_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndexConst gdextension_interface_packed_float64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndex gdextension_interface_packed_int32_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "9ecaa67371d2601e3075148cea0f6e25dc9562ce0df744d8efcb67452ef42fd6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_float64_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 148,
          "offset": 58,
          "length": 63,
          "code": {
            "startLine": 146,
            "length": 63,
            "offset": 310,
            "surroundingCode": "GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst gdextension_interface_packed_float32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndex gdextension_interface_packed_float64_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndexConst gdextension_interface_packed_float64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndex gdextension_interface_packed_int32_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndexConst gdextension_interface_packed_int32_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "30456f8571ac1547becefd635370173f58d6fc6bcbecc41f3540dc286926e19e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_int32_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 149,
          "offset": 51,
          "length": 55,
          "code": {
            "startLine": 147,
            "length": 55,
            "offset": 303,
            "surroundingCode": "GDExtensionInterfacePackedFloat64ArrayOperatorIndex gdextension_interface_packed_float64_array_operator_index = nullptr;\nGDExtensionInterfacePackedFloat64ArrayOperatorIndexConst gdextension_interface_packed_float64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndex gdextension_interface_packed_int32_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndexConst gdextension_interface_packed_int32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndex gdextension_interface_packed_int64_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "8be322681fc7edd5c9646254a8d43ea3420f2c5a51c663552722bee76791a994"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_int32_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 150,
          "offset": 56,
          "length": 61,
          "code": {
            "startLine": 148,
            "length": 61,
            "offset": 304,
            "surroundingCode": "GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst gdextension_interface_packed_float64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndex gdextension_interface_packed_int32_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndexConst gdextension_interface_packed_int32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndex gdextension_interface_packed_int64_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndexConst gdextension_interface_packed_int64_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6a9a0ea242384dbcb2d87533a52f7b9e2077a1bff26c95abfea95be7bb570b0a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_int64_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 151,
          "offset": 51,
          "length": 55,
          "code": {
            "startLine": 149,
            "length": 55,
            "offset": 295,
            "surroundingCode": "GDExtensionInterfacePackedInt32ArrayOperatorIndex gdextension_interface_packed_int32_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt32ArrayOperatorIndexConst gdextension_interface_packed_int32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndex gdextension_interface_packed_int64_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndexConst gdextension_interface_packed_int64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndex gdextension_interface_packed_string_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "65ebfb55da89dc23c5ae9bc957258220ad60d1769efb354756f9a40293893a41"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_int64_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 152,
          "offset": 56,
          "length": 61,
          "code": {
            "startLine": 150,
            "length": 61,
            "offset": 300,
            "surroundingCode": "GDExtensionInterfacePackedInt32ArrayOperatorIndexConst gdextension_interface_packed_int32_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndex gdextension_interface_packed_int64_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndexConst gdextension_interface_packed_int64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndex gdextension_interface_packed_string_array_operator_index = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndexConst gdextension_interface_packed_string_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6b9e0ab207ea47ab4e795c520abb46042f338bdde5757d9fe7571214649a2b53"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_string_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 153,
          "offset": 52,
          "length": 56,
          "code": {
            "startLine": 151,
            "length": 56,
            "offset": 296,
            "surroundingCode": "GDExtensionInterfacePackedInt64ArrayOperatorIndex gdextension_interface_packed_int64_array_operator_index = nullptr;\nGDExtensionInterfacePackedInt64ArrayOperatorIndexConst gdextension_interface_packed_int64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndex gdextension_interface_packed_string_array_operator_index = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndexConst gdextension_interface_packed_string_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndex gdextension_interface_packed_vector2_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "65fff53904165bdca97faec43d609dfce90fe256fc02641a67b289c7a97a7ca3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_string_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 154,
          "offset": 57,
          "length": 62,
          "code": {
            "startLine": 152,
            "length": 62,
            "offset": 303,
            "surroundingCode": "GDExtensionInterfacePackedInt64ArrayOperatorIndexConst gdextension_interface_packed_int64_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndex gdextension_interface_packed_string_array_operator_index = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndexConst gdextension_interface_packed_string_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndex gdextension_interface_packed_vector2_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndexConst gdextension_interface_packed_vector2_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d7ae8ebba09018d150056fb7e163267e6c8648573bacdba085217c7b59294484"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_vector2_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 155,
          "offset": 53,
          "length": 57,
          "code": {
            "startLine": 153,
            "length": 57,
            "offset": 301,
            "surroundingCode": "GDExtensionInterfacePackedStringArrayOperatorIndex gdextension_interface_packed_string_array_operator_index = nullptr;\nGDExtensionInterfacePackedStringArrayOperatorIndexConst gdextension_interface_packed_string_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndex gdextension_interface_packed_vector2_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndexConst gdextension_interface_packed_vector2_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndex gdextension_interface_packed_vector3_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0530fe52584462af993086c842af6df4981ddc91ffb69c8d342df22f61d1eefd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_vector2_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 156,
          "offset": 58,
          "length": 63,
          "code": {
            "startLine": 154,
            "length": 63,
            "offset": 308,
            "surroundingCode": "GDExtensionInterfacePackedStringArrayOperatorIndexConst gdextension_interface_packed_string_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndex gdextension_interface_packed_vector2_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndexConst gdextension_interface_packed_vector2_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndex gdextension_interface_packed_vector3_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndexConst gdextension_interface_packed_vector3_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "cb3d0b676be423d601a40ee70c80b7c5b6225a885903600764d0e26831ac2ef2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_vector3_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 157,
          "offset": 53,
          "length": 57,
          "code": {
            "startLine": 155,
            "length": 57,
            "offset": 305,
            "surroundingCode": "GDExtensionInterfacePackedVector2ArrayOperatorIndex gdextension_interface_packed_vector2_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector2ArrayOperatorIndexConst gdextension_interface_packed_vector2_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndex gdextension_interface_packed_vector3_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndexConst gdextension_interface_packed_vector3_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndex gdextension_interface_packed_vector4_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "bdef17333b05c534997eeb6ae894348601b47688eac1f6f7a90df45b860c79d6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_vector3_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 158,
          "offset": 58,
          "length": 63,
          "code": {
            "startLine": 156,
            "length": 63,
            "offset": 310,
            "surroundingCode": "GDExtensionInterfacePackedVector2ArrayOperatorIndexConst gdextension_interface_packed_vector2_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndex gdextension_interface_packed_vector3_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndexConst gdextension_interface_packed_vector3_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndex gdextension_interface_packed_vector4_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndexConst gdextension_interface_packed_vector4_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "14b963e7e65b97bc5e23ac2eef18d6985a2e11efb2e9f46dd8aec5c723e6f779"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_vector4_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 159,
          "offset": 53,
          "length": 57,
          "code": {
            "startLine": 157,
            "length": 57,
            "offset": 305,
            "surroundingCode": "GDExtensionInterfacePackedVector3ArrayOperatorIndex gdextension_interface_packed_vector3_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector3ArrayOperatorIndexConst gdextension_interface_packed_vector3_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndex gdextension_interface_packed_vector4_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndexConst gdextension_interface_packed_vector4_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayOperatorIndex gdextension_interface_array_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "3dc571633158f06804738acf53fb66d89294dc1f40dda605a411707930615c10"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_packed_vector4_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 160,
          "offset": 58,
          "length": 63,
          "code": {
            "startLine": 158,
            "length": 63,
            "offset": 310,
            "surroundingCode": "GDExtensionInterfacePackedVector3ArrayOperatorIndexConst gdextension_interface_packed_vector3_array_operator_index_const = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndex gdextension_interface_packed_vector4_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndexConst gdextension_interface_packed_vector4_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayOperatorIndex gdextension_interface_array_operator_index = nullptr;\nGDExtensionInterfaceArrayOperatorIndexConst gdextension_interface_array_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "895911843e64dfe208d8ea86a460988accf6242ec30ef2b1a97d932a7994f26b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_array_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 161,
          "offset": 40,
          "length": 42,
          "code": {
            "startLine": 159,
            "length": 42,
            "offset": 292,
            "surroundingCode": "GDExtensionInterfacePackedVector4ArrayOperatorIndex gdextension_interface_packed_vector4_array_operator_index = nullptr;\nGDExtensionInterfacePackedVector4ArrayOperatorIndexConst gdextension_interface_packed_vector4_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayOperatorIndex gdextension_interface_array_operator_index = nullptr;\nGDExtensionInterfaceArrayOperatorIndexConst gdextension_interface_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayRef gdextension_interface_array_ref = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "0eee09efc8ccfbdeaa9d6a49ecc32ddc453860e5a9cdd92c2a49e8b6a6596fe3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_array_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 162,
          "offset": 45,
          "length": 48,
          "code": {
            "startLine": 160,
            "length": 48,
            "offset": 269,
            "surroundingCode": "GDExtensionInterfacePackedVector4ArrayOperatorIndexConst gdextension_interface_packed_vector4_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayOperatorIndex gdextension_interface_array_operator_index = nullptr;\nGDExtensionInterfaceArrayOperatorIndexConst gdextension_interface_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayRef gdextension_interface_array_ref = nullptr;\nGDExtensionInterfaceArraySetTyped gdextension_interface_array_set_typed = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "5187648b9b91a11879cecff4c1e864425d820059c0f2c2035c09cd158a3034f5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_array_ref' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 163,
          "offset": 30,
          "length": 31,
          "code": {
            "startLine": 161,
            "length": 31,
            "offset": 226,
            "surroundingCode": "GDExtensionInterfaceArrayOperatorIndex gdextension_interface_array_operator_index = nullptr;\nGDExtensionInterfaceArrayOperatorIndexConst gdextension_interface_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayRef gdextension_interface_array_ref = nullptr;\nGDExtensionInterfaceArraySetTyped gdextension_interface_array_set_typed = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndex gdextension_interface_dictionary_operator_index = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "376341012ce4f736e4a0c283cb12bd0ef0cec96506fbff02fcfbfa311c946c7c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_array_set_typed' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 164,
          "offset": 35,
          "length": 37,
          "code": {
            "startLine": 162,
            "length": 37,
            "offset": 210,
            "surroundingCode": "GDExtensionInterfaceArrayOperatorIndexConst gdextension_interface_array_operator_index_const = nullptr;\nGDExtensionInterfaceArrayRef gdextension_interface_array_ref = nullptr;\nGDExtensionInterfaceArraySetTyped gdextension_interface_array_set_typed = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndex gdextension_interface_dictionary_operator_index = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndexConst gdextension_interface_dictionary_operator_index_const = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6fb24e6f6191e37bedc566365a98104c4a7bbb2756f20ea747c66b091238bb28"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_dictionary_operator_index' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 165,
          "offset": 45,
          "length": 47,
          "code": {
            "startLine": 163,
            "length": 47,
            "offset": 199,
            "surroundingCode": "GDExtensionInterfaceArrayRef gdextension_interface_array_ref = nullptr;\nGDExtensionInterfaceArraySetTyped gdextension_interface_array_set_typed = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndex gdextension_interface_dictionary_operator_index = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndexConst gdextension_interface_dictionary_operator_index_const = nullptr;\nGDExtensionInterfaceObjectMethodBindCall gdextension_interface_object_method_bind_call = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ec416ef1e3d1a286fd680cb09ed58470d3cff3a6fada110b72137df1025fa4a2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_dictionary_operator_index_const' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 166,
          "offset": 50,
          "length": 53,
          "code": {
            "startLine": 164,
            "length": 53,
            "offset": 235,
            "surroundingCode": "GDExtensionInterfaceArraySetTyped gdextension_interface_array_set_typed = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndex gdextension_interface_dictionary_operator_index = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndexConst gdextension_interface_dictionary_operator_index_const = nullptr;\nGDExtensionInterfaceObjectMethodBindCall gdextension_interface_object_method_bind_call = nullptr;\nGDExtensionInterfaceObjectMethodBindPtrcall gdextension_interface_object_method_bind_ptrcall = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c535dcf34e747a610920169c92ea414da1280d9fe74375ce1099ddb760f69f15"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_method_bind_call' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 167,
          "offset": 42,
          "length": 45,
          "code": {
            "startLine": 165,
            "length": 45,
            "offset": 258,
            "surroundingCode": "GDExtensionInterfaceDictionaryOperatorIndex gdextension_interface_dictionary_operator_index = nullptr;\nGDExtensionInterfaceDictionaryOperatorIndexConst gdextension_interface_dictionary_operator_index_const = nullptr;\nGDExtensionInterfaceObjectMethodBindCall gdextension_interface_object_method_bind_call = nullptr;\nGDExtensionInterfaceObjectMethodBindPtrcall gdextension_interface_object_method_bind_ptrcall = nullptr;\nGDExtensionInterfaceObjectDestroy gdextension_interface_object_destroy = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d5b58920212542732e0e6ee7fce72b60e076b507e23e2f2006819ae4d8d209ca"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_method_bind_ptrcall' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 168,
          "offset": 45,
          "length": 48,
          "code": {
            "startLine": 166,
            "length": 48,
            "offset": 256,
            "surroundingCode": "GDExtensionInterfaceDictionaryOperatorIndexConst gdextension_interface_dictionary_operator_index_const = nullptr;\nGDExtensionInterfaceObjectMethodBindCall gdextension_interface_object_method_bind_call = nullptr;\nGDExtensionInterfaceObjectMethodBindPtrcall gdextension_interface_object_method_bind_ptrcall = nullptr;\nGDExtensionInterfaceObjectDestroy gdextension_interface_object_destroy = nullptr;\nGDExtensionInterfaceGlobalGetSingleton gdextension_interface_global_get_singleton = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "f726e38a1d2597d68dc6b3016d6f7a077cbf67081a912b28ba7a79ef0b524b58"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_destroy' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 169,
          "offset": 35,
          "length": 36,
          "code": {
            "startLine": 167,
            "length": 36,
            "offset": 236,
            "surroundingCode": "GDExtensionInterfaceObjectMethodBindCall gdextension_interface_object_method_bind_call = nullptr;\nGDExtensionInterfaceObjectMethodBindPtrcall gdextension_interface_object_method_bind_ptrcall = nullptr;\nGDExtensionInterfaceObjectDestroy gdextension_interface_object_destroy = nullptr;\nGDExtensionInterfaceGlobalGetSingleton gdextension_interface_global_get_singleton = nullptr;\nGDExtensionInterfaceObjectGetInstanceBinding gdextension_interface_object_get_instance_binding = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6bcf9ace9efbdb16a788ec75d76d64f2a4fe3ee9b7db5b99986bbda381f4bbdc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_global_get_singleton' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 170,
          "offset": 40,
          "length": 42,
          "code": {
            "startLine": 168,
            "length": 42,
            "offset": 225,
            "surroundingCode": "GDExtensionInterfaceObjectMethodBindPtrcall gdextension_interface_object_method_bind_ptrcall = nullptr;\nGDExtensionInterfaceObjectDestroy gdextension_interface_object_destroy = nullptr;\nGDExtensionInterfaceGlobalGetSingleton gdextension_interface_global_get_singleton = nullptr;\nGDExtensionInterfaceObjectGetInstanceBinding gdextension_interface_object_get_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstanceBinding gdextension_interface_object_set_instance_binding = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d8042a21c1b1c73376edbad71389cb8e271c7b98b62c18b432692745ca64a3c6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_get_instance_binding' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 171,
          "offset": 46,
          "length": 49,
          "code": {
            "startLine": 169,
            "length": 49,
            "offset": 220,
            "surroundingCode": "GDExtensionInterfaceObjectDestroy gdextension_interface_object_destroy = nullptr;\nGDExtensionInterfaceGlobalGetSingleton gdextension_interface_global_get_singleton = nullptr;\nGDExtensionInterfaceObjectGetInstanceBinding gdextension_interface_object_get_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstanceBinding gdextension_interface_object_set_instance_binding = nullptr;\nGDExtensionInterfaceObjectFreeInstanceBinding gdextension_interface_object_free_instance_binding = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "4aa6cb4b88de8eebd399344c16955b80ddd2efbcf4e79ef5cbf75217cf8d251f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_set_instance_binding' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 172,
          "offset": 46,
          "length": 49,
          "code": {
            "startLine": 170,
            "length": 49,
            "offset": 244,
            "surroundingCode": "GDExtensionInterfaceGlobalGetSingleton gdextension_interface_global_get_singleton = nullptr;\nGDExtensionInterfaceObjectGetInstanceBinding gdextension_interface_object_get_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstanceBinding gdextension_interface_object_set_instance_binding = nullptr;\nGDExtensionInterfaceObjectFreeInstanceBinding gdextension_interface_object_free_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstance gdextension_interface_object_set_instance = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ad70ac88becaee3234ad00df39e41bf327ced04f30f4ce9ec1180cc93b61f194"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_free_instance_binding' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 173,
          "offset": 47,
          "length": 50,
          "code": {
            "startLine": 171,
            "length": 50,
            "offset": 258,
            "surroundingCode": "GDExtensionInterfaceObjectGetInstanceBinding gdextension_interface_object_get_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstanceBinding gdextension_interface_object_set_instance_binding = nullptr;\nGDExtensionInterfaceObjectFreeInstanceBinding gdextension_interface_object_free_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstance gdextension_interface_object_set_instance = nullptr;\nGDExtensionInterfaceObjectGetClassName gdextension_interface_object_get_class_name = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "36fb4360afb9262c3f94beeb5c25de4fdeada9c4e80ca10fe4c9c2ea062bbdd0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_set_instance' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 174,
          "offset": 39,
          "length": 41,
          "code": {
            "startLine": 172,
            "length": 41,
            "offset": 252,
            "surroundingCode": "GDExtensionInterfaceObjectSetInstanceBinding gdextension_interface_object_set_instance_binding = nullptr;\nGDExtensionInterfaceObjectFreeInstanceBinding gdextension_interface_object_free_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstance gdextension_interface_object_set_instance = nullptr;\nGDExtensionInterfaceObjectGetClassName gdextension_interface_object_get_class_name = nullptr;\nGDExtensionInterfaceObjectCastTo gdextension_interface_object_cast_to = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "04b9361877fa9057423120b1a63d10db72143d51c630cf3aeba0004523c6dd53"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_get_class_name' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 175,
          "offset": 40,
          "length": 43,
          "code": {
            "startLine": 173,
            "length": 43,
            "offset": 238,
            "surroundingCode": "GDExtensionInterfaceObjectFreeInstanceBinding gdextension_interface_object_free_instance_binding = nullptr;\nGDExtensionInterfaceObjectSetInstance gdextension_interface_object_set_instance = nullptr;\nGDExtensionInterfaceObjectGetClassName gdextension_interface_object_get_class_name = nullptr;\nGDExtensionInterfaceObjectCastTo gdextension_interface_object_cast_to = nullptr;\nGDExtensionInterfaceObjectGetInstanceFromId gdextension_interface_object_get_instance_from_id = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "05178846053da42015ab4ce7ed19034205d157067c735692bae13f1423d56760"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_cast_to' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 176,
          "offset": 34,
          "length": 36,
          "code": {
            "startLine": 174,
            "length": 36,
            "offset": 218,
            "surroundingCode": "GDExtensionInterfaceObjectSetInstance gdextension_interface_object_set_instance = nullptr;\nGDExtensionInterfaceObjectGetClassName gdextension_interface_object_get_class_name = nullptr;\nGDExtensionInterfaceObjectCastTo gdextension_interface_object_cast_to = nullptr;\nGDExtensionInterfaceObjectGetInstanceFromId gdextension_interface_object_get_instance_from_id = nullptr;\nGDExtensionInterfaceObjectGetInstanceId gdextension_interface_object_get_instance_id = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c7f1469d65902ce9d675643dbe1105a3f7188c46d2bb3a3010544867fb669725"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_get_instance_from_id' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 177,
          "offset": 45,
          "length": 49,
          "code": {
            "startLine": 175,
            "length": 49,
            "offset": 219,
            "surroundingCode": "GDExtensionInterfaceObjectGetClassName gdextension_interface_object_get_class_name = nullptr;\nGDExtensionInterfaceObjectCastTo gdextension_interface_object_cast_to = nullptr;\nGDExtensionInterfaceObjectGetInstanceFromId gdextension_interface_object_get_instance_from_id = nullptr;\nGDExtensionInterfaceObjectGetInstanceId gdextension_interface_object_get_instance_id = nullptr;\nGDExtensionInterfaceObjectHasScriptMethod gdextension_interface_object_has_script_method = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "78664af30cc2d9d78575728387c50d5d0303d415ef53addf1038f59deb28a5bd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_get_instance_id' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 178,
          "offset": 41,
          "length": 44,
          "code": {
            "startLine": 176,
            "length": 44,
            "offset": 226,
            "surroundingCode": "GDExtensionInterfaceObjectCastTo gdextension_interface_object_cast_to = nullptr;\nGDExtensionInterfaceObjectGetInstanceFromId gdextension_interface_object_get_instance_from_id = nullptr;\nGDExtensionInterfaceObjectGetInstanceId gdextension_interface_object_get_instance_id = nullptr;\nGDExtensionInterfaceObjectHasScriptMethod gdextension_interface_object_has_script_method = nullptr;\nGDExtensionInterfaceObjectCallScriptMethod gdextension_interface_object_call_script_method = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "47b70cf4e5fb024ed7cfcbc22afbb6bd0e38e072be589e59227ed199d3df8cb2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_has_script_method' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 179,
          "offset": 43,
          "length": 46,
          "code": {
            "startLine": 177,
            "length": 46,
            "offset": 243,
            "surroundingCode": "GDExtensionInterfaceObjectGetInstanceFromId gdextension_interface_object_get_instance_from_id = nullptr;\nGDExtensionInterfaceObjectGetInstanceId gdextension_interface_object_get_instance_id = nullptr;\nGDExtensionInterfaceObjectHasScriptMethod gdextension_interface_object_has_script_method = nullptr;\nGDExtensionInterfaceObjectCallScriptMethod gdextension_interface_object_call_script_method = nullptr;\nGDExtensionInterfaceCallableCustomCreate2 gdextension_interface_callable_custom_create2 = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "a922a3b5e3147420bf3e9dc1f020e02b14e500ba70e0afe728ea61d78e532311"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_object_call_script_method' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 180,
          "offset": 44,
          "length": 47,
          "code": {
            "startLine": 178,
            "length": 47,
            "offset": 239,
            "surroundingCode": "GDExtensionInterfaceObjectGetInstanceId gdextension_interface_object_get_instance_id = nullptr;\nGDExtensionInterfaceObjectHasScriptMethod gdextension_interface_object_has_script_method = nullptr;\nGDExtensionInterfaceObjectCallScriptMethod gdextension_interface_object_call_script_method = nullptr;\nGDExtensionInterfaceCallableCustomCreate2 gdextension_interface_callable_custom_create2 = nullptr;\nGDExtensionInterfaceCallableCustomGetUserData gdextension_interface_callable_custom_get_userdata = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "022a0e3faa42a31178e89185bd31c0a56a64492e263c61a84c34b6d1241bb0eb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_callable_custom_create2' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 181,
          "offset": 43,
          "length": 45,
          "code": {
            "startLine": 179,
            "length": 45,
            "offset": 244,
            "surroundingCode": "GDExtensionInterfaceObjectHasScriptMethod gdextension_interface_object_has_script_method = nullptr;\nGDExtensionInterfaceObjectCallScriptMethod gdextension_interface_object_call_script_method = nullptr;\nGDExtensionInterfaceCallableCustomCreate2 gdextension_interface_callable_custom_create2 = nullptr;\nGDExtensionInterfaceCallableCustomGetUserData gdextension_interface_callable_custom_get_userdata = nullptr;\nGDExtensionInterfaceRefGetObject gdextension_interface_ref_get_object = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d6f582ddded818be18b1010e76c20f3963d9d189bc8120f60174b0bc10f78bf8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_callable_custom_get_userdata' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 182,
          "offset": 47,
          "length": 50,
          "code": {
            "startLine": 180,
            "length": 50,
            "offset": 247,
            "surroundingCode": "GDExtensionInterfaceObjectCallScriptMethod gdextension_interface_object_call_script_method = nullptr;\nGDExtensionInterfaceCallableCustomCreate2 gdextension_interface_callable_custom_create2 = nullptr;\nGDExtensionInterfaceCallableCustomGetUserData gdextension_interface_callable_custom_get_userdata = nullptr;\nGDExtensionInterfaceRefGetObject gdextension_interface_ref_get_object = nullptr;\nGDExtensionInterfaceRefSetObject gdextension_interface_ref_set_object = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "244c7e420735cd35e25f0c3b0266431c8f539815a8a1d2d92d31376d2eb5e841"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_ref_get_object' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 183,
          "offset": 34,
          "length": 36,
          "code": {
            "startLine": 181,
            "length": 36,
            "offset": 240,
            "surroundingCode": "GDExtensionInterfaceCallableCustomCreate2 gdextension_interface_callable_custom_create2 = nullptr;\nGDExtensionInterfaceCallableCustomGetUserData gdextension_interface_callable_custom_get_userdata = nullptr;\nGDExtensionInterfaceRefGetObject gdextension_interface_ref_get_object = nullptr;\nGDExtensionInterfaceRefSetObject gdextension_interface_ref_set_object = nullptr;\nGDExtensionInterfaceScriptInstanceCreate3 gdextension_interface_script_instance_create3 = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "8b6b9010eee6b425dd535e5ab2c7abc11cc9c36b44a1c2501d30b2eea7f119af"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_ref_set_object' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 184,
          "offset": 34,
          "length": 36,
          "code": {
            "startLine": 182,
            "length": 36,
            "offset": 222,
            "surroundingCode": "GDExtensionInterfaceCallableCustomGetUserData gdextension_interface_callable_custom_get_userdata = nullptr;\nGDExtensionInterfaceRefGetObject gdextension_interface_ref_get_object = nullptr;\nGDExtensionInterfaceRefSetObject gdextension_interface_ref_set_object = nullptr;\nGDExtensionInterfaceScriptInstanceCreate3 gdextension_interface_script_instance_create3 = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceCreate gdextension_interface_placeholder_script_instance_create = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "8afa11abfc817c783f983b3a7db58ed446bcc720125b0cccd52551b016d9e19e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_script_instance_create3' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 185,
          "offset": 43,
          "length": 45,
          "code": {
            "startLine": 183,
            "length": 45,
            "offset": 204,
            "surroundingCode": "GDExtensionInterfaceRefGetObject gdextension_interface_ref_get_object = nullptr;\nGDExtensionInterfaceRefSetObject gdextension_interface_ref_set_object = nullptr;\nGDExtensionInterfaceScriptInstanceCreate3 gdextension_interface_script_instance_create3 = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceCreate gdextension_interface_placeholder_script_instance_create = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceUpdate gdextension_interface_placeholder_script_instance_update = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "f6d78fab6d203495074e72a73430bb2ada71a3e52740b338aceed51369ecf7c4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_placeholder_script_instance_create' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 186,
          "offset": 53,
          "length": 56,
          "code": {
            "startLine": 184,
            "length": 56,
            "offset": 232,
            "surroundingCode": "GDExtensionInterfaceRefSetObject gdextension_interface_ref_set_object = nullptr;\nGDExtensionInterfaceScriptInstanceCreate3 gdextension_interface_script_instance_create3 = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceCreate gdextension_interface_placeholder_script_instance_create = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceUpdate gdextension_interface_placeholder_script_instance_update = nullptr;\nGDExtensionInterfaceClassdbConstructObject gdextension_interface_classdb_construct_object = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "366e92d7472c87440e1c9eaeb876dbb3cdc00442830f300c3ff9abe26aadb9b4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_placeholder_script_instance_update' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 187,
          "offset": 53,
          "length": 56,
          "code": {
            "startLine": 185,
            "length": 56,
            "offset": 271,
            "surroundingCode": "GDExtensionInterfaceScriptInstanceCreate3 gdextension_interface_script_instance_create3 = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceCreate gdextension_interface_placeholder_script_instance_create = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceUpdate gdextension_interface_placeholder_script_instance_update = nullptr;\nGDExtensionInterfaceClassdbConstructObject gdextension_interface_classdb_construct_object = nullptr;\nGDExtensionInterfaceClassdbGetMethodBind gdextension_interface_classdb_get_method_bind = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "cf39913af48f6e20125e40cc47836af8d8a2823f3006585d936d411306743161"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_construct_object' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 188,
          "offset": 44,
          "length": 46,
          "code": {
            "startLine": 186,
            "length": 46,
            "offset": 283,
            "surroundingCode": "GDExtensionInterfacePlaceHolderScriptInstanceCreate gdextension_interface_placeholder_script_instance_create = nullptr;\nGDExtensionInterfacePlaceHolderScriptInstanceUpdate gdextension_interface_placeholder_script_instance_update = nullptr;\nGDExtensionInterfaceClassdbConstructObject gdextension_interface_classdb_construct_object = nullptr;\nGDExtensionInterfaceClassdbGetMethodBind gdextension_interface_classdb_get_method_bind = nullptr;\nGDExtensionInterfaceClassdbGetClassTag gdextension_interface_classdb_get_class_tag = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c309f650c3a3d5c158308f8fe1623b52fd3e5457d8fa77924ee895ea2ec6f3a7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_get_method_bind' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 189,
          "offset": 42,
          "length": 45,
          "code": {
            "startLine": 187,
            "length": 45,
            "offset": 262,
            "surroundingCode": "GDExtensionInterfacePlaceHolderScriptInstanceUpdate gdextension_interface_placeholder_script_instance_update = nullptr;\nGDExtensionInterfaceClassdbConstructObject gdextension_interface_classdb_construct_object = nullptr;\nGDExtensionInterfaceClassdbGetMethodBind gdextension_interface_classdb_get_method_bind = nullptr;\nGDExtensionInterfaceClassdbGetClassTag gdextension_interface_classdb_get_class_tag = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClass3 gdextension_interface_classdb_register_extension_class3 = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "884256643f202ac5fcc52724166df4b766896795cd4e3b352a6fa9f5b7c5bf57"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_get_class_tag' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 190,
          "offset": 40,
          "length": 43,
          "code": {
            "startLine": 188,
            "length": 43,
            "offset": 238,
            "surroundingCode": "GDExtensionInterfaceClassdbConstructObject gdextension_interface_classdb_construct_object = nullptr;\nGDExtensionInterfaceClassdbGetMethodBind gdextension_interface_classdb_get_method_bind = nullptr;\nGDExtensionInterfaceClassdbGetClassTag gdextension_interface_classdb_get_class_tag = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClass3 gdextension_interface_classdb_register_extension_class3 = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassMethod gdextension_interface_classdb_register_extension_class_method = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "8093a025f9be513a7ef1eb36912202e037cc4244538554fae88e984793c5cf26"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class3' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 191,
          "offset": 52,
          "length": 55,
          "code": {
            "startLine": 189,
            "length": 55,
            "offset": 243,
            "surroundingCode": "GDExtensionInterfaceClassdbGetMethodBind gdextension_interface_classdb_get_method_bind = nullptr;\nGDExtensionInterfaceClassdbGetClassTag gdextension_interface_classdb_get_class_tag = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClass3 gdextension_interface_classdb_register_extension_class3 = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassMethod gdextension_interface_classdb_register_extension_class_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod gdextension_interface_classdb_register_extension_class_virtual_method = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "b6ab2164a3838f71c0b5c05cced23a1f794fbb526c48da4f20911b16d47c179c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_method' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 192,
          "offset": 57,
          "length": 61,
          "code": {
            "startLine": 190,
            "length": 61,
            "offset": 268,
            "surroundingCode": "GDExtensionInterfaceClassdbGetClassTag gdextension_interface_classdb_get_class_tag = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClass3 gdextension_interface_classdb_register_extension_class3 = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassMethod gdextension_interface_classdb_register_extension_class_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod gdextension_interface_classdb_register_extension_class_virtual_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant gdextension_interface_classdb_register_extension_class_integer_constant = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "b63ecd86cda01993d668ddcadd123c3a160b60b420b36305d962f4845b7ffe65"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_virtual_method' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 193,
          "offset": 64,
          "length": 69,
          "code": {
            "startLine": 191,
            "length": 69,
            "offset": 310,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClass3 gdextension_interface_classdb_register_extension_class3 = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassMethod gdextension_interface_classdb_register_extension_class_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod gdextension_interface_classdb_register_extension_class_virtual_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant gdextension_interface_classdb_register_extension_class_integer_constant = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassProperty gdextension_interface_classdb_register_extension_class_property = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ed390a55e21b7fc707a6efb0a51bb81bd25e436fef5b4a1546d6dfd854286bc3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_integer_constant' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 194,
          "offset": 66,
          "length": 71,
          "code": {
            "startLine": 192,
            "length": 71,
            "offset": 338,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassMethod gdextension_interface_classdb_register_extension_class_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod gdextension_interface_classdb_register_extension_class_virtual_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant gdextension_interface_classdb_register_extension_class_integer_constant = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassProperty gdextension_interface_classdb_register_extension_class_property = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed gdextension_interface_classdb_register_extension_class_property_indexed = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7df44d6b79e67620ce4811d6e3a2fa56130a5b07e21f1e57d9e957f3f63cf32c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_property' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 195,
          "offset": 59,
          "length": 63,
          "code": {
            "startLine": 193,
            "length": 63,
            "offset": 350,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod gdextension_interface_classdb_register_extension_class_virtual_method = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant gdextension_interface_classdb_register_extension_class_integer_constant = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassProperty gdextension_interface_classdb_register_extension_class_property = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed gdextension_interface_classdb_register_extension_class_property_indexed = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup gdextension_interface_classdb_register_extension_class_property_group = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "3b845daae698a6494c307550dc27ff16fee2c86629ac06cc898dce85cf4cc07f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_property_indexed' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 196,
          "offset": 66,
          "length": 71,
          "code": {
            "startLine": 194,
            "length": 71,
            "offset": 346,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant gdextension_interface_classdb_register_extension_class_integer_constant = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassProperty gdextension_interface_classdb_register_extension_class_property = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed gdextension_interface_classdb_register_extension_class_property_indexed = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup gdextension_interface_classdb_register_extension_class_property_group = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup gdextension_interface_classdb_register_extension_class_property_subgroup = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "051e1f3c9ad9c53ce7072d371a74c6c64ab88533fefcdf439fc4a10999da6e3a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_property_group' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 197,
          "offset": 64,
          "length": 69,
          "code": {
            "startLine": 195,
            "length": 69,
            "offset": 344,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassProperty gdextension_interface_classdb_register_extension_class_property = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed gdextension_interface_classdb_register_extension_class_property_indexed = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup gdextension_interface_classdb_register_extension_class_property_group = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup gdextension_interface_classdb_register_extension_class_property_subgroup = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassSignal gdextension_interface_classdb_register_extension_class_signal = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "bba180894ef70048acf87a42a5b503a1551217fee51ec1d7357f77d7e37aa4dd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_property_subgroup' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 198,
          "offset": 67,
          "length": 72,
          "code": {
            "startLine": 196,
            "length": 72,
            "offset": 358,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed gdextension_interface_classdb_register_extension_class_property_indexed = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup gdextension_interface_classdb_register_extension_class_property_group = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup gdextension_interface_classdb_register_extension_class_property_subgroup = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassSignal gdextension_interface_classdb_register_extension_class_signal = nullptr;\nGDExtensionInterfaceClassdbUnregisterExtensionClass gdextension_interface_classdb_unregister_extension_class = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "fb174d24fb215f257902242f5e33ed74d100ac5a396759002db172e2c5a88495"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_register_extension_class_signal' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 199,
          "offset": 57,
          "length": 61,
          "code": {
            "startLine": 197,
            "length": 61,
            "offset": 350,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup gdextension_interface_classdb_register_extension_class_property_group = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup gdextension_interface_classdb_register_extension_class_property_subgroup = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassSignal gdextension_interface_classdb_register_extension_class_signal = nullptr;\nGDExtensionInterfaceClassdbUnregisterExtensionClass gdextension_interface_classdb_unregister_extension_class = nullptr;\nGDExtensionInterfaceGetLibraryPath gdextension_interface_get_library_path = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "b9aa99c89c7d7970190be0b7a39c63553ccaf2eae33c1d41fe52218830b28589"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_classdb_unregister_extension_class' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 200,
          "offset": 53,
          "length": 56,
          "code": {
            "startLine": 198,
            "length": 56,
            "offset": 331,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup gdextension_interface_classdb_register_extension_class_property_subgroup = nullptr;\nGDExtensionInterfaceClassdbRegisterExtensionClassSignal gdextension_interface_classdb_register_extension_class_signal = nullptr;\nGDExtensionInterfaceClassdbUnregisterExtensionClass gdextension_interface_classdb_unregister_extension_class = nullptr;\nGDExtensionInterfaceGetLibraryPath gdextension_interface_get_library_path = nullptr;\nGDExtensionInterfaceEditorAddPlugin gdextension_interface_editor_add_plugin = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "d67ddae2750d8be6e187ed9c668df746bdf9b025b3cc8a83dbdbcda89fc8e21c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_get_library_path' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 201,
          "offset": 36,
          "length": 38,
          "code": {
            "startLine": 199,
            "length": 38,
            "offset": 284,
            "surroundingCode": "GDExtensionInterfaceClassdbRegisterExtensionClassSignal gdextension_interface_classdb_register_extension_class_signal = nullptr;\nGDExtensionInterfaceClassdbUnregisterExtensionClass gdextension_interface_classdb_unregister_extension_class = nullptr;\nGDExtensionInterfaceGetLibraryPath gdextension_interface_get_library_path = nullptr;\nGDExtensionInterfaceEditorAddPlugin gdextension_interface_editor_add_plugin = nullptr;\nGDExtensionInterfaceEditorRemovePlugin gdextension_interface_editor_remove_plugin = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "c3af7b6cb17615946ae44635f5e863b0fe50915dd152ac35f1297c2303c587f2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_editor_add_plugin' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 202,
          "offset": 37,
          "length": 39,
          "code": {
            "startLine": 200,
            "length": 39,
            "offset": 241,
            "surroundingCode": "GDExtensionInterfaceClassdbUnregisterExtensionClass gdextension_interface_classdb_unregister_extension_class = nullptr;\nGDExtensionInterfaceGetLibraryPath gdextension_interface_get_library_path = nullptr;\nGDExtensionInterfaceEditorAddPlugin gdextension_interface_editor_add_plugin = nullptr;\nGDExtensionInterfaceEditorRemovePlugin gdextension_interface_editor_remove_plugin = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars gdextension_interface_editor_help_load_xml_from_utf8_chars = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "938ce83e6f4dba2191c900f16eed899b4cbf5533ca445d89f846a1e47b179950"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_editor_remove_plugin' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 203,
          "offset": 40,
          "length": 42,
          "code": {
            "startLine": 201,
            "length": 42,
            "offset": 211,
            "surroundingCode": "GDExtensionInterfaceGetLibraryPath gdextension_interface_get_library_path = nullptr;\nGDExtensionInterfaceEditorAddPlugin gdextension_interface_editor_add_plugin = nullptr;\nGDExtensionInterfaceEditorRemovePlugin gdextension_interface_editor_remove_plugin = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars gdextension_interface_editor_help_load_xml_from_utf8_chars = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "22a89f007c869b6976a5dd27e82a616fdbff9bbd11b7b871f47a5148e8ebef7a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_editor_help_load_xml_from_utf8_chars' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 204,
          "offset": 53,
          "length": 58,
          "code": {
            "startLine": 202,
            "length": 58,
            "offset": 232,
            "surroundingCode": "GDExtensionInterfaceEditorAddPlugin gdextension_interface_editor_add_plugin = nullptr;\nGDExtensionInterfaceEditorRemovePlugin gdextension_interface_editor_remove_plugin = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars gdextension_interface_editor_help_load_xml_from_utf8_chars = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceImagePtrw gdextension_interface_image_ptrw = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "6d0834ccbc95080da287135ff736c3ab1ba1a0fbe03dccfd804bf767a3627e0a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 205,
          "offset": 59,
          "length": 66,
          "code": {
            "startLine": 203,
            "length": 66,
            "offset": 273,
            "surroundingCode": "GDExtensionInterfaceEditorRemovePlugin gdextension_interface_editor_remove_plugin = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars gdextension_interface_editor_help_load_xml_from_utf8_chars = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceImagePtrw gdextension_interface_image_ptrw = nullptr;\nGDExtensionInterfaceImagePtr gdextension_interface_image_ptr = nullptr;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "777b7a02473234a2ac42af776905a7deb97372c0a956dd69f5f23dd3655aaffd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_image_ptrw' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 206,
          "offset": 31,
          "length": 32,
          "code": {
            "startLine": 204,
            "length": 32,
            "offset": 288,
            "surroundingCode": "GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars gdextension_interface_editor_help_load_xml_from_utf8_chars = nullptr;\nGDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceImagePtrw gdextension_interface_image_ptrw = nullptr;\nGDExtensionInterfaceImagePtr gdextension_interface_image_ptr = nullptr;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "7c01a76d971375f2899d34157e675dd2f1c00dfc61dd83bf5ac520044c8cdd4b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-non-const-global-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'gdextension_interface_image_ptr' is non-const and globally accessible, consider making it const",
      "detailsInfo": "variable 'train_system_singleton' is non-const and globally accessible, consider making it const",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 207,
          "offset": 30,
          "length": 31,
          "code": {
            "startLine": 205,
            "length": 31,
            "offset": 239,
            "surroundingCode": "GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len = nullptr;\nGDExtensionInterfaceImagePtrw gdextension_interface_image_ptrw = nullptr;\nGDExtensionInterfaceImagePtr gdextension_interface_image_ptr = nullptr;\n\nstruct DocData {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-non-const-global-variables"
      },
      "hash": "ad96cbc1c27dffd816599af4b9e6ca9c501c3f0edc4c80df0ddeb6cbbd028752"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "redundant-inline-specifier",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'is_valid' has inline specifier but is implicitly inlined",
      "detailsInfo": "redundant-inline-specifier",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 215,
          "offset": 2,
          "length": 6,
          "code": {
            "startLine": 213,
            "length": 6,
            "offset": 40,
            "surroundingCode": "\tconst unsigned char *data = nullptr;\n\n\tinline bool is_valid() const {\n\t\treturn hash != nullptr && uncompressed_size > 0 && compressed_size > 0 && data != nullptr;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-redundant-inline-specifier"
      },
      "hash": "64105b4e77bdf813be9791ae8ddafeca363568a0ade79464a90b4c82b8cdb10c"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "easily-swappable-parameters",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "2 adjacent parameters of 'DocDataRegistration' of similar type ('int') are easily swapped by mistake",
      "detailsInfo": "easily-swappable-parameters",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 227,
          "offset": 62,
          "length": 3,
          "code": {
            "startLine": 225,
            "length": 3,
            "offset": 64,
            "surroundingCode": "}\n\nDocDataRegistration::DocDataRegistration(const char *p_hash, int p_uncompressed_size, int p_compressed_size, const unsigned char *p_data) {\n\tDocData &doc_data = get_doc_data();\n\tif (doc_data.is_valid()) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-easily-swappable-parameters"
      },
      "hash": "7d9a4222c79b17c5ed03edd57b65be078382799a73b7ecf729af28f2d70ff1da"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-vararg",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not call c-style vararg functions",
      "detailsInfo": "pro-type-vararg",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 230,
          "offset": 3,
          "length": 6,
          "code": {
            "startLine": 228,
            "length": 6,
            "offset": 67,
            "surroundingCode": "\tDocData &doc_data = get_doc_data();\n\tif (doc_data.is_valid()) {\n\t\tprintf(\"ERROR: Attempting to register documentation data when we already have some - discarding.\\n\");\n\t\treturn;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-vararg"
      },
      "hash": "3c076ba7b427a69597b94c48d9e4855cd133df362fc42b71fc2b34a0dfd44575"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 242,
          "offset": 1,
          "length": 3,
          "code": {
            "startLine": 240,
            "length": 3,
            "offset": 51,
            "surroundingCode": "\nbool GDExtensionBinding::api_initialized = false;\nint GDExtensionBinding::level_initialized[MODULE_INITIALIZATION_LEVEL_MAX] = { 0 };\nGDExtensionBinding::InitDataList GDExtensionBinding::initdata;\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "ee7a3ac963e06e2e270befb6d3d9457c078a56d5d1ecf996dbafce1bfa8cfc88"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "macro-usage",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function-like macro 'ERR_PRINT_EARLY' used; consider a 'constexpr' template function",
      "detailsInfo": "macro-usage",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 245,
          "offset": 9,
          "length": 15,
          "code": {
            "startLine": 243,
            "length": 15,
            "offset": 72,
            "surroundingCode": "GDExtensionBinding::InitDataList GDExtensionBinding::initdata;\n\n#define ERR_PRINT_EARLY(m_msg) \\\n\tinternal::gdextension_interface_print_error(m_msg, FUNCTION_STR, __FILE__, __LINE__, false)\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-macro-usage"
      },
      "hash": "fe715489b6536c978d040c9f35a40b5ad82e9c86bd05708cee6e1910bfc6c4da"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-cognitive-complexity",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'init' has cognitive complexity of 167 (threshold 25)",
      "detailsInfo": "function-cognitive-complexity",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 270,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 268,
            "length": 4,
            "offset": 67,
            "surroundingCode": "} LegacyGDExtensionInterface;\n\nGDExtensionBool GDExtensionBinding::init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, InitData *p_init_data, GDExtensionInitialization *r_initialization) {\n\tif (!p_init_data || !p_init_data->init_callback) {\n\t\tERR_FAIL_V_MSG(false, \"Initialization callback must be defined.\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-cognitive-complexity"
      },
      "hash": "53781225c0f4295d2b86a4131eb6238112079e83461801291f637efb4811e8b8"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "function-size",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "function 'init' exceeds recommended size/complexity thresholds",
      "detailsInfo": "function-size",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 270,
          "offset": 37,
          "length": 4,
          "code": {
            "startLine": 268,
            "length": 4,
            "offset": 67,
            "surroundingCode": "} LegacyGDExtensionInterface;\n\nGDExtensionBool GDExtensionBinding::init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, InitData *p_init_data, GDExtensionInitialization *r_initialization) {\n\tif (!p_init_data || !p_init_data->init_callback) {\n\t\tERR_FAIL_V_MSG(false, \"Initialization callback must be defined.\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-function-size"
      },
      "hash": "61022387f047ffaa38a104507258989db118b723c06962acecdaf6c3df8bd001"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'InitData *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 271,
          "offset": 7,
          "length": 11,
          "code": {
            "startLine": 269,
            "length": 11,
            "offset": 211,
            "surroundingCode": "\nGDExtensionBool GDExtensionBinding::init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, InitData *p_init_data, GDExtensionInitialization *r_initialization) {\n\tif (!p_init_data || !p_init_data->init_callback) {\n\t\tERR_FAIL_V_MSG(false, \"Initialization callback must be defined.\");\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "09ac15f7f48ed97bbc879f61020e9b27b50f6d5d9a6d4ab039596b630cead7c2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Callback' (aka 'void (*)(ModuleInitializationLevel)') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 271,
          "offset": 23,
          "length": 11,
          "code": {
            "startLine": 269,
            "length": 11,
            "offset": 227,
            "surroundingCode": "\nGDExtensionBool GDExtensionBinding::init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, InitData *p_init_data, GDExtensionInitialization *r_initialization) {\n\tif (!p_init_data || !p_init_data->init_callback) {\n\t\tERR_FAIL_V_MSG(false, \"Initialization callback must be defined.\");\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "ca27bc89f15436d91f616cb4e14874ad821d23763e4f11e0fb366c5fd1e57f3e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 281,
          "offset": 10,
          "length": 4,
          "code": {
            "startLine": 279,
            "length": 4,
            "offset": 104,
            "surroundingCode": "\t\tr_initialization->minimum_initialization_level = p_init_data->minimum_initialization_level;\n\n\t\treturn true;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "39c1a1188e244185fd8d6a66b2f8ec61c8f95e877499b70cc40202ff20c6c2ec"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 285,
          "offset": 28,
          "length": 1,
          "code": {
            "startLine": 283,
            "length": 1,
            "offset": 79,
            "surroundingCode": "\n\t// Make sure we weren't passed the legacy struct.\n\tuint32_t *raw_interface = (uint32_t *)(void *)p_get_proc_address;\n\tif (raw_interface[0] == 4 && raw_interface[1] == 0) {\n\t\t// Use the legacy interface only to give a nice error."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "dec09005abaeaf3118c319ae9d71a8c4589af91d7ff9d46d225d03d7335e9f07"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "casting-through-void",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not cast 'GDExtensionInterfaceGetProcAddress' (aka 'void (*(*)(const char *))()') to 'uint32_t *' (aka 'unsigned int *') through 'void *'",
      "detailsInfo": "casting-through-void",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 285,
          "offset": 40,
          "length": 1,
          "code": {
            "startLine": 283,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\n\t// Make sure we weren't passed the legacy struct.\n\tuint32_t *raw_interface = (uint32_t *)(void *)p_get_proc_address;\n\tif (raw_interface[0] == 4 && raw_interface[1] == 0) {\n\t\t// Use the legacy interface only to give a nice error."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-casting-through-void"
      },
      "hash": "4821080ac1824f8113efbcb90695a5e7be9474f673f7dc4e80e66ae1dd88bb99"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 285,
          "offset": 40,
          "length": 1,
          "code": {
            "startLine": 283,
            "length": 1,
            "offset": 91,
            "surroundingCode": "\n\t// Make sure we weren't passed the legacy struct.\n\tuint32_t *raw_interface = (uint32_t *)(void *)p_get_proc_address;\n\tif (raw_interface[0] == 4 && raw_interface[1] == 0) {\n\t\t// Use the legacy interface only to give a nice error."
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "68ac57aa7b856c5e5efc6070996ce31d783412b66e5dabb347fe1a9c4eea10e9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 286,
          "offset": 6,
          "length": 13,
          "code": {
            "startLine": 284,
            "length": 13,
            "offset": 123,
            "surroundingCode": "\t// Make sure we weren't passed the legacy struct.\n\tuint32_t *raw_interface = (uint32_t *)(void *)p_get_proc_address;\n\tif (raw_interface[0] == 4 && raw_interface[1] == 0) {\n\t\t// Use the legacy interface only to give a nice error.\n\t\tLegacyGDExtensionInterface *legacy_interface = (LegacyGDExtensionInterface *)p_get_proc_address;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "64551371d34f198f0c236f461c8982e05447079799efaa13faee48ed8b21e057"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 286,
          "offset": 31,
          "length": 13,
          "code": {
            "startLine": 284,
            "length": 13,
            "offset": 148,
            "surroundingCode": "\t// Make sure we weren't passed the legacy struct.\n\tuint32_t *raw_interface = (uint32_t *)(void *)p_get_proc_address;\n\tif (raw_interface[0] == 4 && raw_interface[1] == 0) {\n\t\t// Use the legacy interface only to give a nice error.\n\t\tLegacyGDExtensionInterface *legacy_interface = (LegacyGDExtensionInterface *)p_get_proc_address;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "1c61e62e8b2d7ff69ee9477e0bb9c21dbf39145fa4597bbf87d4ea13a44ea4c7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 288,
          "offset": 50,
          "length": 1,
          "code": {
            "startLine": 286,
            "length": 1,
            "offset": 161,
            "surroundingCode": "\tif (raw_interface[0] == 4 && raw_interface[1] == 0) {\n\t\t// Use the legacy interface only to give a nice error.\n\t\tLegacyGDExtensionInterface *legacy_interface = (LegacyGDExtensionInterface *)p_get_proc_address;\n\t\tinternal::gdextension_interface_print_error = (GDExtensionInterfacePrintError)legacy_interface->print_error;\n\t\tERR_PRINT_EARLY(\"Cannot load a GDExtension built for Godot 4.1+ in Godot 4.0.\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "593b52a6c204eb8bd976636cdadfad34dcb1c72edf50679d8a8cb81c8d50e9b2"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "redundant-casting",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "redundant explicit casting to the same type 'GDExtensionInterfacePrintError' (aka 'void (*)(const char *, const char *, const char *, int, unsigned char)') as the sub-expression, remove this casting",
      "detailsInfo": "redundant-casting",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 289,
          "offset": 49,
          "length": 1,
          "code": {
            "startLine": 287,
            "length": 1,
            "offset": 204,
            "surroundingCode": "\t\t// Use the legacy interface only to give a nice error.\n\t\tLegacyGDExtensionInterface *legacy_interface = (LegacyGDExtensionInterface *)p_get_proc_address;\n\t\tinternal::gdextension_interface_print_error = (GDExtensionInterfacePrintError)legacy_interface->print_error;\n\t\tERR_PRINT_EARLY(\"Cannot load a GDExtension built for Godot 4.1+ in Godot 4.0.\");\n\t\treturn false;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-redundant-casting"
      },
      "hash": "e0bbc32db26ee6d1577cd3ac25f57722f9b4b7ecc920f1637cc8393ffdab66f4"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 291,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 289,
            "length": 5,
            "offset": 203,
            "surroundingCode": "\t\tinternal::gdextension_interface_print_error = (GDExtensionInterfacePrintError)legacy_interface->print_error;\n\t\tERR_PRINT_EARLY(\"Cannot load a GDExtension built for Godot 4.1+ in Godot 4.0.\");\n\t\treturn false;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "70d1cbfdfbf70cb4b7127de062ef520ceabb5b457cb1ae871d58b79762906330"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 295,
          "offset": 48,
          "length": 1,
          "code": {
            "startLine": 293,
            "length": 1,
            "offset": 131,
            "surroundingCode": "\n\t// Load the \"print_error\" function first (needed by the ERR_PRINT_EARLY() macro).\n\tinternal::gdextension_interface_print_error = (GDExtensionInterfacePrintError)p_get_proc_address(\"print_error\");\n\tif (!internal::gdextension_interface_print_error) {\n\t\tprintf(\"ERROR: Unable to load GDExtension interface function print_error().\\n\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "67980fd6c278bd1fed36e5ae325ddda343750008bf154cbd09c0446c4be5e620"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'GDExtensionInterfacePrintError' (aka 'void (*)(const char *, const char *, const char *, int, unsigned char)') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 296,
          "offset": 7,
          "length": 8,
          "code": {
            "startLine": 294,
            "length": 8,
            "offset": 203,
            "surroundingCode": "\t// Load the \"print_error\" function first (needed by the ERR_PRINT_EARLY() macro).\n\tinternal::gdextension_interface_print_error = (GDExtensionInterfacePrintError)p_get_proc_address(\"print_error\");\n\tif (!internal::gdextension_interface_print_error) {\n\t\tprintf(\"ERROR: Unable to load GDExtension interface function print_error().\\n\");\n\t\treturn false;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "7fb50423bdbe1333434aa89af8fb2a6e1f3472317b223cd43d068b1525527ff3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-vararg",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not call c-style vararg functions",
      "detailsInfo": "pro-type-vararg",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 297,
          "offset": 3,
          "length": 6,
          "code": {
            "startLine": 295,
            "length": 6,
            "offset": 169,
            "surroundingCode": "\tinternal::gdextension_interface_print_error = (GDExtensionInterfacePrintError)p_get_proc_address(\"print_error\");\n\tif (!internal::gdextension_interface_print_error) {\n\t\tprintf(\"ERROR: Unable to load GDExtension interface function print_error().\\n\");\n\t\treturn false;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-vararg"
      },
      "hash": "bbcbb130fce368906565891d66d5bb03ebb31e3313b67a064f48bda6e88b5f74"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 298,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 296,
            "length": 5,
            "offset": 145,
            "surroundingCode": "\tif (!internal::gdextension_interface_print_error) {\n\t\tprintf(\"ERROR: Unable to load GDExtension interface function print_error().\\n\");\n\t\treturn false;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "83927020abbaa426a34e6a8966dc74db0cf6f9303f0a60354d01bb7c0d2ca799"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 305,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 303,
            "length": 17,
            "offset": 32,
            "surroundingCode": "\tinternal::token = p_library;\n\n\tLOAD_PROC_ADDRESS(get_godot_version, GDExtensionInterfaceGetGodotVersion);\n\tinternal::gdextension_interface_get_godot_version(&internal::godot_version);\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9821af44703024522c388ae99460c851ab46cae23dff7196cd46f474e03213b2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "init-variables",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "variable 'compatible' is not initialized",
      "detailsInfo": "init-variables",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 310,
          "offset": 7,
          "length": 10,
          "code": {
            "startLine": 308,
            "length": 10,
            "offset": 138,
            "surroundingCode": "\t// Check that godot-cpp was compiled using an extension_api.json older or at the\n\t// same version as the Godot that is loading it.\n\tbool compatible;\n\tif (internal::godot_version.major != GODOT_VERSION_MAJOR) {\n\t\tcompatible = internal::godot_version.major > GODOT_VERSION_MAJOR;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-init-variables"
      },
      "hash": "45c895dbd1f5875b4f0767aa5e6c9c19f989cc3b71b8355435e9b8b614770e12"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "branch-clone",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "repeated branch body in conditional chain",
      "detailsInfo": "branch-clone",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 311,
          "offset": 60,
          "length": 1,
          "code": {
            "startLine": 309,
            "length": 1,
            "offset": 127,
            "surroundingCode": "\t// same version as the Godot that is loading it.\n\tbool compatible;\n\tif (internal::godot_version.major != GODOT_VERSION_MAJOR) {\n\t\tcompatible = internal::godot_version.major > GODOT_VERSION_MAJOR;\n\t} else if (internal::godot_version.minor != GODOT_VERSION_MINOR) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-branch-clone"
      },
      "hash": "4ff21e36e20748ddb78bc74b302590e5c68988513eb0a58d6b3994451af51b04"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-c-arrays",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not declare C-style arrays, use std::array<> instead",
      "detailsInfo": "avoid-c-arrays",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 326,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 324,
            "length": 4,
            "offset": 155,
            "surroundingCode": "\t\t// We need to use snprintf() here because vformat() uses Variant, and we haven't loaded\n\t\t// the GDExtension interface far enough to use Variants yet.\n\t\tchar msg[128];\n\t\tsnprintf(msg, 128, \"Cannot load a GDExtension built for Godot %d.%d.%d using an older version of Godot (%d.%d.%d).\",\n\t\t\t\tGODOT_VERSION_MAJOR, GODOT_VERSION_MINOR, GODOT_VERSION_PATCH,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-c-arrays"
      },
      "hash": "c084689669fbc66572eecde59c944a4a2792b4cc3d2a3a0d9aef4c7307727413"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "128 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 326,
          "offset": 12,
          "length": 3,
          "code": {
            "startLine": 324,
            "length": 3,
            "offset": 164,
            "surroundingCode": "\t\t// We need to use snprintf() here because vformat() uses Variant, and we haven't loaded\n\t\t// the GDExtension interface far enough to use Variants yet.\n\t\tchar msg[128];\n\t\tsnprintf(msg, 128, \"Cannot load a GDExtension built for Godot %d.%d.%d using an older version of Godot (%d.%d.%d).\",\n\t\t\t\tGODOT_VERSION_MAJOR, GODOT_VERSION_MINOR, GODOT_VERSION_PATCH,"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7f3f9dbc45329d9dd7c97ba1f1de0c7088a970d647ab50197ee84b48f6397f1f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-array-to-pointer-decay",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead",
      "detailsInfo": "pro-bounds-array-to-pointer-decay",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 330,
          "offset": 19,
          "length": 3,
          "code": {
            "startLine": 328,
            "length": 3,
            "offset": 183,
            "surroundingCode": "\t\t\t\tGODOT_VERSION_MAJOR, GODOT_VERSION_MINOR, GODOT_VERSION_PATCH,\n\t\t\t\tinternal::godot_version.major, internal::godot_version.minor, internal::godot_version.patch);\n\t\tERR_PRINT_EARLY(msg);\n\t\treturn false;\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-array-to-pointer-decay"
      },
      "hash": "0ca767583ef833ac167805291483894fb3ed03cb3feba47057ceb80eb863ba7b"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 331,
          "offset": 10,
          "length": 5,
          "code": {
            "startLine": 329,
            "length": 5,
            "offset": 131,
            "surroundingCode": "\t\t\t\tinternal::godot_version.major, internal::godot_version.minor, internal::godot_version.patch);\n\t\tERR_PRINT_EARLY(msg);\n\t\treturn false;\n\t}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "da70d19ad091bd874998989fedc17035d955d3df3a44d110c1d76d89fb49dd75"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 335,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 333,
            "length": 17,
            "offset": 63,
            "surroundingCode": "\n\tLOAD_PROC_ADDRESS(mem_alloc, GDExtensionInterfaceMemAlloc);\n\tLOAD_PROC_ADDRESS(mem_realloc, GDExtensionInterfaceMemRealloc);\n\tLOAD_PROC_ADDRESS(mem_free, GDExtensionInterfaceMemFree);\n\tLOAD_PROC_ADDRESS(print_error_with_message, GDExtensionInterfacePrintErrorWithMessage);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "54f427f2d1819e3d3c384c7bec8d5b0cfde9b57456939cd659e805fd7f03b54f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 336,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 334,
            "length": 17,
            "offset": 127,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(mem_alloc, GDExtensionInterfaceMemAlloc);\n\tLOAD_PROC_ADDRESS(mem_realloc, GDExtensionInterfaceMemRealloc);\n\tLOAD_PROC_ADDRESS(mem_free, GDExtensionInterfaceMemFree);\n\tLOAD_PROC_ADDRESS(print_error_with_message, GDExtensionInterfacePrintErrorWithMessage);\n\tLOAD_PROC_ADDRESS(print_warning, GDExtensionInterfacePrintWarning);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "5f45d2906b32cb4a0a82ca45af000a5c9fc310fb06d9809352a8659c18063f2d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 337,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 335,
            "length": 17,
            "offset": 125,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(mem_realloc, GDExtensionInterfaceMemRealloc);\n\tLOAD_PROC_ADDRESS(mem_free, GDExtensionInterfaceMemFree);\n\tLOAD_PROC_ADDRESS(print_error_with_message, GDExtensionInterfacePrintErrorWithMessage);\n\tLOAD_PROC_ADDRESS(print_warning, GDExtensionInterfacePrintWarning);\n\tLOAD_PROC_ADDRESS(print_warning_with_message, GDExtensionInterfacePrintWarningWithMessage);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "aefadb55fe80c32c25f0ad9b961c4b3d1d947e636b639ba3bcf4da14cadb8e73"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 338,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 336,
            "length": 17,
            "offset": 149,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(mem_free, GDExtensionInterfaceMemFree);\n\tLOAD_PROC_ADDRESS(print_error_with_message, GDExtensionInterfacePrintErrorWithMessage);\n\tLOAD_PROC_ADDRESS(print_warning, GDExtensionInterfacePrintWarning);\n\tLOAD_PROC_ADDRESS(print_warning_with_message, GDExtensionInterfacePrintWarningWithMessage);\n\tLOAD_PROC_ADDRESS(print_script_error, GDExtensionInterfacePrintScriptError);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b85f13267ee42afa37e21f4af645300fe3a08e81a24e13869a76275c770d4d1b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 339,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 337,
            "length": 17,
            "offset": 159,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(print_error_with_message, GDExtensionInterfacePrintErrorWithMessage);\n\tLOAD_PROC_ADDRESS(print_warning, GDExtensionInterfacePrintWarning);\n\tLOAD_PROC_ADDRESS(print_warning_with_message, GDExtensionInterfacePrintWarningWithMessage);\n\tLOAD_PROC_ADDRESS(print_script_error, GDExtensionInterfacePrintScriptError);\n\tLOAD_PROC_ADDRESS(print_script_error_with_message, GDExtensionInterfacePrintScriptErrorWithMessage);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "0ee4787d6081bd59971366ca1f01275f87706801d4eb0a22e4c220159f4294a3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 340,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 338,
            "length": 17,
            "offset": 163,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(print_warning, GDExtensionInterfacePrintWarning);\n\tLOAD_PROC_ADDRESS(print_warning_with_message, GDExtensionInterfacePrintWarningWithMessage);\n\tLOAD_PROC_ADDRESS(print_script_error, GDExtensionInterfacePrintScriptError);\n\tLOAD_PROC_ADDRESS(print_script_error_with_message, GDExtensionInterfacePrintScriptErrorWithMessage);\n\tLOAD_PROC_ADDRESS(get_native_struct_size, GDExtensionInterfaceGetNativeStructSize);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "49354553b22cd3813cd5bb2e377d52b69454c4f20193c6305a7c081994afdda9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 341,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 339,
            "length": 17,
            "offset": 172,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(print_warning_with_message, GDExtensionInterfacePrintWarningWithMessage);\n\tLOAD_PROC_ADDRESS(print_script_error, GDExtensionInterfacePrintScriptError);\n\tLOAD_PROC_ADDRESS(print_script_error_with_message, GDExtensionInterfacePrintScriptErrorWithMessage);\n\tLOAD_PROC_ADDRESS(get_native_struct_size, GDExtensionInterfaceGetNativeStructSize);\n\tLOAD_PROC_ADDRESS(variant_new_copy, GDExtensionInterfaceVariantNewCopy);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "7474de44eb833f85249364924abfb2d25fcbf7a923f772702c57d1a8b7c039be"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 342,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 340,
            "length": 17,
            "offset": 181,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(print_script_error, GDExtensionInterfacePrintScriptError);\n\tLOAD_PROC_ADDRESS(print_script_error_with_message, GDExtensionInterfacePrintScriptErrorWithMessage);\n\tLOAD_PROC_ADDRESS(get_native_struct_size, GDExtensionInterfaceGetNativeStructSize);\n\tLOAD_PROC_ADDRESS(variant_new_copy, GDExtensionInterfaceVariantNewCopy);\n\tLOAD_PROC_ADDRESS(variant_new_nil, GDExtensionInterfaceVariantNewNil);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "eebc955e115071363f0dfa69305ffe44d719f9b99e176c444a323801f4ed481c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 343,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 341,
            "length": 17,
            "offset": 188,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(print_script_error_with_message, GDExtensionInterfacePrintScriptErrorWithMessage);\n\tLOAD_PROC_ADDRESS(get_native_struct_size, GDExtensionInterfaceGetNativeStructSize);\n\tLOAD_PROC_ADDRESS(variant_new_copy, GDExtensionInterfaceVariantNewCopy);\n\tLOAD_PROC_ADDRESS(variant_new_nil, GDExtensionInterfaceVariantNewNil);\n\tLOAD_PROC_ADDRESS(variant_destroy, GDExtensionInterfaceVariantDestroy);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d40612ca3136cea3ed0f33520a0a1e76f183b76e001131b06a5efd31c9207cfb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 344,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 342,
            "length": 17,
            "offset": 160,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(get_native_struct_size, GDExtensionInterfaceGetNativeStructSize);\n\tLOAD_PROC_ADDRESS(variant_new_copy, GDExtensionInterfaceVariantNewCopy);\n\tLOAD_PROC_ADDRESS(variant_new_nil, GDExtensionInterfaceVariantNewNil);\n\tLOAD_PROC_ADDRESS(variant_destroy, GDExtensionInterfaceVariantDestroy);\n\tLOAD_PROC_ADDRESS(variant_call, GDExtensionInterfaceVariantCall);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "e363f2f7d0a1c13b30e43e036b2a20e84686a55b8c697a76b7c7aa1390b498e1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 345,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 343,
            "length": 17,
            "offset": 147,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_new_copy, GDExtensionInterfaceVariantNewCopy);\n\tLOAD_PROC_ADDRESS(variant_new_nil, GDExtensionInterfaceVariantNewNil);\n\tLOAD_PROC_ADDRESS(variant_destroy, GDExtensionInterfaceVariantDestroy);\n\tLOAD_PROC_ADDRESS(variant_call, GDExtensionInterfaceVariantCall);\n\tLOAD_PROC_ADDRESS(variant_call_static, GDExtensionInterfaceVariantCallStatic);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "afd9dd0fd069062c6edd40bd8adb006d358d008e036de86a275e7f871bb579a8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 346,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 344,
            "length": 17,
            "offset": 146,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_new_nil, GDExtensionInterfaceVariantNewNil);\n\tLOAD_PROC_ADDRESS(variant_destroy, GDExtensionInterfaceVariantDestroy);\n\tLOAD_PROC_ADDRESS(variant_call, GDExtensionInterfaceVariantCall);\n\tLOAD_PROC_ADDRESS(variant_call_static, GDExtensionInterfaceVariantCallStatic);\n\tLOAD_PROC_ADDRESS(variant_evaluate, GDExtensionInterfaceVariantEvaluate);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b4e13dae0df2512a815839d3d7441d5b2e56dadd51f665d4f44ae191cb84c8f6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 347,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 345,
            "length": 17,
            "offset": 141,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_destroy, GDExtensionInterfaceVariantDestroy);\n\tLOAD_PROC_ADDRESS(variant_call, GDExtensionInterfaceVariantCall);\n\tLOAD_PROC_ADDRESS(variant_call_static, GDExtensionInterfaceVariantCallStatic);\n\tLOAD_PROC_ADDRESS(variant_evaluate, GDExtensionInterfaceVariantEvaluate);\n\tLOAD_PROC_ADDRESS(variant_set, GDExtensionInterfaceVariantSet);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9bd9f7e09be4ea2c5ea38f6d295d75c97f582e135fe8d9c2b3a186b624e1e95c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 348,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 346,
            "length": 17,
            "offset": 148,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_call, GDExtensionInterfaceVariantCall);\n\tLOAD_PROC_ADDRESS(variant_call_static, GDExtensionInterfaceVariantCallStatic);\n\tLOAD_PROC_ADDRESS(variant_evaluate, GDExtensionInterfaceVariantEvaluate);\n\tLOAD_PROC_ADDRESS(variant_set, GDExtensionInterfaceVariantSet);\n\tLOAD_PROC_ADDRESS(variant_set_named, GDExtensionInterfaceVariantSetNamed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "3e61bc3fab0de761b8fa6d9af7610b7069504441856f0fe1d62914dde9154ae7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 349,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 347,
            "length": 17,
            "offset": 156,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_call_static, GDExtensionInterfaceVariantCallStatic);\n\tLOAD_PROC_ADDRESS(variant_evaluate, GDExtensionInterfaceVariantEvaluate);\n\tLOAD_PROC_ADDRESS(variant_set, GDExtensionInterfaceVariantSet);\n\tLOAD_PROC_ADDRESS(variant_set_named, GDExtensionInterfaceVariantSetNamed);\n\tLOAD_PROC_ADDRESS(variant_set_keyed, GDExtensionInterfaceVariantSetKeyed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "e02e9fcc3fdd1518a2d2d92b9335a0c1aeb36c2bc8d7ab12ef85229c25c117ce"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 350,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 348,
            "length": 17,
            "offset": 141,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_evaluate, GDExtensionInterfaceVariantEvaluate);\n\tLOAD_PROC_ADDRESS(variant_set, GDExtensionInterfaceVariantSet);\n\tLOAD_PROC_ADDRESS(variant_set_named, GDExtensionInterfaceVariantSetNamed);\n\tLOAD_PROC_ADDRESS(variant_set_keyed, GDExtensionInterfaceVariantSetKeyed);\n\tLOAD_PROC_ADDRESS(variant_set_indexed, GDExtensionInterfaceVariantSetIndexed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "374cc763bd4203aa5a25b5331a9408034ab8225285604668dcd27f2cc49f0721"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 351,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 349,
            "length": 17,
            "offset": 142,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_set, GDExtensionInterfaceVariantSet);\n\tLOAD_PROC_ADDRESS(variant_set_named, GDExtensionInterfaceVariantSetNamed);\n\tLOAD_PROC_ADDRESS(variant_set_keyed, GDExtensionInterfaceVariantSetKeyed);\n\tLOAD_PROC_ADDRESS(variant_set_indexed, GDExtensionInterfaceVariantSetIndexed);\n\tLOAD_PROC_ADDRESS(variant_get, GDExtensionInterfaceVariantGet);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "845e6ae86babcabd2ba4dfe35a41adb26306eb898ca5ebd23bafff4c05f04046"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 353,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 351,
            "length": 17,
            "offset": 157,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_set_keyed, GDExtensionInterfaceVariantSetKeyed);\n\tLOAD_PROC_ADDRESS(variant_set_indexed, GDExtensionInterfaceVariantSetIndexed);\n\tLOAD_PROC_ADDRESS(variant_get, GDExtensionInterfaceVariantGet);\n\tLOAD_PROC_ADDRESS(variant_get_named, GDExtensionInterfaceVariantGetNamed);\n\tLOAD_PROC_ADDRESS(variant_get_keyed, GDExtensionInterfaceVariantGetKeyed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6c0c836fe57acaa009b772a846344ee5a5e5e8e1bb21667b8bfc87d42af9c786"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 354,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 352,
            "length": 17,
            "offset": 146,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_set_indexed, GDExtensionInterfaceVariantSetIndexed);\n\tLOAD_PROC_ADDRESS(variant_get, GDExtensionInterfaceVariantGet);\n\tLOAD_PROC_ADDRESS(variant_get_named, GDExtensionInterfaceVariantGetNamed);\n\tLOAD_PROC_ADDRESS(variant_get_keyed, GDExtensionInterfaceVariantGetKeyed);\n\tLOAD_PROC_ADDRESS(variant_get_indexed, GDExtensionInterfaceVariantGetIndexed);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d05043d566d19329c32033bfdf0c3c42c2771fb34dadc809e5593b885bcd627e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 355,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 353,
            "length": 17,
            "offset": 142,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get, GDExtensionInterfaceVariantGet);\n\tLOAD_PROC_ADDRESS(variant_get_named, GDExtensionInterfaceVariantGetNamed);\n\tLOAD_PROC_ADDRESS(variant_get_keyed, GDExtensionInterfaceVariantGetKeyed);\n\tLOAD_PROC_ADDRESS(variant_get_indexed, GDExtensionInterfaceVariantGetIndexed);\n\tLOAD_PROC_ADDRESS(variant_iter_init, GDExtensionInterfaceVariantIterInit);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "803df759d12f80a74ccd5ac783c7f31769bedb32d8c20873e4b79a872b56301a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 356,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 354,
            "length": 17,
            "offset": 153,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_named, GDExtensionInterfaceVariantGetNamed);\n\tLOAD_PROC_ADDRESS(variant_get_keyed, GDExtensionInterfaceVariantGetKeyed);\n\tLOAD_PROC_ADDRESS(variant_get_indexed, GDExtensionInterfaceVariantGetIndexed);\n\tLOAD_PROC_ADDRESS(variant_iter_init, GDExtensionInterfaceVariantIterInit);\n\tLOAD_PROC_ADDRESS(variant_iter_next, GDExtensionInterfaceVariantIterNext);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9bccd89db3fddeca0b30ee517108f1d96fbb6b3c31dd4a348820b83ce52262aa"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 357,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 355,
            "length": 17,
            "offset": 157,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_keyed, GDExtensionInterfaceVariantGetKeyed);\n\tLOAD_PROC_ADDRESS(variant_get_indexed, GDExtensionInterfaceVariantGetIndexed);\n\tLOAD_PROC_ADDRESS(variant_iter_init, GDExtensionInterfaceVariantIterInit);\n\tLOAD_PROC_ADDRESS(variant_iter_next, GDExtensionInterfaceVariantIterNext);\n\tLOAD_PROC_ADDRESS(variant_iter_get, GDExtensionInterfaceVariantIterGet);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "f0b37a96718c80f696e31b4b0e1d5fcb93209c8e19705487a3580a125d0fbac6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 358,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 356,
            "length": 17,
            "offset": 157,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_indexed, GDExtensionInterfaceVariantGetIndexed);\n\tLOAD_PROC_ADDRESS(variant_iter_init, GDExtensionInterfaceVariantIterInit);\n\tLOAD_PROC_ADDRESS(variant_iter_next, GDExtensionInterfaceVariantIterNext);\n\tLOAD_PROC_ADDRESS(variant_iter_get, GDExtensionInterfaceVariantIterGet);\n\tLOAD_PROC_ADDRESS(variant_hash, GDExtensionInterfaceVariantHash);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ec30a32fa4eaa3c66a1b2b1c5c36cf4fe64524c0c3055885df5bf3e9e66cdad8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 359,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 357,
            "length": 17,
            "offset": 153,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_iter_init, GDExtensionInterfaceVariantIterInit);\n\tLOAD_PROC_ADDRESS(variant_iter_next, GDExtensionInterfaceVariantIterNext);\n\tLOAD_PROC_ADDRESS(variant_iter_get, GDExtensionInterfaceVariantIterGet);\n\tLOAD_PROC_ADDRESS(variant_hash, GDExtensionInterfaceVariantHash);\n\tLOAD_PROC_ADDRESS(variant_recursive_hash, GDExtensionInterfaceVariantRecursiveHash);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6d4098b4be3ef0955ebae455741c8516f9a459df603089cfa5e8c911b0c1a95a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 360,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 358,
            "length": 17,
            "offset": 151,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_iter_next, GDExtensionInterfaceVariantIterNext);\n\tLOAD_PROC_ADDRESS(variant_iter_get, GDExtensionInterfaceVariantIterGet);\n\tLOAD_PROC_ADDRESS(variant_hash, GDExtensionInterfaceVariantHash);\n\tLOAD_PROC_ADDRESS(variant_recursive_hash, GDExtensionInterfaceVariantRecursiveHash);\n\tLOAD_PROC_ADDRESS(variant_hash_compare, GDExtensionInterfaceVariantHashCompare);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "54f90386a2a9097917d01779c54a40f4ba3598beac45f30dee8eba461eeebabb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 361,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 359,
            "length": 17,
            "offset": 142,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_iter_get, GDExtensionInterfaceVariantIterGet);\n\tLOAD_PROC_ADDRESS(variant_hash, GDExtensionInterfaceVariantHash);\n\tLOAD_PROC_ADDRESS(variant_recursive_hash, GDExtensionInterfaceVariantRecursiveHash);\n\tLOAD_PROC_ADDRESS(variant_hash_compare, GDExtensionInterfaceVariantHashCompare);\n\tLOAD_PROC_ADDRESS(variant_booleanize, GDExtensionInterfaceVariantBooleanize);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b4ad79086e8d2e6c7cc9136c3cd8dff60d05d54c020652aa9d5f4211636f7c43"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 363,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 361,
            "length": 17,
            "offset": 169,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_recursive_hash, GDExtensionInterfaceVariantRecursiveHash);\n\tLOAD_PROC_ADDRESS(variant_hash_compare, GDExtensionInterfaceVariantHashCompare);\n\tLOAD_PROC_ADDRESS(variant_booleanize, GDExtensionInterfaceVariantBooleanize);\n\tLOAD_PROC_ADDRESS(variant_duplicate, GDExtensionInterfaceVariantDuplicate);\n\tLOAD_PROC_ADDRESS(variant_stringify, GDExtensionInterfaceVariantStringify);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b45b43f1ae9f8e24fce587c69242105f8487f88fbe3d4306ebcf3c38881731ae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 364,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 362,
            "length": 17,
            "offset": 162,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_hash_compare, GDExtensionInterfaceVariantHashCompare);\n\tLOAD_PROC_ADDRESS(variant_booleanize, GDExtensionInterfaceVariantBooleanize);\n\tLOAD_PROC_ADDRESS(variant_duplicate, GDExtensionInterfaceVariantDuplicate);\n\tLOAD_PROC_ADDRESS(variant_stringify, GDExtensionInterfaceVariantStringify);\n\tLOAD_PROC_ADDRESS(variant_get_type, GDExtensionInterfaceVariantGetType);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6867fa62fc5a2fc9e59d484efe09848431a8a200c6ec8aaae651dfd3c5bbfc46"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 365,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 363,
            "length": 17,
            "offset": 157,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_booleanize, GDExtensionInterfaceVariantBooleanize);\n\tLOAD_PROC_ADDRESS(variant_duplicate, GDExtensionInterfaceVariantDuplicate);\n\tLOAD_PROC_ADDRESS(variant_stringify, GDExtensionInterfaceVariantStringify);\n\tLOAD_PROC_ADDRESS(variant_get_type, GDExtensionInterfaceVariantGetType);\n\tLOAD_PROC_ADDRESS(variant_has_method, GDExtensionInterfaceVariantHasMethod);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "3c8f8a93af1da901c83f55e7d18daea54f18e25b1f95e699c21b15c822e6c6e3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 368,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 366,
            "length": 17,
            "offset": 153,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_type, GDExtensionInterfaceVariantGetType);\n\tLOAD_PROC_ADDRESS(variant_has_method, GDExtensionInterfaceVariantHasMethod);\n\tLOAD_PROC_ADDRESS(variant_has_member, GDExtensionInterfaceVariantHasMember);\n\tLOAD_PROC_ADDRESS(variant_has_key, GDExtensionInterfaceVariantHasKey);\n\tLOAD_PROC_ADDRESS(variant_get_type_name, GDExtensionInterfaceVariantGetTypeName);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "fe97a2d4243270aa4856ef41828d59fd0104246a62bc928f595564c3ca609995"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 369,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 367,
            "length": 17,
            "offset": 157,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_has_method, GDExtensionInterfaceVariantHasMethod);\n\tLOAD_PROC_ADDRESS(variant_has_member, GDExtensionInterfaceVariantHasMember);\n\tLOAD_PROC_ADDRESS(variant_has_key, GDExtensionInterfaceVariantHasKey);\n\tLOAD_PROC_ADDRESS(variant_get_type_name, GDExtensionInterfaceVariantGetTypeName);\n\tLOAD_PROC_ADDRESS(variant_can_convert, GDExtensionInterfaceVariantCanConvert);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "de46e8c9f6b0f1b9aed7b441693b828644292f49fa90d69765c3f51c29c3ff27"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 370,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 368,
            "length": 17,
            "offset": 151,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_has_member, GDExtensionInterfaceVariantHasMember);\n\tLOAD_PROC_ADDRESS(variant_has_key, GDExtensionInterfaceVariantHasKey);\n\tLOAD_PROC_ADDRESS(variant_get_type_name, GDExtensionInterfaceVariantGetTypeName);\n\tLOAD_PROC_ADDRESS(variant_can_convert, GDExtensionInterfaceVariantCanConvert);\n\tLOAD_PROC_ADDRESS(variant_can_convert_strict, GDExtensionInterfaceVariantCanConvertStrict);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "53e0ac25d046ea697f8bb86516be020fc9506102eb03f0987f449d6edbc05b45"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 371,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 369,
            "length": 17,
            "offset": 156,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_has_key, GDExtensionInterfaceVariantHasKey);\n\tLOAD_PROC_ADDRESS(variant_get_type_name, GDExtensionInterfaceVariantGetTypeName);\n\tLOAD_PROC_ADDRESS(variant_can_convert, GDExtensionInterfaceVariantCanConvert);\n\tLOAD_PROC_ADDRESS(variant_can_convert_strict, GDExtensionInterfaceVariantCanConvertStrict);\n\tLOAD_PROC_ADDRESS(get_variant_from_type_constructor, GDExtensionInterfaceGetVariantFromTypeConstructor);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "64ee06867ca1ce88e40bea480b14f57dc134e468b9ef3018465bafb91dd076b3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 375,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 373,
            "length": 17,
            "offset": 209,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(get_variant_from_type_constructor, GDExtensionInterfaceGetVariantFromTypeConstructor);\n\tLOAD_PROC_ADDRESS(get_variant_to_type_constructor, GDExtensionInterfaceGetVariantToTypeConstructor);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_operator_evaluator, GDExtensionInterfaceVariantGetPtrOperatorEvaluator);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_builtin_method, GDExtensionInterfaceVariantGetPtrBuiltinMethod);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_constructor, GDExtensionInterfaceVariantGetPtrConstructor);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c439a4065afad5f1c65269e8531ae491f751913efa1517e946805554d6abcd7f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 376,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 374,
            "length": 17,
            "offset": 211,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(get_variant_to_type_constructor, GDExtensionInterfaceGetVariantToTypeConstructor);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_operator_evaluator, GDExtensionInterfaceVariantGetPtrOperatorEvaluator);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_builtin_method, GDExtensionInterfaceVariantGetPtrBuiltinMethod);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_constructor, GDExtensionInterfaceVariantGetPtrConstructor);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_destructor, GDExtensionInterfaceVariantGetPtrDestructor);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "531ae87e3d372a6a65f6fd745555a9fba112aaf11127dc75de026dc3058a9aeb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 377,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 375,
            "length": 17,
            "offset": 209,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_operator_evaluator, GDExtensionInterfaceVariantGetPtrOperatorEvaluator);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_builtin_method, GDExtensionInterfaceVariantGetPtrBuiltinMethod);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_constructor, GDExtensionInterfaceVariantGetPtrConstructor);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_destructor, GDExtensionInterfaceVariantGetPtrDestructor);\n\tLOAD_PROC_ADDRESS(variant_construct, GDExtensionInterfaceVariantConstruct);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d700be6744a067fc402c63e11654eaf1d388a33fe1fb1d81ecd3f13309676106"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 378,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 376,
            "length": 17,
            "offset": 196,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_builtin_method, GDExtensionInterfaceVariantGetPtrBuiltinMethod);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_constructor, GDExtensionInterfaceVariantGetPtrConstructor);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_destructor, GDExtensionInterfaceVariantGetPtrDestructor);\n\tLOAD_PROC_ADDRESS(variant_construct, GDExtensionInterfaceVariantConstruct);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_setter, GDExtensionInterfaceVariantGetPtrSetter);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "4d8330b45bcc339196595fe2f01de3a7bd7b906f565d114f24d59a8e1a55ed60"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 379,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 377,
            "length": 17,
            "offset": 189,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_constructor, GDExtensionInterfaceVariantGetPtrConstructor);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_destructor, GDExtensionInterfaceVariantGetPtrDestructor);\n\tLOAD_PROC_ADDRESS(variant_construct, GDExtensionInterfaceVariantConstruct);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_setter, GDExtensionInterfaceVariantGetPtrSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_getter, GDExtensionInterfaceVariantGetPtrGetter);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ca759d2ee029a5e0195cc14c18d80a6516774353742346e51fabef7f61b83ad8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 380,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 378,
            "length": 17,
            "offset": 171,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_destructor, GDExtensionInterfaceVariantGetPtrDestructor);\n\tLOAD_PROC_ADDRESS(variant_construct, GDExtensionInterfaceVariantConstruct);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_setter, GDExtensionInterfaceVariantGetPtrSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_getter, GDExtensionInterfaceVariantGetPtrGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_indexed_setter, GDExtensionInterfaceVariantGetPtrIndexedSetter);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "85cc9da7a8dbe286b9af0874d34596d37d8ee8a5b31527d78e792a8433ad75d5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 383,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 381,
            "length": 17,
            "offset": 186,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_getter, GDExtensionInterfaceVariantGetPtrGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_indexed_setter, GDExtensionInterfaceVariantGetPtrIndexedSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_indexed_getter, GDExtensionInterfaceVariantGetPtrIndexedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_setter, GDExtensionInterfaceVariantGetPtrKeyedSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_getter, GDExtensionInterfaceVariantGetPtrKeyedGetter);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "43bbd3dc5baa180a1aeef486695e3a16fb85ae955a9967f7a3c03a6c53e0474d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 384,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 382,
            "length": 17,
            "offset": 201,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_indexed_setter, GDExtensionInterfaceVariantGetPtrIndexedSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_indexed_getter, GDExtensionInterfaceVariantGetPtrIndexedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_setter, GDExtensionInterfaceVariantGetPtrKeyedSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_getter, GDExtensionInterfaceVariantGetPtrKeyedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_checker, GDExtensionInterfaceVariantGetPtrKeyedChecker);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "e87ec81c691451733ec442466d687c233ccf741fc481a76e8c38b6229fddc5a5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 385,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 383,
            "length": 17,
            "offset": 197,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_indexed_getter, GDExtensionInterfaceVariantGetPtrIndexedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_setter, GDExtensionInterfaceVariantGetPtrKeyedSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_getter, GDExtensionInterfaceVariantGetPtrKeyedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_checker, GDExtensionInterfaceVariantGetPtrKeyedChecker);\n\tLOAD_PROC_ADDRESS(variant_get_constant_value, GDExtensionInterfaceVariantGetConstantValue);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "cf5cb0a17d66ca25d59545cb6ea91dc4570c9c2755f753e3420b12ca8a7f554f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 386,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 384,
            "length": 17,
            "offset": 193,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_setter, GDExtensionInterfaceVariantGetPtrKeyedSetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_getter, GDExtensionInterfaceVariantGetPtrKeyedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_checker, GDExtensionInterfaceVariantGetPtrKeyedChecker);\n\tLOAD_PROC_ADDRESS(variant_get_constant_value, GDExtensionInterfaceVariantGetConstantValue);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_utility_function, GDExtensionInterfaceVariantGetPtrUtilityFunction);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "3d02d2042e2fd221b33b112fe6d5be3cde8956c2d7b700bdf3a126eca8d1805a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 387,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 385,
            "length": 17,
            "offset": 195,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_getter, GDExtensionInterfaceVariantGetPtrKeyedGetter);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_checker, GDExtensionInterfaceVariantGetPtrKeyedChecker);\n\tLOAD_PROC_ADDRESS(variant_get_constant_value, GDExtensionInterfaceVariantGetConstantValue);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_utility_function, GDExtensionInterfaceVariantGetPtrUtilityFunction);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars, GDExtensionInterfaceStringNewWithLatin1Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "dcbc54eca0409f6e1ee88ca74225111bb1e5783843898fba3b08ecd7fac478b1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 388,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 386,
            "length": 17,
            "offset": 192,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_keyed_checker, GDExtensionInterfaceVariantGetPtrKeyedChecker);\n\tLOAD_PROC_ADDRESS(variant_get_constant_value, GDExtensionInterfaceVariantGetConstantValue);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_utility_function, GDExtensionInterfaceVariantGetPtrUtilityFunction);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars, GDExtensionInterfaceStringNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars, GDExtensionInterfaceStringNewWithUtf8Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6c55c0a86d06bac3692bef01731aaa188e7f56c7284ff52658fce9c5a58b7ff4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 389,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 387,
            "length": 17,
            "offset": 198,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_constant_value, GDExtensionInterfaceVariantGetConstantValue);\n\tLOAD_PROC_ADDRESS(variant_get_ptr_utility_function, GDExtensionInterfaceVariantGetPtrUtilityFunction);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars, GDExtensionInterfaceStringNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars, GDExtensionInterfaceStringNewWithUtf8Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars, GDExtensionInterfaceStringNewWithUtf16Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "37e10822ea0dcf785e5bd612d5441bc3060e36c089abad8257e8345ad364da0e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 390,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 388,
            "length": 17,
            "offset": 201,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(variant_get_ptr_utility_function, GDExtensionInterfaceVariantGetPtrUtilityFunction);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars, GDExtensionInterfaceStringNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars, GDExtensionInterfaceStringNewWithUtf8Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars, GDExtensionInterfaceStringNewWithUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars, GDExtensionInterfaceStringNewWithUtf32Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "a55b38e8bf6ddf5f17f10e52464227efe6cd0ed438217a8ae7b164adfe2b6c83"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 391,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 389,
            "length": 17,
            "offset": 189,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars, GDExtensionInterfaceStringNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars, GDExtensionInterfaceStringNewWithUtf8Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars, GDExtensionInterfaceStringNewWithUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars, GDExtensionInterfaceStringNewWithUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_wide_chars, GDExtensionInterfaceStringNewWithWideChars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9cbca37462b9de677a54ed01c4b15d524b8c85cf66e1016349e1fb69c6c29624"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 393,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 391,
            "length": 17,
            "offset": 189,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars, GDExtensionInterfaceStringNewWithUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars, GDExtensionInterfaceStringNewWithUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_wide_chars, GDExtensionInterfaceStringNewWithWideChars);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars_and_len, GDExtensionInterfaceStringNewWithLatin1CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len, GDExtensionInterfaceStringNewWithUtf8CharsAndLen);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "27abce553abdeacf9302f68401ffb29668c5aab12cb567b475c6634ef2c448dc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 394,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 392,
            "length": 17,
            "offset": 187,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars, GDExtensionInterfaceStringNewWithUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_new_with_wide_chars, GDExtensionInterfaceStringNewWithWideChars);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars_and_len, GDExtensionInterfaceStringNewWithLatin1CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len, GDExtensionInterfaceStringNewWithUtf8CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len2, GDExtensionInterfaceStringNewWithUtf8CharsAndLen2);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "752020fda238af60e097f5d095b8aaba49809ae90139a972c29d4cd0ca996f95"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 395,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 393,
            "length": 17,
            "offset": 203,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_wide_chars, GDExtensionInterfaceStringNewWithWideChars);\n\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars_and_len, GDExtensionInterfaceStringNewWithLatin1CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len, GDExtensionInterfaceStringNewWithUtf8CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len2, GDExtensionInterfaceStringNewWithUtf8CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len, GDExtensionInterfaceStringNewWithUtf16CharsAndLen);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "f8a8d68df0381cdac729e4d9989960ed9c7966fd9d488ef5c2045f560546e6e9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 396,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 394,
            "length": 17,
            "offset": 217,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_latin1_chars_and_len, GDExtensionInterfaceStringNewWithLatin1CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len, GDExtensionInterfaceStringNewWithUtf8CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len2, GDExtensionInterfaceStringNewWithUtf8CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len, GDExtensionInterfaceStringNewWithUtf16CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len2, GDExtensionInterfaceStringNewWithUtf16CharsAndLen2);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6c7b5e961e83acdf9af197baf1517fc280f7800470b701bac4b6c7a49a3b8e8a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 397,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 395,
            "length": 17,
            "offset": 215,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len, GDExtensionInterfaceStringNewWithUtf8CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len2, GDExtensionInterfaceStringNewWithUtf8CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len, GDExtensionInterfaceStringNewWithUtf16CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len2, GDExtensionInterfaceStringNewWithUtf16CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars_and_len, GDExtensionInterfaceStringNewWithUtf32CharsAndLen);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c1e74faddcd07edbaf0c76741873148c21b8cb148866a4490030503d33def649"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 398,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 396,
            "length": 17,
            "offset": 217,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_utf8_chars_and_len2, GDExtensionInterfaceStringNewWithUtf8CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len, GDExtensionInterfaceStringNewWithUtf16CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len2, GDExtensionInterfaceStringNewWithUtf16CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars_and_len, GDExtensionInterfaceStringNewWithUtf32CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_wide_chars_and_len, GDExtensionInterfaceStringNewWithWideCharsAndLen);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "aad67c00d48bfafadcaf759d51f3c4c78d71cda5681be6a7b717204596db8ce8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 399,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 397,
            "length": 17,
            "offset": 219,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len, GDExtensionInterfaceStringNewWithUtf16CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len2, GDExtensionInterfaceStringNewWithUtf16CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars_and_len, GDExtensionInterfaceStringNewWithUtf32CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_wide_chars_and_len, GDExtensionInterfaceStringNewWithWideCharsAndLen);\n\tLOAD_PROC_ADDRESS(string_to_latin1_chars, GDExtensionInterfaceStringToLatin1Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "00f90e249854c4a12aa53f3e2e824a886348d31c4c9a3fc19046b71938a235ae"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 400,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 398,
            "length": 17,
            "offset": 219,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_utf16_chars_and_len2, GDExtensionInterfaceStringNewWithUtf16CharsAndLen2);\n\tLOAD_PROC_ADDRESS(string_new_with_utf32_chars_and_len, GDExtensionInterfaceStringNewWithUtf32CharsAndLen);\n\tLOAD_PROC_ADDRESS(string_new_with_wide_chars_and_len, GDExtensionInterfaceStringNewWithWideCharsAndLen);\n\tLOAD_PROC_ADDRESS(string_to_latin1_chars, GDExtensionInterfaceStringToLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf8_chars, GDExtensionInterfaceStringToUtf8Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ac9de58311a9d15f971025e07cb1591823d544ddc79698e4da39275f9bd27fbd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 402,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 400,
            "length": 17,
            "offset": 192,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_new_with_wide_chars_and_len, GDExtensionInterfaceStringNewWithWideCharsAndLen);\n\tLOAD_PROC_ADDRESS(string_to_latin1_chars, GDExtensionInterfaceStringToLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf8_chars, GDExtensionInterfaceStringToUtf8Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf16_chars, GDExtensionInterfaceStringToUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf32_chars, GDExtensionInterfaceStringToUtf32Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "dc95407789f94513c233f8a9425443d71aea38f0756b6e7d713f486f3ec6a8cd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 403,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 401,
            "length": 17,
            "offset": 167,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_to_latin1_chars, GDExtensionInterfaceStringToLatin1Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf8_chars, GDExtensionInterfaceStringToUtf8Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf16_chars, GDExtensionInterfaceStringToUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf32_chars, GDExtensionInterfaceStringToUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_to_wide_chars, GDExtensionInterfaceStringToWideChars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "dc31de5ebe19c470ead485c034984e94224415b5aafaead0b9c836439ca402d7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 404,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 402,
            "length": 17,
            "offset": 165,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_to_utf8_chars, GDExtensionInterfaceStringToUtf8Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf16_chars, GDExtensionInterfaceStringToUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf32_chars, GDExtensionInterfaceStringToUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_to_wide_chars, GDExtensionInterfaceStringToWideChars);\n\tLOAD_PROC_ADDRESS(string_operator_index, GDExtensionInterfaceStringOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "667dde28e717bad9922fd9cb757ca179ac89d01e3a17b5e965d9efad2dded8be"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 405,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 403,
            "length": 17,
            "offset": 167,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_to_utf16_chars, GDExtensionInterfaceStringToUtf16Chars);\n\tLOAD_PROC_ADDRESS(string_to_utf32_chars, GDExtensionInterfaceStringToUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_to_wide_chars, GDExtensionInterfaceStringToWideChars);\n\tLOAD_PROC_ADDRESS(string_operator_index, GDExtensionInterfaceStringOperatorIndex);\n\tLOAD_PROC_ADDRESS(string_operator_index_const, GDExtensionInterfaceStringOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "235dbdc2db034eafdd6adbb54632e669a025a7b0d9b70fe61732f0b871a5c6a1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 406,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 404,
            "length": 17,
            "offset": 165,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_to_utf32_chars, GDExtensionInterfaceStringToUtf32Chars);\n\tLOAD_PROC_ADDRESS(string_to_wide_chars, GDExtensionInterfaceStringToWideChars);\n\tLOAD_PROC_ADDRESS(string_operator_index, GDExtensionInterfaceStringOperatorIndex);\n\tLOAD_PROC_ADDRESS(string_operator_index_const, GDExtensionInterfaceStringOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_string, GDExtensionInterfaceStringOperatorPlusEqString);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "f6e8dfc33994895584dcc82c0dee76560ab9159117c0429d43aa094d0ac71026"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 407,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 405,
            "length": 17,
            "offset": 166,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_to_wide_chars, GDExtensionInterfaceStringToWideChars);\n\tLOAD_PROC_ADDRESS(string_operator_index, GDExtensionInterfaceStringOperatorIndex);\n\tLOAD_PROC_ADDRESS(string_operator_index_const, GDExtensionInterfaceStringOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_string, GDExtensionInterfaceStringOperatorPlusEqString);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_char, GDExtensionInterfaceStringOperatorPlusEqChar);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d1baef76e20341ed181a1414b9d8118b219c47dc34d38716e5c61a28f851adeb"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 409,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 407,
            "length": 17,
            "offset": 196,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_operator_index_const, GDExtensionInterfaceStringOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_string, GDExtensionInterfaceStringOperatorPlusEqString);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_char, GDExtensionInterfaceStringOperatorPlusEqChar);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_cstr, GDExtensionInterfaceStringOperatorPlusEqCstr);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_wcstr, GDExtensionInterfaceStringOperatorPlusEqWcstr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "35496e7ecb3ad55142ce75823621f2afe76991fab0b3ecc1122a796486544a4e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 411,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 409,
            "length": 17,
            "offset": 193,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_operator_plus_eq_char, GDExtensionInterfaceStringOperatorPlusEqChar);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_cstr, GDExtensionInterfaceStringOperatorPlusEqCstr);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_wcstr, GDExtensionInterfaceStringOperatorPlusEqWcstr);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_c32str, GDExtensionInterfaceStringOperatorPlusEqC32str);\n\tLOAD_PROC_ADDRESS(string_resize, GDExtensionInterfaceStringResize);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "83b8dcaf911a5927d8f8177a7fb0eb5eaf3466e2a0675da35578b421156a0fb5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 413,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 411,
            "length": 17,
            "offset": 199,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_operator_plus_eq_wcstr, GDExtensionInterfaceStringOperatorPlusEqWcstr);\n\tLOAD_PROC_ADDRESS(string_operator_plus_eq_c32str, GDExtensionInterfaceStringOperatorPlusEqC32str);\n\tLOAD_PROC_ADDRESS(string_resize, GDExtensionInterfaceStringResize);\n\tLOAD_PROC_ADDRESS(string_name_new_with_latin1_chars, GDExtensionInterfaceStringNameNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(xml_parser_open_buffer, GDExtensionInterfaceXmlParserOpenBuffer);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "63e27d91d2d5d0c81ec518914146ab4f552555807029e649d2e763455a223f57"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 414,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 412,
            "length": 17,
            "offset": 170,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_operator_plus_eq_c32str, GDExtensionInterfaceStringOperatorPlusEqC32str);\n\tLOAD_PROC_ADDRESS(string_resize, GDExtensionInterfaceStringResize);\n\tLOAD_PROC_ADDRESS(string_name_new_with_latin1_chars, GDExtensionInterfaceStringNameNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(xml_parser_open_buffer, GDExtensionInterfaceXmlParserOpenBuffer);\n\tLOAD_PROC_ADDRESS(file_access_store_buffer, GDExtensionInterfaceFileAccessStoreBuffer);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "f4b57e4326a4a22b197dfd681fafbf4c3b170fd5d0954e8f13369570010b2dde"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 415,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 413,
            "length": 17,
            "offset": 175,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_resize, GDExtensionInterfaceStringResize);\n\tLOAD_PROC_ADDRESS(string_name_new_with_latin1_chars, GDExtensionInterfaceStringNameNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(xml_parser_open_buffer, GDExtensionInterfaceXmlParserOpenBuffer);\n\tLOAD_PROC_ADDRESS(file_access_store_buffer, GDExtensionInterfaceFileAccessStoreBuffer);\n\tLOAD_PROC_ADDRESS(file_access_get_buffer, GDExtensionInterfaceFileAccessGetBuffer);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "819b79e6ca7a68fb9fb2a4ac2c68cd74801d56f12941db38fc73378d47529008"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 416,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 414,
            "length": 17,
            "offset": 191,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(string_name_new_with_latin1_chars, GDExtensionInterfaceStringNameNewWithLatin1Chars);\n\tLOAD_PROC_ADDRESS(xml_parser_open_buffer, GDExtensionInterfaceXmlParserOpenBuffer);\n\tLOAD_PROC_ADDRESS(file_access_store_buffer, GDExtensionInterfaceFileAccessStoreBuffer);\n\tLOAD_PROC_ADDRESS(file_access_get_buffer, GDExtensionInterfaceFileAccessGetBuffer);\n\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_group_task, GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "14dec8594ad1db12342d7f2709a472b3f6fc9780efc20b4f0fed131addf80044"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 418,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 416,
            "length": 17,
            "offset": 175,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(file_access_store_buffer, GDExtensionInterfaceFileAccessStoreBuffer);\n\tLOAD_PROC_ADDRESS(file_access_get_buffer, GDExtensionInterfaceFileAccessGetBuffer);\n\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_group_task, GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask);\n\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_task, GDExtensionInterfaceWorkerThreadPoolAddNativeTask);\n\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index, GDExtensionInterfacePackedByteArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "d30bac01366f37f4d03db5d41cc6446f9b34ab95631e5344f5652aeb8f1331ac"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 419,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 417,
            "length": 17,
            "offset": 204,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(file_access_get_buffer, GDExtensionInterfaceFileAccessGetBuffer);\n\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_group_task, GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask);\n\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_task, GDExtensionInterfaceWorkerThreadPoolAddNativeTask);\n\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index, GDExtensionInterfacePackedByteArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index_const, GDExtensionInterfacePackedByteArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "55440e4616df5ecbdf08137c394632ec69e764772579e5dc21f43b269a80937d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 420,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 418,
            "length": 17,
            "offset": 226,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_group_task, GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask);\n\tLOAD_PROC_ADDRESS(worker_thread_pool_add_native_task, GDExtensionInterfaceWorkerThreadPoolAddNativeTask);\n\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index, GDExtensionInterfacePackedByteArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index_const, GDExtensionInterfacePackedByteArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_color_array_operator_index, GDExtensionInterfacePackedColorArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b9e16024f08537326368102ab80237a5650618e164e27b895c4dc8a9525ff261"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 422,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 420,
            "length": 17,
            "offset": 220,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index, GDExtensionInterfacePackedByteArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_byte_array_operator_index_const, GDExtensionInterfacePackedByteArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_color_array_operator_index, GDExtensionInterfacePackedColorArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_color_array_operator_index_const, GDExtensionInterfacePackedColorArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_float32_array_operator_index, GDExtensionInterfacePackedFloat32ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6d64fade527877bcf440831d4df95accdae8ff4984728c9cf87bffe7125af2e3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 424,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 422,
            "length": 17,
            "offset": 224,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_color_array_operator_index, GDExtensionInterfacePackedColorArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_color_array_operator_index_const, GDExtensionInterfacePackedColorArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_float32_array_operator_index, GDExtensionInterfacePackedFloat32ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_float32_array_operator_index_const, GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index, GDExtensionInterfacePackedFloat64ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "52f3e5e95133a8ed8d9384ba4baa8c6ecd5b8fa609620537629eeb2a0135fd09"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 426,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 424,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_float32_array_operator_index, GDExtensionInterfacePackedFloat32ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_float32_array_operator_index_const, GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index, GDExtensionInterfacePackedFloat64ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index_const, GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index, GDExtensionInterfacePackedInt32ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "777aabcb025913cfc2b0b2b31cf59836a8b5c0e803525259b429663fc238f80f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 427,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 425,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_float32_array_operator_index_const, GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index, GDExtensionInterfacePackedFloat64ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index_const, GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index, GDExtensionInterfacePackedInt32ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index_const, GDExtensionInterfacePackedInt32ArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "7d84c11f079f74cb0b0412612259a2b1bc9f3ee8e2dd5a34e89787b35fb9b158"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 428,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 426,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index, GDExtensionInterfacePackedFloat64ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index_const, GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index, GDExtensionInterfacePackedInt32ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index_const, GDExtensionInterfacePackedInt32ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index, GDExtensionInterfacePackedInt64ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ac25a56a37c421bc567db8ba443ea4c1e1badf8f16595ef1832be5ea6aa8b93d"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 429,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 427,
            "length": 17,
            "offset": 228,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_float64_array_operator_index_const, GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index, GDExtensionInterfacePackedInt32ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index_const, GDExtensionInterfacePackedInt32ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index, GDExtensionInterfacePackedInt64ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index_const, GDExtensionInterfacePackedInt64ArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "bc11c5861a84d5fe5da2fb3de3ecb85847b9eb2bfea2c56b7cb8af0619429d56"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 430,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 428,
            "length": 17,
            "offset": 224,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index, GDExtensionInterfacePackedInt32ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int32_array_operator_index_const, GDExtensionInterfacePackedInt32ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index, GDExtensionInterfacePackedInt64ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index_const, GDExtensionInterfacePackedInt64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_string_array_operator_index, GDExtensionInterfacePackedStringArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "2a314f40503f0c8ab4530a4546ac7915c6d9cd025b781bd83c6af8f25a42169a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 432,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 430,
            "length": 17,
            "offset": 224,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index, GDExtensionInterfacePackedInt64ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index_const, GDExtensionInterfacePackedInt64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_string_array_operator_index, GDExtensionInterfacePackedStringArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_string_array_operator_index_const, GDExtensionInterfacePackedStringArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index, GDExtensionInterfacePackedVector2ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "a469bca1913338439f1dddc534c7ef5fe811154fa836c828d040f06c8412d652"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 433,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 431,
            "length": 17,
            "offset": 226,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_int64_array_operator_index_const, GDExtensionInterfacePackedInt64ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_string_array_operator_index, GDExtensionInterfacePackedStringArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_string_array_operator_index_const, GDExtensionInterfacePackedStringArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index, GDExtensionInterfacePackedVector2ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index_const, GDExtensionInterfacePackedVector2ArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "29b264f6c8db87f815514fe84b883ddcba3c33b2da988b402392c23975567f0b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 434,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 432,
            "length": 17,
            "offset": 228,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_string_array_operator_index, GDExtensionInterfacePackedStringArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_string_array_operator_index_const, GDExtensionInterfacePackedStringArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index, GDExtensionInterfacePackedVector2ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index_const, GDExtensionInterfacePackedVector2ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index, GDExtensionInterfacePackedVector3ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "0a3f1a7ffc3a6db9e3739a437978be710fdab394ba4467077a04d9d38f292d7b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 435,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 433,
            "length": 17,
            "offset": 230,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_string_array_operator_index_const, GDExtensionInterfacePackedStringArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index, GDExtensionInterfacePackedVector2ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index_const, GDExtensionInterfacePackedVector2ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index, GDExtensionInterfacePackedVector3ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index_const, GDExtensionInterfacePackedVector3ArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "dfc81910fab302704765214a9d5790d13f91cb55b18b28181d3efa2d343746a5"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 436,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 434,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index, GDExtensionInterfacePackedVector2ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index_const, GDExtensionInterfacePackedVector2ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index, GDExtensionInterfacePackedVector3ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index_const, GDExtensionInterfacePackedVector3ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index, GDExtensionInterfacePackedVector4ArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "2ea3b50b303a53b18f1695d1d2cdb190d0188a05e3ba94d41f9a937c87681b44"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 437,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 435,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_vector2_array_operator_index_const, GDExtensionInterfacePackedVector2ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index, GDExtensionInterfacePackedVector3ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index_const, GDExtensionInterfacePackedVector3ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index, GDExtensionInterfacePackedVector4ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index_const, GDExtensionInterfacePackedVector4ArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6ec56772e4672e10da425ba24001dff1eabf9d17bc0cedcaee2ce3ec2ede11d0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 438,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 436,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index, GDExtensionInterfacePackedVector3ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index_const, GDExtensionInterfacePackedVector3ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index, GDExtensionInterfacePackedVector4ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index_const, GDExtensionInterfacePackedVector4ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_operator_index, GDExtensionInterfaceArrayOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "bd09369dffc7b28f961f3838bf5a08a3fb4697498a29fae534cc5c7b699ca15c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 439,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 437,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_vector3_array_operator_index_const, GDExtensionInterfacePackedVector3ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index, GDExtensionInterfacePackedVector4ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index_const, GDExtensionInterfacePackedVector4ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_operator_index, GDExtensionInterfaceArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(array_operator_index_const, GDExtensionInterfaceArrayOperatorIndexConst);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "a6a68f6f4ae0a365c4cc40dc89c90d8f7b4e0f3391b2ecda2a634b26d1ba8d9b"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 440,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 438,
            "length": 17,
            "offset": 232,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index, GDExtensionInterfacePackedVector4ArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index_const, GDExtensionInterfacePackedVector4ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_operator_index, GDExtensionInterfaceArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(array_operator_index_const, GDExtensionInterfaceArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_ref, GDExtensionInterfaceArrayRef);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "48db68e7ebf1384d7a152cc1873f9fb2b6504461dbaf5fb4b1c7b1336152fa2c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 441,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 439,
            "length": 17,
            "offset": 204,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(packed_vector4_array_operator_index_const, GDExtensionInterfacePackedVector4ArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_operator_index, GDExtensionInterfaceArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(array_operator_index_const, GDExtensionInterfaceArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_ref, GDExtensionInterfaceArrayRef);\n\tLOAD_PROC_ADDRESS(array_set_typed, GDExtensionInterfaceArraySetTyped);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "ffb2f8ebfa5e4168cff4df561f2b1538f444db859243c0def5311a0e93bb2ae9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 442,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 440,
            "length": 17,
            "offset": 176,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(array_operator_index, GDExtensionInterfaceArrayOperatorIndex);\n\tLOAD_PROC_ADDRESS(array_operator_index_const, GDExtensionInterfaceArrayOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(array_ref, GDExtensionInterfaceArrayRef);\n\tLOAD_PROC_ADDRESS(array_set_typed, GDExtensionInterfaceArraySetTyped);\n\tLOAD_PROC_ADDRESS(dictionary_operator_index, GDExtensionInterfaceDictionaryOperatorIndex);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9cd48e4d3d1de0a2aac2268bd137de9d10ecb963e078a1dc0984b263eb6a4fa4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 444,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 442,
            "length": 17,
            "offset": 134,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(array_ref, GDExtensionInterfaceArrayRef);\n\tLOAD_PROC_ADDRESS(array_set_typed, GDExtensionInterfaceArraySetTyped);\n\tLOAD_PROC_ADDRESS(dictionary_operator_index, GDExtensionInterfaceDictionaryOperatorIndex);\n\tLOAD_PROC_ADDRESS(dictionary_operator_index_const, GDExtensionInterfaceDictionaryOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(object_method_bind_call, GDExtensionInterfaceObjectMethodBindCall);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "dffd36d688ce9af1f2ebf7c8bfb4fe871fe1e23e330c48edce99254d010c00e7"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 446,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 444,
            "length": 17,
            "offset": 196,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(dictionary_operator_index, GDExtensionInterfaceDictionaryOperatorIndex);\n\tLOAD_PROC_ADDRESS(dictionary_operator_index_const, GDExtensionInterfaceDictionaryOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(object_method_bind_call, GDExtensionInterfaceObjectMethodBindCall);\n\tLOAD_PROC_ADDRESS(object_method_bind_ptrcall, GDExtensionInterfaceObjectMethodBindPtrcall);\n\tLOAD_PROC_ADDRESS(object_destroy, GDExtensionInterfaceObjectDestroy);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "1e9d8b27ba87e50155ac7f1861560d87c17e11bd4841a1ec1f0f3ab2c93015c6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 447,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 445,
            "length": 17,
            "offset": 191,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(dictionary_operator_index_const, GDExtensionInterfaceDictionaryOperatorIndexConst);\n\tLOAD_PROC_ADDRESS(object_method_bind_call, GDExtensionInterfaceObjectMethodBindCall);\n\tLOAD_PROC_ADDRESS(object_method_bind_ptrcall, GDExtensionInterfaceObjectMethodBindPtrcall);\n\tLOAD_PROC_ADDRESS(object_destroy, GDExtensionInterfaceObjectDestroy);\n\tLOAD_PROC_ADDRESS(global_get_singleton, GDExtensionInterfaceGlobalGetSingleton);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "eb0663c6e20f425060e07eadf0261a3ad75245064cbe1e395969be09bbe10567"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 451,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 449,
            "length": 17,
            "offset": 178,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(global_get_singleton, GDExtensionInterfaceGlobalGetSingleton);\n\tLOAD_PROC_ADDRESS(object_get_instance_binding, GDExtensionInterfaceObjectGetInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_set_instance_binding, GDExtensionInterfaceObjectSetInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_free_instance_binding, GDExtensionInterfaceObjectFreeInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_set_instance, GDExtensionInterfaceObjectSetInstance);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "74268264293ee6c61718695ced05abc6d7b4ed685aee5448e5b33202f0741ee9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 452,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 450,
            "length": 17,
            "offset": 191,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(object_get_instance_binding, GDExtensionInterfaceObjectGetInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_set_instance_binding, GDExtensionInterfaceObjectSetInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_free_instance_binding, GDExtensionInterfaceObjectFreeInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_set_instance, GDExtensionInterfaceObjectSetInstance);\n\tLOAD_PROC_ADDRESS(object_get_class_name, GDExtensionInterfaceObjectGetClassName);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "a85f9786a9303d24723117b29753d36415d64c5e5b67b69c7b6627bd42316e53"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 453,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 451,
            "length": 17,
            "offset": 193,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(object_set_instance_binding, GDExtensionInterfaceObjectSetInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_free_instance_binding, GDExtensionInterfaceObjectFreeInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_set_instance, GDExtensionInterfaceObjectSetInstance);\n\tLOAD_PROC_ADDRESS(object_get_class_name, GDExtensionInterfaceObjectGetClassName);\n\tLOAD_PROC_ADDRESS(object_cast_to, GDExtensionInterfaceObjectCastTo);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6338d7871c1b9956f647f227b8502610dfc26b708d32f629084835f7d2ea0e69"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 454,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 452,
            "length": 17,
            "offset": 178,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(object_free_instance_binding, GDExtensionInterfaceObjectFreeInstanceBinding);\n\tLOAD_PROC_ADDRESS(object_set_instance, GDExtensionInterfaceObjectSetInstance);\n\tLOAD_PROC_ADDRESS(object_get_class_name, GDExtensionInterfaceObjectGetClassName);\n\tLOAD_PROC_ADDRESS(object_cast_to, GDExtensionInterfaceObjectCastTo);\n\tLOAD_PROC_ADDRESS(object_get_instance_from_id, GDExtensionInterfaceObjectGetInstanceFromId);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "e24ae37f38c6bb56b7b461b22d648e0a47a59111d9fe6a24d6ed2a367252bbb4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 456,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 454,
            "length": 17,
            "offset": 154,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(object_get_class_name, GDExtensionInterfaceObjectGetClassName);\n\tLOAD_PROC_ADDRESS(object_cast_to, GDExtensionInterfaceObjectCastTo);\n\tLOAD_PROC_ADDRESS(object_get_instance_from_id, GDExtensionInterfaceObjectGetInstanceFromId);\n\tLOAD_PROC_ADDRESS(object_get_instance_id, GDExtensionInterfaceObjectGetInstanceId);\n\tLOAD_PROC_ADDRESS(object_has_script_method, GDExtensionInterfaceObjectHasScriptMethod);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "145a49d1bbacd7b35fdb3fba73e24c7bdf5fc4f2d30c7a611a73a082938256dc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 458,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 456,
            "length": 17,
            "offset": 180,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(object_get_instance_from_id, GDExtensionInterfaceObjectGetInstanceFromId);\n\tLOAD_PROC_ADDRESS(object_get_instance_id, GDExtensionInterfaceObjectGetInstanceId);\n\tLOAD_PROC_ADDRESS(object_has_script_method, GDExtensionInterfaceObjectHasScriptMethod);\n\tLOAD_PROC_ADDRESS(object_call_script_method, GDExtensionInterfaceObjectCallScriptMethod);\n\tLOAD_PROC_ADDRESS(callable_custom_create2, GDExtensionInterfaceCallableCustomCreate2);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "22814b0bc4f3cf39029e7dbab0127f53d05e5049fa58fa22c787de9dbdb57dc8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 462,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 460,
            "length": 17,
            "offset": 186,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(callable_custom_create2, GDExtensionInterfaceCallableCustomCreate2);\n\tLOAD_PROC_ADDRESS(callable_custom_get_userdata, GDExtensionInterfaceCallableCustomGetUserData);\n\tLOAD_PROC_ADDRESS(ref_get_object, GDExtensionInterfaceRefGetObject);\n\tLOAD_PROC_ADDRESS(ref_set_object, GDExtensionInterfaceRefSetObject);\n\tLOAD_PROC_ADDRESS(script_instance_create3, GDExtensionInterfaceScriptInstanceCreate3);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "c54634cbe98838f6a7bca85d48a5be391a4ac9f2ffdb295039de093bb262dfd8"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 463,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 461,
            "length": 17,
            "offset": 168,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(callable_custom_get_userdata, GDExtensionInterfaceCallableCustomGetUserData);\n\tLOAD_PROC_ADDRESS(ref_get_object, GDExtensionInterfaceRefGetObject);\n\tLOAD_PROC_ADDRESS(ref_set_object, GDExtensionInterfaceRefSetObject);\n\tLOAD_PROC_ADDRESS(script_instance_create3, GDExtensionInterfaceScriptInstanceCreate3);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_create, GDExtensionInterfacePlaceHolderScriptInstanceCreate);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "138789d6cb586c92061023bf283c998a503e09d21db9361d878ed9c1941bc2d4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 464,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 462,
            "length": 17,
            "offset": 141,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(ref_get_object, GDExtensionInterfaceRefGetObject);\n\tLOAD_PROC_ADDRESS(ref_set_object, GDExtensionInterfaceRefSetObject);\n\tLOAD_PROC_ADDRESS(script_instance_create3, GDExtensionInterfaceScriptInstanceCreate3);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_create, GDExtensionInterfacePlaceHolderScriptInstanceCreate);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_update, GDExtensionInterfacePlaceHolderScriptInstanceUpdate);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "8983b89160ad08a875a2eb0cbadf4a782c2c14ff580256a1536531ff826876e2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 465,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 463,
            "length": 17,
            "offset": 159,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(ref_set_object, GDExtensionInterfaceRefSetObject);\n\tLOAD_PROC_ADDRESS(script_instance_create3, GDExtensionInterfaceScriptInstanceCreate3);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_create, GDExtensionInterfacePlaceHolderScriptInstanceCreate);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_update, GDExtensionInterfacePlaceHolderScriptInstanceUpdate);\n\tLOAD_PROC_ADDRESS(classdb_construct_object, GDExtensionInterfaceClassdbConstructObject);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "95d6f3ee7d1c48533e37ecb2b9428e4a2807465d502f81481dad5d97e62219ee"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 466,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 464,
            "length": 17,
            "offset": 198,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(script_instance_create3, GDExtensionInterfaceScriptInstanceCreate3);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_create, GDExtensionInterfacePlaceHolderScriptInstanceCreate);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_update, GDExtensionInterfacePlaceHolderScriptInstanceUpdate);\n\tLOAD_PROC_ADDRESS(classdb_construct_object, GDExtensionInterfaceClassdbConstructObject);\n\tLOAD_PROC_ADDRESS(classdb_get_method_bind, GDExtensionInterfaceClassdbGetMethodBind);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "9bc0beea13df6d8ada4ab9d57c0e8a767721eb980ad7b3ebd320f97b7ba6d0f4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 467,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 465,
            "length": 17,
            "offset": 219,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(placeholder_script_instance_create, GDExtensionInterfacePlaceHolderScriptInstanceCreate);\n\tLOAD_PROC_ADDRESS(placeholder_script_instance_update, GDExtensionInterfacePlaceHolderScriptInstanceUpdate);\n\tLOAD_PROC_ADDRESS(classdb_construct_object, GDExtensionInterfaceClassdbConstructObject);\n\tLOAD_PROC_ADDRESS(classdb_get_method_bind, GDExtensionInterfaceClassdbGetMethodBind);\n\tLOAD_PROC_ADDRESS(classdb_get_class_tag, GDExtensionInterfaceClassdbGetClassTag);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "232ffeb59766d4e7e022db4076025154ec9ce3fb0d5e30880d619c1c72648d35"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 468,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 466,
            "length": 17,
            "offset": 200,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(placeholder_script_instance_update, GDExtensionInterfacePlaceHolderScriptInstanceUpdate);\n\tLOAD_PROC_ADDRESS(classdb_construct_object, GDExtensionInterfaceClassdbConstructObject);\n\tLOAD_PROC_ADDRESS(classdb_get_method_bind, GDExtensionInterfaceClassdbGetMethodBind);\n\tLOAD_PROC_ADDRESS(classdb_get_class_tag, GDExtensionInterfaceClassdbGetClassTag);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class3, GDExtensionInterfaceClassdbRegisterExtensionClass3);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "973867fc3f05a6ec59801c021f46b0574f8768bce83fb4d7df481fc21f9df544"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 469,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 467,
            "length": 17,
            "offset": 178,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_construct_object, GDExtensionInterfaceClassdbConstructObject);\n\tLOAD_PROC_ADDRESS(classdb_get_method_bind, GDExtensionInterfaceClassdbGetMethodBind);\n\tLOAD_PROC_ADDRESS(classdb_get_class_tag, GDExtensionInterfaceClassdbGetClassTag);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class3, GDExtensionInterfaceClassdbRegisterExtensionClass3);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_method, GDExtensionInterfaceClassdbRegisterExtensionClassMethod);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "a0601621b39b141624fd122acea39378d7fec45cc6c8d83a8990805d92bc35a4"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 470,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 468,
            "length": 17,
            "offset": 171,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_get_method_bind, GDExtensionInterfaceClassdbGetMethodBind);\n\tLOAD_PROC_ADDRESS(classdb_get_class_tag, GDExtensionInterfaceClassdbGetClassTag);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class3, GDExtensionInterfaceClassdbRegisterExtensionClass3);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_method, GDExtensionInterfaceClassdbRegisterExtensionClassMethod);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_virtual_method, GDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "03f80384348aedb780a7a8c2583bd49de1da59183c5f6bc4134df97ae2aa35ef"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 472,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 470,
            "length": 17,
            "offset": 226,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_register_extension_class3, GDExtensionInterfaceClassdbRegisterExtensionClass3);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_method, GDExtensionInterfaceClassdbRegisterExtensionClassMethod);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_virtual_method, GDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_integer_constant, GDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property, GDExtensionInterfaceClassdbRegisterExtensionClassProperty);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "66f24c279f6a7b127a3a6e0852b6196cd70ca4dac6a047aaf377a2e36c808fcd"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 476,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 474,
            "length": 17,
            "offset": 260,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property, GDExtensionInterfaceClassdbRegisterExtensionClassProperty);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_indexed, GDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_group, GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_subgroup, GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_signal, GDExtensionInterfaceClassdbRegisterExtensionClassSignal);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "45223edef765a182264e1d4a87b166e1a60788bbc373420d6253f464134cdb86"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 477,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 475,
            "length": 17,
            "offset": 271,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_indexed, GDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_group, GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_subgroup, GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_signal, GDExtensionInterfaceClassdbRegisterExtensionClassSignal);\n\tLOAD_PROC_ADDRESS(classdb_unregister_extension_class, GDExtensionInterfaceClassdbUnregisterExtensionClass);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "5b023bce83c5017940ac255f936cd9902b049d989657535f93952cf31f6a38f1"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 478,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 476,
            "length": 17,
            "offset": 273,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_group, GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_property_subgroup, GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup);\n\tLOAD_PROC_ADDRESS(classdb_register_extension_class_signal, GDExtensionInterfaceClassdbRegisterExtensionClassSignal);\n\tLOAD_PROC_ADDRESS(classdb_unregister_extension_class, GDExtensionInterfaceClassdbUnregisterExtensionClass);\n\tLOAD_PROC_ADDRESS(get_library_path, GDExtensionInterfaceGetLibraryPath);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "f18db69891c611bda35ae66c9fbd756498bd43dead189a28b82c485dfde5179c"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 480,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 478,
            "length": 17,
            "offset": 228,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_register_extension_class_signal, GDExtensionInterfaceClassdbRegisterExtensionClassSignal);\n\tLOAD_PROC_ADDRESS(classdb_unregister_extension_class, GDExtensionInterfaceClassdbUnregisterExtensionClass);\n\tLOAD_PROC_ADDRESS(get_library_path, GDExtensionInterfaceGetLibraryPath);\n\tLOAD_PROC_ADDRESS(editor_add_plugin, GDExtensionInterfaceEditorAddPlugin);\n\tLOAD_PROC_ADDRESS(editor_remove_plugin, GDExtensionInterfaceEditorRemovePlugin);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "e957c6c7311e46e60cbdcda809be3aa053a5a83cdca2d43de204b1d2d5ba776f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 481,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 479,
            "length": 17,
            "offset": 184,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(classdb_unregister_extension_class, GDExtensionInterfaceClassdbUnregisterExtensionClass);\n\tLOAD_PROC_ADDRESS(get_library_path, GDExtensionInterfaceGetLibraryPath);\n\tLOAD_PROC_ADDRESS(editor_add_plugin, GDExtensionInterfaceEditorAddPlugin);\n\tLOAD_PROC_ADDRESS(editor_remove_plugin, GDExtensionInterfaceEditorRemovePlugin);\n\tLOAD_PROC_ADDRESS(editor_help_load_xml_from_utf8_chars, GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6f7d0a3bb6b1cde2873193a31aadc6fa6fcebea89a5a98afd258bc750aca5c4a"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 482,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 480,
            "length": 17,
            "offset": 151,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(get_library_path, GDExtensionInterfaceGetLibraryPath);\n\tLOAD_PROC_ADDRESS(editor_add_plugin, GDExtensionInterfaceEditorAddPlugin);\n\tLOAD_PROC_ADDRESS(editor_remove_plugin, GDExtensionInterfaceEditorRemovePlugin);\n\tLOAD_PROC_ADDRESS(editor_help_load_xml_from_utf8_chars, GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars);\n\tLOAD_PROC_ADDRESS(editor_help_load_xml_from_utf8_chars_and_len, GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "b488934f30927ec26e5f36fd9c0f236e6f795b61b10dd73b18d26d9e4c80c675"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-cstyle-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use C-style cast to convert between unrelated types",
      "detailsInfo": "pro-type-cstyle-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 483,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 481,
            "length": 17,
            "offset": 159,
            "surroundingCode": "\tLOAD_PROC_ADDRESS(editor_add_plugin, GDExtensionInterfaceEditorAddPlugin);\n\tLOAD_PROC_ADDRESS(editor_remove_plugin, GDExtensionInterfaceEditorRemovePlugin);\n\tLOAD_PROC_ADDRESS(editor_help_load_xml_from_utf8_chars, GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars);\n\tLOAD_PROC_ADDRESS(editor_help_load_xml_from_utf8_chars_and_len, GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen);\n\tLOAD_PROC_ADDRESS(image_ptrw, GDExtensionInterfaceImagePtrw);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-cstyle-cast"
      },
      "hash": "6df522abf948bdb7e58b9e483eb49c6cf1ce05c348418946d346062cee580547"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'bool' -> 'GDExtensionBool' (aka 'unsigned char')",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 497,
          "offset": 9,
          "length": 4,
          "code": {
            "startLine": 495,
            "length": 4,
            "offset": 34,
            "surroundingCode": "\n\tapi_initialized = true;\n\treturn true;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "963fcd5d65e117fb45d6da261d0229ec8b3f2cda90d24c25613bcb5073ca9599"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'InitData *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 508,
          "offset": 6,
          "length": 9,
          "code": {
            "startLine": 506,
            "length": 9,
            "offset": 66,
            "surroundingCode": "\n\tInitData *init_data = static_cast<InitData *>(p_userdata);\n\tif (init_data && init_data->init_callback) {\n\t\tinit_data->init_callback(static_cast<ModuleInitializationLevel>(p_level));\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "03182bf19d752cec6974a9c0f4bfb73269f89f52de17842cb66f96ee1be7990e"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Callback' (aka 'void (*)(ModuleInitializationLevel)') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 508,
          "offset": 19,
          "length": 9,
          "code": {
            "startLine": 506,
            "length": 9,
            "offset": 79,
            "surroundingCode": "\n\tInitData *init_data = static_cast<InitData *>(p_userdata);\n\tif (init_data && init_data->init_callback) {\n\t\tinit_data->init_callback(static_cast<ModuleInitializationLevel>(p_level));\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "3e49eee43e5ec4bd9fc0ce7629bf40b39085c410235da75d86f826f372f1b91e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 512,
          "offset": 6,
          "length": 17,
          "code": {
            "startLine": 510,
            "length": 17,
            "offset": 9,
            "surroundingCode": "\t}\n\n\tif (level_initialized[p_level] == 0) {\n\t\tClassDB::initialize(p_level);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "060a26aa26495bf3fc1526c03bf096452baf636e827b7230bc83c333e1d8a3f3"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 515,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 513,
            "length": 17,
            "offset": 36,
            "surroundingCode": "\t\tClassDB::initialize(p_level);\n\t}\n\tlevel_initialized[p_level]++;\n\n\tif ((ModuleInitializationLevel)p_level == MODULE_INITIALIZATION_LEVEL_EDITOR) {"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "dc8b8d3710138ee95e6c2c6d00d5981b00a8e4a7b191b190257959ad98339870"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'InitData *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 530,
          "offset": 6,
          "length": 9,
          "code": {
            "startLine": 528,
            "length": 9,
            "offset": 66,
            "surroundingCode": "\n\tInitData *init_data = static_cast<InitData *>(p_userdata);\n\tif (init_data && init_data->terminate_callback) {\n\t\tinit_data->terminate_callback(static_cast<ModuleInitializationLevel>(p_level));\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "85a299b56b07f81fb190c1f86e62da6174b77cbc3fd0093bd1e613ad0030402f"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'Callback' (aka 'void (*)(ModuleInitializationLevel)') -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 530,
          "offset": 19,
          "length": 9,
          "code": {
            "startLine": 528,
            "length": 9,
            "offset": 79,
            "surroundingCode": "\n\tInitData *init_data = static_cast<InitData *>(p_userdata);\n\tif (init_data && init_data->terminate_callback) {\n\t\tinit_data->terminate_callback(static_cast<ModuleInitializationLevel>(p_level));\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "2f378a0465541fb47686329b33c6409e69f33976b45da0e58f7d320bc9f16a66"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 534,
          "offset": 2,
          "length": 17,
          "code": {
            "startLine": 532,
            "length": 17,
            "offset": 5,
            "surroundingCode": "\t}\n\n\tlevel_initialized[p_level]--;\n\tif (level_initialized[p_level] == 0) {\n\t\tEditorPlugins::deinitialize(p_level);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "4394d6b8e4431d07e9ad7f9d5f3398f59051725a7689b733395f1e9a9fd42b85"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-constant-array-index",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use array subscript when the index is not an integer constant expression",
      "detailsInfo": "pro-bounds-constant-array-index",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 535,
          "offset": 6,
          "length": 17,
          "code": {
            "startLine": 533,
            "length": 17,
            "offset": 37,
            "surroundingCode": "\n\tlevel_initialized[p_level]--;\n\tif (level_initialized[p_level] == 0) {\n\t\tEditorPlugins::deinitialize(p_level);\n\t\tClassDB::deinitialize(p_level);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-constant-array-index"
      },
      "hash": "e8a50bc00e93a3c34478abf8efe917bc73c2f952e3c8b58bc1461561dab33bc9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "owning-memory",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "initializing non-owner 'void *' with a newly created 'gsl::owner<>'",
      "detailsInfo": "owning-memory",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 543,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 541,
            "length": 4,
            "offset": 101,
            "surroundingCode": "void GDExtensionBinding::InitDataList::add(InitData *p_data) {\n\tif (data_count == data_capacity) {\n\t\tvoid *new_ptr = realloc(data, sizeof(InitData *) * (data_capacity + 32));\n\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-owning-memory"
      },
      "hash": "de0a20ec6990ee045de9eddc210e5d65097aa6817db671ea767f9533a5bd3559"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "no-malloc",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not manage memory manually; consider std::vector or std::string",
      "detailsInfo": "no-malloc",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 543,
          "offset": 19,
          "length": 7,
          "code": {
            "startLine": 541,
            "length": 7,
            "offset": 117,
            "surroundingCode": "void GDExtensionBinding::InitDataList::add(InitData *p_data) {\n\tif (data_count == data_capacity) {\n\t\tvoid *new_ptr = realloc(data, sizeof(InitData *) * (data_capacity + 32));\n\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-no-malloc"
      },
      "hash": "829abcff688c83345ab3fa5d2687892faa9b05577a2bb7eed43cbf0f56343b10"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "owning-memory",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "calling legacy resource function without passing a 'gsl::owner<>'",
      "detailsInfo": "owning-memory",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 543,
          "offset": 19,
          "length": 7,
          "code": {
            "startLine": 541,
            "length": 7,
            "offset": 117,
            "surroundingCode": "void GDExtensionBinding::InitDataList::add(InitData *p_data) {\n\tif (data_count == data_capacity) {\n\t\tvoid *new_ptr = realloc(data, sizeof(InitData *) * (data_capacity + 32));\n\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-owning-memory"
      },
      "hash": "787c7d2ee8efa74fd4920da57dc46309b7c765f4dc49ebb95177fae6187346bc"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "multi-level-implicit-pointer-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multilevel pointer conversion from 'InitData **' to 'void *', please use explicit cast",
      "detailsInfo": "multi-level-implicit-pointer-conversion",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 543,
          "offset": 27,
          "length": 4,
          "code": {
            "startLine": 541,
            "length": 4,
            "offset": 125,
            "surroundingCode": "void GDExtensionBinding::InitDataList::add(InitData *p_data) {\n\tif (data_count == data_capacity) {\n\t\tvoid *new_ptr = realloc(data, sizeof(InitData *) * (data_capacity + 32));\n\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-multi-level-implicit-pointer-conversion"
      },
      "hash": "9e26d97b14c29689188274ff6abc12497b282c91949d504e7e77b95e389fd5bc"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "32 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 543,
          "offset": 71,
          "length": 2,
          "code": {
            "startLine": 541,
            "length": 2,
            "offset": 169,
            "surroundingCode": "void GDExtensionBinding::InitDataList::add(InitData *p_data) {\n\tif (data_count == data_capacity) {\n\t\tvoid *new_ptr = realloc(data, sizeof(InitData *) * (data_capacity + 32));\n\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "84165a208b2adad3d8d3b82d3bcd4e8317140c824ddb80e3ddedcbb01bed6c59"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'void *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 544,
          "offset": 7,
          "length": 7,
          "code": {
            "startLine": 542,
            "length": 7,
            "offset": 118,
            "surroundingCode": "\tif (data_count == data_capacity) {\n\t\tvoid *new_ptr = realloc(data, sizeof(InitData *) * (data_capacity + 32));\n\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);\n\t\t\tdata_capacity += 32;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "2b6bafc238dd6e265407d81590c6761683ce58c19426b4711079d7a71a8e5501"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "avoid-magic-numbers",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "32 is a magic number; consider replacing it with a named constant",
      "detailsInfo": "avoid-magic-numbers",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 546,
          "offset": 21,
          "length": 2,
          "code": {
            "startLine": 544,
            "length": 2,
            "offset": 71,
            "surroundingCode": "\t\tif (new_ptr) {\n\t\t\tdata = (InitData **)(new_ptr);\n\t\t\tdata_capacity += 32;\n\t\t} else {\n\t\t\tERR_FAIL_MSG(\"Unable to allocate memory for extension callbacks.\");"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-avoid-magic-numbers"
      },
      "hash": "7a264e8cf8fe0aa6e4991c59e1b76512a3dbed3ceb1d585f86ca9fd6d24b2e36"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 551,
          "offset": 2,
          "length": 4,
          "code": {
            "startLine": 549,
            "length": 4,
            "offset": 8,
            "surroundingCode": "\t\t}\n\t}\n\tdata[data_count++] = p_data;\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "b869938a085d2885a5e23ec65f47601a5d0ef278eec8a53cd9fdbb921dfd6892"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 556,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 554,
            "length": 4,
            "offset": 98,
            "surroundingCode": "GDExtensionBinding::InitDataList::~InitDataList() {\n\tfor (int i = 0; i < data_count; i++) {\n\t\tif (data[i]) {\n\t\t\tdelete data[i];\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "2fee0e5a833131cc70ba8e5d27864ec150aa7248b3b178e424fb83fedf98bb02"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'InitData *' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 556,
          "offset": 7,
          "length": 4,
          "code": {
            "startLine": 554,
            "length": 4,
            "offset": 98,
            "surroundingCode": "GDExtensionBinding::InitDataList::~InitDataList() {\n\tfor (int i = 0; i < data_count; i++) {\n\t\tif (data[i]) {\n\t\t\tdelete data[i];\n\t\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "7b33385dc45777ec9723c5bae1cf51b91017433c7f6563a0236efa787be7d910"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "owning-memory",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead",
      "detailsInfo": "owning-memory",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 557,
          "offset": 4,
          "length": 6,
          "code": {
            "startLine": 555,
            "length": 6,
            "offset": 60,
            "surroundingCode": "\tfor (int i = 0; i < data_count; i++) {\n\t\tif (data[i]) {\n\t\t\tdelete data[i];\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-owning-memory"
      },
      "hash": "2e4f6d7b41fa3dc60bbd0c1ce3a980bcfa0e7520ed8bc05f102ce060b8d973c0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-bounds-pointer-arithmetic",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use pointer arithmetic",
      "detailsInfo": "pro-bounds-pointer-arithmetic",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 557,
          "offset": 11,
          "length": 4,
          "code": {
            "startLine": 555,
            "length": 4,
            "offset": 67,
            "surroundingCode": "\tfor (int i = 0; i < data_count; i++) {\n\t\tif (data[i]) {\n\t\t\tdelete data[i];\n\t\t}\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-bounds-pointer-arithmetic"
      },
      "hash": "0abf59769155da60c05831bf4de92dfa989c536256adc49c4d13168709261cbb"
    },
    {
      "tool": "Code Inspection",
      "category": "readability",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "readability",
          "name": "readability"
        }
      ],
      "type": "implicit-bool-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "implicit conversion 'InitData **' -> 'bool'",
      "detailsInfo": "implicit conversion 'TrainSystem *' -> 'bool'",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 560,
          "offset": 6,
          "length": 4,
          "code": {
            "startLine": 558,
            "length": 4,
            "offset": 12,
            "surroundingCode": "\t\t}\n\t}\n\tif (data) {\n\t\tfree(data);\n\t}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "readability-implicit-bool-conversion"
      },
      "hash": "865ffedfad325dfa54d3e39c091b7ecdba5dc386ba64e3f7e2f57538730eb332"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "no-malloc",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not manage memory manually; use RAII",
      "detailsInfo": "no-malloc",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 561,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 559,
            "length": 4,
            "offset": 18,
            "surroundingCode": "\t}\n\tif (data) {\n\t\tfree(data);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-no-malloc"
      },
      "hash": "7370a8b0f473b5ba1902ac287c4fbf5a2ab99e413587cc4ae29cb82b2d2bc8ce"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "owning-memory",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "calling legacy resource function without passing a 'gsl::owner<>'",
      "detailsInfo": "owning-memory",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 561,
          "offset": 3,
          "length": 4,
          "code": {
            "startLine": 559,
            "length": 4,
            "offset": 18,
            "surroundingCode": "\t}\n\tif (data) {\n\t\tfree(data);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-owning-memory"
      },
      "hash": "fcdd1f383ab3ac142fb5dd29b7409a5015fc522739e1e306a2c4d572e2ea9173"
    },
    {
      "tool": "Code Inspection",
      "category": "bugprone",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "bugprone",
          "name": "bugprone"
        }
      ],
      "type": "multi-level-implicit-pointer-conversion",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "multilevel pointer conversion from 'InitData **' to 'void *', please use explicit cast",
      "detailsInfo": "multi-level-implicit-pointer-conversion",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 561,
          "offset": 8,
          "length": 4,
          "code": {
            "startLine": 559,
            "length": 4,
            "offset": 23,
            "surroundingCode": "\t}\n\tif (data) {\n\t\tfree(data);\n\t}\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "bugprone-multi-level-implicit-pointer-conversion"
      },
      "hash": "a7861e9fea16615a0ab85d610af80de474014c791d537fc5c9437475e9b3e1d0"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'get_proc_address' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 566,
          "offset": 2,
          "length": 16,
          "code": {
            "startLine": 564,
            "length": 16,
            "offset": 185,
            "surroundingCode": "\nGDExtensionBinding::InitObject::InitObject(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {\n\tget_proc_address = p_get_proc_address;\n\tlibrary = p_library;\n\tinitialization = r_initialization;"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "64127f0102134ccd0c486672cf895369eaa1b3f189a2ce68fbc97ead01d781a6"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'library' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 567,
          "offset": 2,
          "length": 7,
          "code": {
            "startLine": 565,
            "length": 7,
            "offset": 224,
            "surroundingCode": "GDExtensionBinding::InitObject::InitObject(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {\n\tget_proc_address = p_get_proc_address;\n\tlibrary = p_library;\n\tinitialization = r_initialization;\n\tinit_data = new InitData();"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "63256a2ffaff7d67d65ef2acb01b5a63eea3f4bdc153673e9cf8df69b9202e5e"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'initialization' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 568,
          "offset": 2,
          "length": 14,
          "code": {
            "startLine": 566,
            "length": 14,
            "offset": 63,
            "surroundingCode": "\tget_proc_address = p_get_proc_address;\n\tlibrary = p_library;\n\tinitialization = r_initialization;\n\tinit_data = new InitData();\n\tGDExtensionBinding::initdata.add(init_data);"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "69147050af3b3a69b45d63659a6eb7612f5d03a1d0c413ce2bfd1028252d5ec9"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "owning-memory",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "assigning newly created 'gsl::owner<>' to non-owner 'InitData *'",
      "detailsInfo": "owning-memory",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 569,
          "offset": 2,
          "length": 9,
          "code": {
            "startLine": 567,
            "length": 9,
            "offset": 59,
            "surroundingCode": "\tlibrary = p_library;\n\tinitialization = r_initialization;\n\tinit_data = new InitData();\n\tGDExtensionBinding::initdata.add(init_data);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-owning-memory"
      },
      "hash": "9e52843d503723ee7ae4627f5681ba376206e3761e0ba0bf0a37ff9dd57b8a3f"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "prefer-member-initializer",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "'init_data' should be initialized in a member initializer of the constructor",
      "detailsInfo": "prefer-member-initializer",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 569,
          "offset": 2,
          "length": 9,
          "code": {
            "startLine": 567,
            "length": 9,
            "offset": 59,
            "surroundingCode": "\tlibrary = p_library;\n\tinitialization = r_initialization;\n\tinit_data = new InitData();\n\tGDExtensionBinding::initdata.add(init_data);\n}"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-prefer-member-initializer"
      },
      "hash": "87b6d26be3f2b0172055dd59eeb2536a2bba64853566bd517259f76730414fe2"
    },
    {
      "tool": "Code Inspection",
      "category": "cppcoreguidelines",
      "categoryPath": [
        {
          "id": "C++",
          "name": "C++"
        },
        {
          "id": "cppcoreguidelines",
          "name": "cppcoreguidelines"
        }
      ],
      "type": "pro-type-reinterpret-cast",
      "tags": [
        "C++"
      ],
      "severity": "High",
      "comment": "do not use reinterpret_cast",
      "detailsInfo": "pro-type-reinterpret-cast",
      "sources": [
        {
          "type": "file",
          "path": "godot-cpp/src/godot.cpp",
          "line": 597,
          "offset": 79,
          "length": 16,
          "code": {
            "startLine": 595,
            "length": 16,
            "offset": 156,
            "surroundingCode": "\tPackedByteArray decompressed = compressed.decompress(uncompressed_size, 1);\n\n\tinternal::gdextension_interface_editor_help_load_xml_from_utf8_chars_and_len(reinterpret_cast<const char *>(decompressed.ptr()), uncompressed_size);\n}\n"
          }
        }
      ],
      "attributes": {
        "module": "",
        "inspectionName": "cppcoreguidelines-pro-type-reinterpret-cast"
      },
      "hash": "d5d313ae8591d3b2f56112a70ec191ad7e0ec116db03434d1456cb95678c5092"
    }
  ]
}